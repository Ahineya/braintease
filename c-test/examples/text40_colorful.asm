; Generated by Ripple C99 Compiler (rcc)

_init_globals:
; String data " COLORFUL " at address 0
    LI T0, 32
    LI T1, 0
    STORE T0, GP, T1
    LI T0, 67
    LI T1, 1
    STORE T0, GP, T1
    LI T0, 79
    LI T1, 2
    STORE T0, GP, T1
    LI T0, 76
    LI T1, 3
    STORE T0, GP, T1
    LI T0, 79
    LI T1, 4
    STORE T0, GP, T1
    LI T0, 82
    LI T1, 5
    STORE T0, GP, T1
    LI T0, 70
    LI T1, 6
    STORE T0, GP, T1
    LI T0, 85
    LI T1, 7
    STORE T0, GP, T1
    LI T0, 76
    LI T1, 8
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 9
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 10
    STORE T0, GP, T1
; String data " TEXT40 " at address 11
    LI T0, 32
    LI T1, 11
    STORE T0, GP, T1
    LI T0, 84
    LI T1, 12
    STORE T0, GP, T1
    LI T0, 69
    LI T1, 13
    STORE T0, GP, T1
    LI T0, 88
    LI T1, 14
    STORE T0, GP, T1
    LI T0, 84
    LI T1, 15
    STORE T0, GP, T1
    LI T0, 52
    LI T1, 16
    STORE T0, GP, T1
    LI T0, 48
    LI T1, 17
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 18
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 19
    STORE T0, GP, T1
; String data " DEMO " at address 20
    LI T0, 32
    LI T1, 20
    STORE T0, GP, T1
    LI T0, 68
    LI T1, 21
    STORE T0, GP, T1
    LI T0, 69
    LI T1, 22
    STORE T0, GP, T1
    LI T0, 77
    LI T1, 23
    STORE T0, GP, T1
    LI T0, 79
    LI T1, 24
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 25
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 26
    STORE T0, GP, T1
; String data "Rainbow:" at address 27
    LI T0, 82
    LI T1, 27
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 28
    STORE T0, GP, T1
    LI T0, 105
    LI T1, 29
    STORE T0, GP, T1
    LI T0, 110
    LI T1, 30
    STORE T0, GP, T1
    LI T0, 98
    LI T1, 31
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 32
    STORE T0, GP, T1
    LI T0, 119
    LI T1, 33
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 34
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 35
    STORE T0, GP, T1
; String data "PICO-8 Colors:" at address 36
    LI T0, 80
    LI T1, 36
    STORE T0, GP, T1
    LI T0, 73
    LI T1, 37
    STORE T0, GP, T1
    LI T0, 67
    LI T1, 38
    STORE T0, GP, T1
    LI T0, 79
    LI T1, 39
    STORE T0, GP, T1
    LI T0, 45
    LI T1, 40
    STORE T0, GP, T1
    LI T0, 56
    LI T1, 41
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 42
    STORE T0, GP, T1
    LI T0, 67
    LI T1, 43
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 44
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 45
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 46
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 47
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 48
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 49
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 50
    STORE T0, GP, T1
; String data "Retro" at address 51
    LI T0, 82
    LI T1, 51
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 52
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 53
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 54
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 55
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 56
    STORE T0, GP, T1
; String data "Gaming" at address 57
    LI T0, 71
    LI T1, 57
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 58
    STORE T0, GP, T1
    LI T0, 109
    LI T1, 59
    STORE T0, GP, T1
    LI T0, 105
    LI T1, 60
    STORE T0, GP, T1
    LI T0, 110
    LI T1, 61
    STORE T0, GP, T1
    LI T0, 103
    LI T1, 62
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 63
    STORE T0, GP, T1
; String data "Style!" at address 64
    LI T0, 83
    LI T1, 64
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 65
    STORE T0, GP, T1
    LI T0, 121
    LI T1, 66
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 67
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 68
    STORE T0, GP, T1
    LI T0, 33
    LI T1, 69
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 70
    STORE T0, GP, T1
; String data "Matrix:" at address 71
    LI T0, 77
    LI T1, 71
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 72
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 73
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 74
    STORE T0, GP, T1
    LI T0, 105
    LI T1, 75
    STORE T0, GP, T1
    LI T0, 120
    LI T1, 76
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 77
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 78
    STORE T0, GP, T1
; String data "Animation:" at address 79
    LI T0, 65
    LI T1, 79
    STORE T0, GP, T1
    LI T0, 110
    LI T1, 80
    STORE T0, GP, T1
    LI T0, 105
    LI T1, 81
    STORE T0, GP, T1
    LI T0, 109
    LI T1, 82
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 83
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 84
    STORE T0, GP, T1
    LI T0, 105
    LI T1, 85
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 86
    STORE T0, GP, T1
    LI T0, 110
    LI T1, 87
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 88
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 89
    STORE T0, GP, T1
; String data "Frame:" at address 90
    LI T0, 70
    LI T1, 90
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 91
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 92
    STORE T0, GP, T1
    LI T0, 109
    LI T1, 93
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 94
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 95
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 96
    STORE T0, GP, T1
; String data "  Test  " at address 97
    LI T0, 32
    LI T1, 97
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 98
    STORE T0, GP, T1
    LI T0, 84
    LI T1, 99
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 100
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 101
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 102
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 103
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 104
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 105
    STORE T0, GP, T1
; String data " Complete! " at address 106
    LI T0, 32
    LI T1, 106
    STORE T0, GP, T1
    LI T0, 67
    LI T1, 107
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 108
    STORE T0, GP, T1
    LI T0, 109
    LI T1, 109
    STORE T0, GP, T1
    LI T0, 112
    LI T1, 110
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 111
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 112
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 113
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 114
    STORE T0, GP, T1
    LI T0, 33
    LI T1, 115
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 116
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 117
    STORE T0, GP, T1
; String data "Colorful TEXT40 test completed!" at address 118
    LI T0, 67
    LI T1, 118
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 119
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 120
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 121
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 122
    STORE T0, GP, T1
    LI T0, 102
    LI T1, 123
    STORE T0, GP, T1
    LI T0, 117
    LI T1, 124
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 125
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 126
    STORE T0, GP, T1
    LI T0, 84
    LI T1, 127
    STORE T0, GP, T1
    LI T0, 69
    LI T1, 128
    STORE T0, GP, T1
    LI T0, 88
    LI T1, 129
    STORE T0, GP, T1
    LI T0, 84
    LI T1, 130
    STORE T0, GP, T1
    LI T0, 52
    LI T1, 131
    STORE T0, GP, T1
    LI T0, 48
    LI T1, 132
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 133
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 134
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 135
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 136
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 137
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 138
    STORE T0, GP, T1
    LI T0, 99
    LI T1, 139
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 140
    STORE T0, GP, T1
    LI T0, 109
    LI T1, 141
    STORE T0, GP, T1
    LI T0, 112
    LI T1, 142
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 143
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 144
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 145
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 146
    STORE T0, GP, T1
    LI T0, 100
    LI T1, 147
    STORE T0, GP, T1
    LI T0, 33
    LI T1, 148
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 149
    STORE T0, GP, T1
    RET
delay:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 11 slots for locals
    ADDI SP, SP, 11
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
    ADD S2, FP, R0
    STORE S3, SB, S2
    ADD S1, FP, R0
    ADDI S1, S1, 1
    LI S0, 0
    STORE S0, SB, S1
    BEQ R0, R0, L_delay_1
; Unconditional branch to L_delay_1
L_delay_1:
; Recompute alloca t2 at FP+1
    ADD T7, FP, R0
    ADDI T7, T7, 1
    LOAD T6, SB, T7
; Recompute alloca t1 at FP+0
    ADD T5, FP, R0
    LOAD T4, SB, T5
    SLT T6, T6, T4
    BEQ T6, R0, L_delay_4
; Branch to L_delay_4 if condition is false
    BEQ R0, R0, L_delay_2
; Unconditional branch to L_delay_2 (condition was true)
L_delay_2:
    ADD T3, FP, R0
    ADDI T3, T3, 2
; Recompute alloca t2 at FP+1
    ADD T2, FP, R0
    ADDI T2, T2, 1
    LOAD T1, SB, T2
    LI T0, 2
    MUL T1, T1, T0
    STORE T1, SB, T3
    BEQ R0, R0, L_delay_3
; Unconditional branch to L_delay_3
L_delay_3:
; Recompute alloca t2 at FP+1
    ADD S0, FP, R0
    ADDI S0, S0, 1
    LOAD S1, SB, S0
    LI S2, 0
    ADD S1, S1, S2
    LOAD T4, SB, S0
    LI T6, 1
    ADD T4, T4, T6
    STORE T4, SB, S0
    BEQ R0, R0, L_delay_1
; Unconditional branch to L_delay_1
L_delay_4:
; Jump to epilogue
    BEQ R0, R0, L_delay_99999
L_delay_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
draw_rainbow_bar:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 13 slots for locals
    ADDI SP, SP, 13
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
L_draw_rainbow_bar_5:
    ADD S2, FP, R0
    STORE S3, SB, S2
    ADD S1, FP, R0
    ADDI S1, S1, 1
    ADD S0, S1, R0
    LI T7, 8
    STORE T7, SB, S0
; Recompute alloca t2 at FP+1
    ADD T6, FP, R0
    ADDI T6, T6, 1
    ADDI T5, T6, 1
    LI T4, 9
    STORE T4, SB, T5
; Recompute alloca t2 at FP+1
    ADD T3, FP, R0
    ADDI T3, T3, 1
    ADDI T2, T3, 2
    LI T1, 10
    STORE T1, SB, T2
; Recompute alloca t2 at FP+1
    ADD T0, FP, R0
    ADDI T0, T0, 1
    ADDI S1, T0, 3
    LI T7, 11
    STORE T7, SB, S1
; Recompute alloca t2 at FP+1
    ADD T6, FP, R0
    ADDI T6, T6, 1
    ADDI T4, T6, 4
    LI T3, 12
    STORE T3, SB, T4
; Recompute alloca t2 at FP+1
    ADD T1, FP, R0
    ADDI T1, T1, 1
    ADDI T0, T1, 5
    LI T7, 13
    STORE T7, SB, T0
; Recompute alloca t2 at FP+1
    ADD T6, FP, R0
    ADDI T6, T6, 1
    ADDI T3, T6, 6
    LI T1, 2
    STORE T1, SB, T3
; Recompute alloca t2 at FP+1
    ADD T7, FP, R0
    ADDI T7, T7, 1
    ADDI T6, T7, 7
    LI T1, 14
    STORE T1, SB, T6
    ADD T7, FP, R0
    ADDI T7, T7, 3
    LI T1, 0
    STORE T1, SB, T7
    BEQ R0, R0, L_draw_rainbow_bar_6
; Unconditional branch to L_draw_rainbow_bar_6
L_draw_rainbow_bar_6:
; Recompute alloca t11 at FP+3
    ADD T1, FP, R0
    ADDI T1, T1, 3
    LOAD T7, SB, T1
    LI S2, 8
    SLT T7, T7, S2
    BEQ T7, R0, L_draw_rainbow_bar_9
; Branch to L_draw_rainbow_bar_9 if condition is false
    BEQ R0, R0, L_draw_rainbow_bar_7
; Unconditional branch to L_draw_rainbow_bar_7 (condition was true)
L_draw_rainbow_bar_7:
    ADD S2, FP, R0
    ADDI S2, S2, 4
    LI T7, 0
    STORE T7, SB, S2
    BEQ R0, R0, L_draw_rainbow_bar_10
; Unconditional branch to L_draw_rainbow_bar_10
L_draw_rainbow_bar_10:
; Recompute alloca t14 at FP+4
    ADD T1, FP, R0
    ADDI T1, T1, 4
    LOAD T7, SB, T1
    LI S2, 5
    SLT T7, T7, S2
    BEQ T7, R0, L_draw_rainbow_bar_13
; Branch to L_draw_rainbow_bar_13 if condition is false
    BEQ R0, R0, L_draw_rainbow_bar_11
; Unconditional branch to L_draw_rainbow_bar_11 (condition was true)
L_draw_rainbow_bar_11:
; Recompute alloca t11 at FP+3
    ADD S2, FP, R0
    ADDI S2, S2, 3
    LOAD T7, SB, S2
    LI T1, 5
    MUL T7, T7, T1
; Recompute alloca t14 at FP+4
    ADD T1, FP, R0
    ADDI T1, T1, 4
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S3, SB, SC
    LOAD S3, SB, T1
    ADD T7, T7, S3
; Recompute alloca t1 at FP+0
    ADD S3, FP, R0
; Spill t3 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S0, SB, SC
    LOAD S0, SB, S3
; Spill t4 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE T5, SB, SC
    LOAD T5, SB, S2
; Spill t5 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T2, SB, SC
; Recompute alloca t2 at FP+1
    ADD T2, FP, R0
    ADDI T2, T2, 1
; Spill t6 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S1, SB, SC
; Spill t7 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T4, SB, SC
    ADD T4, T5, R0
    ADD S1, T2, T4
; Runtime bank overflow calculation for dynamic GEP
; Spill t8 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T0, SB, SC
; Spill t9 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T3, SB, SC
    LI T3, 4096
    DIV T0, S1, T3
; Spill t10 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T6, SB, SC
    MOD T6, S1, T3
    ADD T1, SB, T0
    ADD S1, T6, R0
    LOAD T4, SB, S1
    LI T0, 32
    LI T3, 0
; Spill live registers before call
; Spill t22 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T5, SB, SC
; Spill gep_new_bank_f2_op21_t23 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE T1, SB, SC
; Spill t23 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE S1, SB, SC
; Spill t20 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T7, SB, SC
; Spill t21 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE S0, SB, SC
; Spill const_f2_op23_32 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T0, SB, SC
; Spill const_f2_op24_0 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T3, SB, SC
; Spill t24 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE T4, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T4, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Arg 1 (scalar) to A1
    ADD A1, S0, R0
; Arg 2 (scalar) to A2
    ADD A2, T0, R0
; Arg 3 (scalar) to A3
    ADD A3, T3, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_draw_rainbow_bar_12
; Unconditional branch to L_draw_rainbow_bar_12
L_draw_rainbow_bar_12:
; Recompute alloca t14 at FP+4
    ADD T6, FP, R0
    ADDI T6, T6, 4
    LOAD T2, SB, T6
    LI S3, 0
    ADD T2, T2, S3
    LOAD S2, SB, T6
    LI T5, 1
    ADD S2, S2, T5
    STORE S2, SB, T6
    BEQ R0, R0, L_draw_rainbow_bar_10
; Unconditional branch to L_draw_rainbow_bar_10
L_draw_rainbow_bar_13:
    BEQ R0, R0, L_draw_rainbow_bar_8
; Unconditional branch to L_draw_rainbow_bar_8
L_draw_rainbow_bar_8:
; Recompute alloca t11 at FP+3
    ADD T1, FP, R0
    ADDI T1, T1, 3
    LOAD S1, SB, T1
    LI T7, 0
    ADD S1, S1, T7
    LOAD S0, SB, T1
    LI T0, 1
    ADD S0, S0, T0
    STORE S0, SB, T1
    BEQ R0, R0, L_draw_rainbow_bar_6
; Unconditional branch to L_draw_rainbow_bar_6
L_draw_rainbow_bar_9:
; Jump to epilogue
    BEQ R0, R0, L_draw_rainbow_bar_99999
L_draw_rainbow_bar_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
draw_color_palette:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 14 slots for locals
    ADDI SP, SP, 14
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
L_draw_color_palette_14:
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADD S0, FP, R0
    ADDI S0, S0, 1
    STORE S2, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 2
    LI T6, 0
    STORE T6, SB, T7
    BEQ R0, R0, L_draw_color_palette_15
; Unconditional branch to L_draw_color_palette_15
L_draw_color_palette_15:
; Recompute alloca t4 at FP+2
    ADD T5, FP, R0
    ADDI T5, T5, 2
    LOAD T4, SB, T5
    LI T3, 16
    SLT T4, T4, T3
    BEQ T4, R0, L_draw_color_palette_18
; Branch to L_draw_color_palette_18 if condition is false
    BEQ R0, R0, L_draw_color_palette_16
; Unconditional branch to L_draw_color_palette_16 (condition was true)
L_draw_color_palette_16:
    ADD T2, FP, R0
    ADDI T2, T2, 3
; Recompute alloca t4 at FP+2
    ADD T1, FP, R0
    ADDI T1, T1, 2
    LOAD T0, SB, T1
    LI T6, 8
    DIV T0, T0, T6
    STORE T0, SB, T2
    ADD T7, FP, R0
    ADDI T7, T7, 4
    LOAD S0, SB, T1
    LI S1, 8
    MOD S0, S0, S1
    STORE S0, SB, T7
; Recompute alloca t2 at FP+0
    ADD T3, FP, R0
    LOAD T4, SB, T3
    LOAD T5, SB, T7
    LI T6, 3
    MUL T5, T5, T6
    ADD T4, T4, T5
; Recompute alloca t3 at FP+1
    ADD S1, FP, R0
    ADDI S1, S1, 1
    LOAD T6, SB, S1
    LOAD T5, SB, T2
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S3, SB, SC
    LI S3, 2
    MUL T5, T5, S3
    ADD T6, T6, T5
    LOAD S3, SB, T1
    LI T5, 32
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S2, SB, SC
    LI S2, 0
; Spill live registers before call
; Spill t9 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T0, SB, SC
; Spill t12 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S0, SB, SC
; Spill t16 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T4, SB, SC
; Spill t20 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T6, SB, SC
; Spill const_f4_op11_32 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T5, SB, SC
; Spill const_f4_op12_0 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE S2, SB, SC
; Spill t21 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE S3, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Arg 1 (scalar) to A1
    ADD A1, T6, R0
; Arg 2 (scalar) to A2
    ADD A2, T5, R0
; Arg 3 (scalar) to A3
    ADD A3, S2, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
; Recompute alloca t2 at FP+0
    ADD T0, FP, R0
    LOAD S0, SB, T0
; Recompute alloca t10 at FP+4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    LOAD T7, SB, T3
    LI S1, 3
    MUL T7, T7, S1
    ADD S0, S0, T7
    LI T2, 1
    ADD S0, S0, T2
; Recompute alloca t3 at FP+1
    ADD T1, FP, R0
    ADDI T1, T1, 1
    LOAD T4, SB, T1
; Recompute alloca t7 at FP+3
    ADD T6, FP, R0
    ADDI T6, T6, 3
    LOAD T5, SB, T6
    LI S2, 2
    MUL T5, T5, S2
    ADD T4, T4, T5
; Recompute alloca t4 at FP+2
    ADD S3, FP, R0
    ADDI S3, S3, 2
    LOAD S1, SB, S3
    LI T7, 32
    LI T2, 0
; Spill live registers before call
; Spill t26 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S0, SB, SC
; Spill t30 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T4, SB, SC
; Spill const_f4_op18_32 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T7, SB, SC
; Spill const_f4_op19_0 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T2, SB, SC
; Spill t31 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE S1, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S1, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Arg 1 (scalar) to A1
    ADD A1, T4, R0
; Arg 2 (scalar) to A2
    ADD A2, T7, R0
; Arg 3 (scalar) to A3
    ADD A3, T2, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
; Recompute alloca t2 at FP+0
    ADD S2, FP, R0
    LOAD T5, SB, S2
; Recompute alloca t10 at FP+4
    ADD T0, FP, R0
    ADDI T0, T0, 4
    LOAD T3, SB, T0
    LI T1, 3
    MUL T3, T3, T1
    ADD T5, T5, T3
; Recompute alloca t3 at FP+1
    ADD T6, FP, R0
    ADDI T6, T6, 1
    LOAD S3, SB, T6
; Recompute alloca t7 at FP+3
    ADD S0, FP, R0
    ADDI S0, S0, 3
    LOAD T4, SB, S0
    LI T7, 2
    MUL T4, T4, T7
    ADD S3, S3, T4
    LI T2, 1
    ADD S3, S3, T2
; Recompute alloca t4 at FP+2
    ADD S1, FP, R0
    ADDI S1, S1, 2
    LOAD T1, SB, S1
    LI T3, 32
    LI T7, 0
; Spill live registers before call
; Spill t35 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T5, SB, SC
; Spill t40 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE S3, SB, SC
; Spill const_f4_op25_32 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE T3, SB, SC
; Spill const_f4_op26_0 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 31
    STORE T7, SB, SC
; Spill t41 to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 32
    STORE T1, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T1, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Arg 1 (scalar) to A1
    ADD A1, S3, R0
; Arg 2 (scalar) to A2
    ADD A2, T3, R0
; Arg 3 (scalar) to A3
    ADD A3, T7, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
; Recompute alloca t2 at FP+0
    ADD T4, FP, R0
    LOAD T2, SB, T4
; Recompute alloca t10 at FP+4
    ADD S2, FP, R0
    ADDI S2, S2, 4
    LOAD T0, SB, S2
    LI T6, 3
    MUL T0, T0, T6
    ADD T2, T2, T0
    LI S0, 1
    ADD T2, T2, S0
; Recompute alloca t3 at FP+1
    ADD S1, FP, R0
    ADDI S1, S1, 1
    LOAD T5, SB, S1
; Recompute alloca t7 at FP+3
    ADD S3, FP, R0
    ADDI S3, S3, 3
    LOAD T3, SB, S3
    LI T7, 2
    MUL T3, T3, T7
    ADD T5, T5, T3
    LI T1, 1
    ADD T5, T5, T1
; Recompute alloca t4 at FP+2
    ADD T6, FP, R0
    ADDI T6, T6, 2
    LOAD T0, SB, T6
    LI S0, 32
    LI T7, 0
; Spill live registers before call
; Spill t46 to slot 19
    ADD SC, FP, R0
    ADDI SC, SC, 33
    STORE T2, SB, SC
; Spill t51 to slot 20
    ADD SC, FP, R0
    ADDI SC, SC, 34
    STORE T5, SB, SC
; Spill const_f4_op32_32 to slot 21
    ADD SC, FP, R0
    ADDI SC, SC, 35
    STORE S0, SB, SC
; Spill const_f4_op33_0 to slot 22
    ADD SC, FP, R0
    ADDI SC, SC, 36
    STORE T7, SB, SC
; Spill t52 to slot 23
    ADD SC, FP, R0
    ADDI SC, SC, 37
    STORE T0, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T0, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Arg 1 (scalar) to A1
    ADD A1, T5, R0
; Arg 2 (scalar) to A2
    ADD A2, S0, R0
; Arg 3 (scalar) to A3
    ADD A3, T7, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    ADD T3, FP, R0
    ADDI T3, T3, 5
; Recompute alloca t4 at FP+2
    ADD T1, FP, R0
    ADDI T1, T1, 2
    LOAD T4, SB, T1
    LI S2, 8
    SLT T4, T4, S2
    BEQ T4, R0, L_draw_color_palette_20
; Branch to L_draw_color_palette_20 if condition is false
    BEQ R0, R0, L_draw_color_palette_19
; Unconditional branch to L_draw_color_palette_19 (condition was true)
L_draw_color_palette_19:
    LI S1, 7
; Recompute alloca t53 at FP+5
    ADD S3, FP, R0
    ADDI S3, S3, 5
    STORE S1, SB, S3
    BEQ R0, R0, L_draw_color_palette_21
; Unconditional branch to L_draw_color_palette_21
L_draw_color_palette_20:
    LI T6, 0
; Recompute alloca t53 at FP+5
    ADD T2, FP, R0
    ADDI T2, T2, 5
    STORE T6, SB, T2
    BEQ R0, R0, L_draw_color_palette_21
; Unconditional branch to L_draw_color_palette_21
L_draw_color_palette_21:
; Recompute alloca t2 at FP+0
    ADD T5, FP, R0
    LOAD S0, SB, T5
; Recompute alloca t10 at FP+4
    ADD T7, FP, R0
    ADDI T7, T7, 4
    LOAD T0, SB, T7
    LI S2, 3
    MUL T0, T0, S2
    ADD S0, S0, T0
; Recompute alloca t3 at FP+1
    ADD T4, FP, R0
    ADDI T4, T4, 1
    LOAD T1, SB, T4
; Recompute alloca t7 at FP+3
    ADD T3, FP, R0
    ADDI T3, T3, 3
    LOAD S1, SB, T3
    LI S3, 2
    MUL S1, S1, S3
    ADD T1, T1, S1
; Recompute alloca t4 at FP+2
    ADD T6, FP, R0
    ADDI T6, T6, 2
    LOAD T2, SB, T6
    LI S2, 10
    DIV T2, T2, S2
    LI T0, 48
    ADD T0, T0, T2
; Recompute alloca t53 at FP+5
    ADD S3, FP, R0
    ADDI S3, S3, 5
    LOAD S1, SB, S3
    LOAD S2, SB, T6
; Spill live registers before call
; Spill t59 to slot 24
    ADD SC, FP, R0
    ADDI SC, SC, 38
    STORE S0, SB, SC
; Spill t63 to slot 25
    ADD SC, FP, R0
    ADDI SC, SC, 39
    STORE T1, SB, SC
; Spill t66 to slot 26
    ADD SC, FP, R0
    ADDI SC, SC, 40
    STORE T0, SB, SC
; Spill t67 to slot 27
    ADD SC, FP, R0
    ADDI SC, SC, 41
    STORE S1, SB, SC
; Spill t68 to slot 28
    ADD SC, FP, R0
    ADDI SC, SC, 42
    STORE S2, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S2, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Arg 1 (scalar) to A1
    ADD A1, T1, R0
; Arg 2 (scalar) to A2
    ADD A2, T0, R0
; Arg 3 (scalar) to A3
    ADD A3, S1, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
; Recompute alloca t2 at FP+0
    ADD T2, FP, R0
    LOAD T5, SB, T2
; Recompute alloca t10 at FP+4
    ADD T7, FP, R0
    ADDI T7, T7, 4
    LOAD T4, SB, T7
    LI T3, 3
    MUL T4, T4, T3
    ADD T5, T5, T4
    LI S3, 1
    ADD T5, T5, S3
; Recompute alloca t3 at FP+1
    ADD T6, FP, R0
    ADDI T6, T6, 1
    LOAD S0, SB, T6
; Recompute alloca t7 at FP+3
    ADD T1, FP, R0
    ADDI T1, T1, 3
    LOAD T0, SB, T1
    LI S1, 2
    MUL T0, T0, S1
    ADD S0, S0, T0
; Recompute alloca t4 at FP+2
    ADD S2, FP, R0
    ADDI S2, S2, 2
    LOAD T3, SB, S2
    LI T4, 10
    MOD T3, T3, T4
    LI S3, 48
    ADD S3, S3, T3
; Recompute alloca t53 at FP+5
    ADD S1, FP, R0
    ADDI S1, S1, 5
    LOAD T0, SB, S1
    LOAD T4, SB, S2
; Spill live registers before call
; Spill t73 to slot 29
    ADD SC, FP, R0
    ADDI SC, SC, 43
    STORE T5, SB, SC
; Spill t77 to slot 30
    ADD SC, FP, R0
    ADDI SC, SC, 44
    STORE S0, SB, SC
; Spill t80 to slot 31
    ADD SC, FP, R0
    ADDI SC, SC, 45
    STORE S3, SB, SC
; Spill t81 to slot 32
    ADD SC, FP, R0
    ADDI SC, SC, 46
    STORE T0, SB, SC
; Spill t82 to slot 33
    ADD SC, FP, R0
    ADDI SC, SC, 47
    STORE T4, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T4, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Arg 1 (scalar) to A1
    ADD A1, S0, R0
; Arg 2 (scalar) to A2
    ADD A2, S3, R0
; Arg 3 (scalar) to A3
    ADD A3, T0, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_draw_color_palette_17
; Unconditional branch to L_draw_color_palette_17
L_draw_color_palette_17:
; Recompute alloca t4 at FP+2
    ADD T3, FP, R0
    ADDI T3, T3, 2
    LOAD T2, SB, T3
    LI T7, 0
    ADD T2, T2, T7
    LOAD T6, SB, T3
    LI T1, 1
    ADD T6, T6, T1
    STORE T6, SB, T3
    BEQ R0, R0, L_draw_color_palette_15
; Unconditional branch to L_draw_color_palette_15
L_draw_color_palette_18:
; Jump to epilogue
    BEQ R0, R0, L_draw_color_palette_99999
L_draw_color_palette_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
main:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 24 slots for locals
    ADDI SP, SP, 24
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
L_main_22:
    LI S3, 2
; Spill live registers before call
; Spill const_f6_op0_2 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Call function display_set_mode
    CALL display_set_mode
; Spill live registers before call
; Call function display_clear
    CALL display_clear
; Spill live registers before call
; Call function display_enable
    CALL display_enable
    ADD S2, FP, R0
    LI S1, 0
    STORE S1, SB, S2
    BEQ R0, R0, L_main_23
; Unconditional branch to L_main_23
L_main_23:
; Recompute alloca t0 at FP+0
    ADD S0, FP, R0
    LOAD T7, SB, S0
    LI T6, 40
    SLT T7, T7, T6
    BEQ T7, R0, L_main_26
; Branch to L_main_26 if condition is false
    BEQ R0, R0, L_main_24
; Unconditional branch to L_main_24 (condition was true)
L_main_24:
; Recompute alloca t0 at FP+0
    ADD T5, FP, R0
    LOAD T4, SB, T5
    LI T3, 0
    LI T2, 61
    LI T1, 12
    LI T0, 1
; Spill live registers before call
; Spill t3 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T4, SB, SC
; Spill const_f6_op4_0 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T3, SB, SC
; Spill const_f6_op5_61 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T2, SB, SC
; Spill const_f6_op6_12 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T1, SB, SC
; Spill const_f6_op7_1 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE T0, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T0, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Arg 1 (scalar) to A1
    ADD A1, T3, R0
; Arg 2 (scalar) to A2
    ADD A2, T2, R0
; Arg 3 (scalar) to A3
    ADD A3, T1, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_main_25
; Unconditional branch to L_main_25
L_main_25:
; Recompute alloca t0 at FP+0
    ADD S3, FP, R0
    LOAD S1, SB, S3
    LI S2, 0
    ADD S1, S1, S2
    LOAD T6, SB, S3
    LI T7, 1
    ADD T6, T6, T7
    STORE T6, SB, S3
    BEQ R0, R0, L_main_23
; Unconditional branch to L_main_23
L_main_26:
    ADD S0, FP, R0
    ADDI S0, S0, 1
    LI T5, 0
    STORE T5, SB, S0
    BEQ R0, R0, L_main_27
; Unconditional branch to L_main_27
L_main_27:
; Recompute alloca t8 at FP+1
    ADD T4, FP, R0
    ADDI T4, T4, 1
    LOAD T3, SB, T4
    LI T2, 40
    SLT T3, T3, T2
    BEQ T3, R0, L_main_30
; Branch to L_main_30 if condition is false
    BEQ R0, R0, L_main_28
; Unconditional branch to L_main_28 (condition was true)
L_main_28:
; Recompute alloca t8 at FP+1
    ADD T1, FP, R0
    ADDI T1, T1, 1
    LOAD T0, SB, T1
    LI S2, 24
    LI T7, 61
    LI S3, 11
    LI T5, 3
; Spill live registers before call
; Spill t5 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE S1, SB, SC
; Spill t7 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 31
    STORE T6, SB, SC
; Spill t11 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 32
    STORE T0, SB, SC
; Spill const_f6_op13_24 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 33
    STORE S2, SB, SC
; Spill const_f6_op14_61 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 34
    STORE T7, SB, SC
; Spill const_f6_op15_11 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 35
    STORE S3, SB, SC
; Spill const_f6_op16_3 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 36
    STORE T5, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T5, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Arg 1 (scalar) to A1
    ADD A1, S2, R0
; Arg 2 (scalar) to A2
    ADD A2, T7, R0
; Arg 3 (scalar) to A3
    ADD A3, S3, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_main_29
; Unconditional branch to L_main_29
L_main_29:
; Recompute alloca t8 at FP+1
    ADD S0, FP, R0
    ADDI S0, S0, 1
    LOAD T2, SB, S0
    LI T3, 0
    ADD T2, T2, T3
    LOAD T4, SB, S0
    LI S1, 1
    ADD T4, T4, S1
    STORE T4, SB, S0
    BEQ R0, R0, L_main_27
; Unconditional branch to L_main_27
L_main_30:
    ADD T6, FP, R0
    ADDI T6, T6, 2
    LI T1, 1
    STORE T1, SB, T6
    BEQ R0, R0, L_main_31
; Unconditional branch to L_main_31
L_main_31:
; Recompute alloca t16 at FP+2
    ADD T0, FP, R0
    ADDI T0, T0, 2
    LOAD S2, SB, T0
    LI T7, 24
    SLT S2, S2, T7
    BEQ S2, R0, L_main_34
; Branch to L_main_34 if condition is false
    BEQ R0, R0, L_main_32
; Unconditional branch to L_main_32 (condition was true)
L_main_32:
; Recompute alloca t16 at FP+2
    ADD S3, FP, R0
    ADDI S3, S3, 2
    LOAD T5, SB, S3
    LI T3, 0
    LI S1, 124
    LI S0, 8
    LI T1, 0
; Spill live registers before call
; Spill t13 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 37
    STORE T2, SB, SC
; Spill t15 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 38
    STORE T4, SB, SC
; Spill const_f6_op22_0 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 39
    STORE T3, SB, SC
; Spill t19 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 40
    STORE T5, SB, SC
; Spill const_f6_op23_124 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 41
    STORE S1, SB, SC
; Spill const_f6_op24_8 to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 42
    STORE S0, SB, SC
; Spill const_f6_op25_0 to slot 19
    ADD SC, FP, R0
    ADDI SC, SC, 43
    STORE T1, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T1, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Arg 1 (scalar) to A1
    ADD A1, T5, R0
; Arg 2 (scalar) to A2
    ADD A2, S1, R0
; Arg 3 (scalar) to A3
    ADD A3, S0, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_main_33
; Unconditional branch to L_main_33
L_main_33:
; Recompute alloca t16 at FP+2
    ADD T6, FP, R0
    ADDI T6, T6, 2
    LOAD T7, SB, T6
    LI S2, 0
    ADD T7, T7, S2
    LOAD T0, SB, T6
    LI T2, 1
    ADD T0, T0, T2
    STORE T0, SB, T6
    BEQ R0, R0, L_main_31
; Unconditional branch to L_main_31
L_main_34:
    ADD T4, FP, R0
    ADDI T4, T4, 3
    LI S3, 1
    STORE S3, SB, T4
    BEQ R0, R0, L_main_35
; Unconditional branch to L_main_35
L_main_35:
; Recompute alloca t24 at FP+3
    ADD T3, FP, R0
    ADDI T3, T3, 3
    LOAD T5, SB, T3
    LI S1, 24
    SLT T5, T5, S1
    BEQ T5, R0, L_main_38
; Branch to L_main_38 if condition is false
    BEQ R0, R0, L_main_36
; Unconditional branch to L_main_36 (condition was true)
L_main_36:
; Recompute alloca t24 at FP+3
    ADD S0, FP, R0
    ADDI S0, S0, 3
    LOAD T1, SB, S0
    LI S2, 39
    LI T2, 124
    LI T6, 10
    LI S3, 0
; Spill live registers before call
; Spill t21 to slot 20
    ADD SC, FP, R0
    ADDI SC, SC, 44
    STORE T7, SB, SC
; Spill t23 to slot 21
    ADD SC, FP, R0
    ADDI SC, SC, 45
    STORE T0, SB, SC
; Spill const_f6_op31_39 to slot 22
    ADD SC, FP, R0
    ADDI SC, SC, 46
    STORE S2, SB, SC
; Spill t27 to slot 23
    ADD SC, FP, R0
    ADDI SC, SC, 47
    STORE T1, SB, SC
; Spill const_f6_op32_124 to slot 24
    ADD SC, FP, R0
    ADDI SC, SC, 48
    STORE T2, SB, SC
; Spill const_f6_op33_10 to slot 25
    ADD SC, FP, R0
    ADDI SC, SC, 49
    STORE T6, SB, SC
; Spill const_f6_op34_0 to slot 26
    ADD SC, FP, R0
    ADDI SC, SC, 50
    STORE S3, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Arg 1 (scalar) to A1
    ADD A1, T1, R0
; Arg 2 (scalar) to A2
    ADD A2, T2, R0
; Arg 3 (scalar) to A3
    ADD A3, T6, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_main_37
; Unconditional branch to L_main_37
L_main_37:
; Recompute alloca t24 at FP+3
    ADD T4, FP, R0
    ADDI T4, T4, 3
    LOAD S1, SB, T4
    LI T5, 0
    ADD S1, S1, T5
    LOAD T3, SB, T4
    LI T7, 1
    ADD T3, T3, T7
    STORE T3, SB, T4
    BEQ R0, R0, L_main_35
; Unconditional branch to L_main_35
L_main_38:
    LI T0, 0
    LI S0, 0
    LI S2, 42
    LI T1, 7
    LI T2, 8
; Spill live registers before call
; Spill t29 to slot 27
    ADD SC, FP, R0
    ADDI SC, SC, 51
    STORE S1, SB, SC
; Spill t31 to slot 28
    ADD SC, FP, R0
    ADDI SC, SC, 52
    STORE T3, SB, SC
; Spill const_f6_op37_0 to slot 29
    ADD SC, FP, R0
    ADDI SC, SC, 53
    STORE T0, SB, SC
; Spill const_f6_op38_0 to slot 30
    ADD SC, FP, R0
    ADDI SC, SC, 54
    STORE S0, SB, SC
; Spill const_f6_op39_42 to slot 31
    ADD SC, FP, R0
    ADDI SC, SC, 55
    STORE S2, SB, SC
; Spill const_f6_op40_7 to slot 32
    ADD SC, FP, R0
    ADDI SC, SC, 56
    STORE T1, SB, SC
; Spill const_f6_op41_8 to slot 33
    ADD SC, FP, R0
    ADDI SC, SC, 57
    STORE T2, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T2, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Arg 1 (scalar) to A1
    ADD A1, S0, R0
; Arg 2 (scalar) to A2
    ADD A2, S2, R0
; Arg 3 (scalar) to A3
    ADD A3, T1, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    LI T6, 39
    LI S3, 0
    LI T5, 42
    LI T7, 7
    LI T4, 9
; Spill live registers before call
; Spill const_f6_op42_39 to slot 34
    ADD SC, FP, R0
    ADDI SC, SC, 58
    STORE T6, SB, SC
; Spill const_f6_op43_0 to slot 35
    ADD SC, FP, R0
    ADDI SC, SC, 59
    STORE S3, SB, SC
; Spill const_f6_op44_42 to slot 36
    ADD SC, FP, R0
    ADDI SC, SC, 60
    STORE T5, SB, SC
; Spill const_f6_op45_7 to slot 37
    ADD SC, FP, R0
    ADDI SC, SC, 61
    STORE T7, SB, SC
; Spill const_f6_op46_9 to slot 38
    ADD SC, FP, R0
    ADDI SC, SC, 62
    STORE T4, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T4, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Arg 1 (scalar) to A1
    ADD A1, S3, R0
; Arg 2 (scalar) to A2
    ADD A2, T5, R0
; Arg 3 (scalar) to A3
    ADD A3, T7, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    LI S1, 0
    LI T3, 24
    LI T0, 42
    LI S0, 7
    LI S2, 14
; Spill live registers before call
; Spill const_f6_op47_0 to slot 39
    ADD SC, FP, R0
    ADDI SC, SC, 63
    STORE S1, SB, SC
; Spill const_f6_op48_24 to slot 40
    ADD SC, FP, R0
    ADDI SC, SC, 64
    STORE T3, SB, SC
; Spill const_f6_op49_42 to slot 41
    ADD SC, FP, R0
    ADDI SC, SC, 65
    STORE T0, SB, SC
; Spill const_f6_op50_7 to slot 42
    ADD SC, FP, R0
    ADDI SC, SC, 66
    STORE S0, SB, SC
; Spill const_f6_op51_14 to slot 43
    ADD SC, FP, R0
    ADDI SC, SC, 67
    STORE S2, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S2, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Arg 1 (scalar) to A1
    ADD A1, T3, R0
; Arg 2 (scalar) to A2
    ADD A2, T0, R0
; Arg 3 (scalar) to A3
    ADD A3, S0, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    LI T1, 39
    LI T2, 24
    LI T6, 42
    LI S3, 7
    LI T5, 15
; Spill live registers before call
; Spill const_f6_op52_39 to slot 44
    ADD SC, FP, R0
    ADDI SC, SC, 68
    STORE T1, SB, SC
; Spill const_f6_op53_24 to slot 45
    ADD SC, FP, R0
    ADDI SC, SC, 69
    STORE T2, SB, SC
; Spill const_f6_op54_42 to slot 46
    ADD SC, FP, R0
    ADDI SC, SC, 70
    STORE T6, SB, SC
; Spill const_f6_op55_7 to slot 47
    ADD SC, FP, R0
    ADDI SC, SC, 71
    STORE S3, SB, SC
; Spill const_f6_op56_15 to slot 48
    ADD SC, FP, R0
    ADDI SC, SC, 72
    STORE T5, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T5, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Arg 1 (scalar) to A1
    ADD A1, T2, R0
; Arg 2 (scalar) to A2
    ADD A2, T6, R0
; Arg 3 (scalar) to A3
    ADD A3, S3, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    LI T7, 10
    LI T4, 2
    LI S1, 0
    LI T3, 7
    LI T0, 2
; Spill live registers before call
; Spill const_f6_op57_10 to slot 49
    ADD SC, FP, R0
    ADDI SC, SC, 73
    STORE T7, SB, SC
; Spill const_f6_op58_2 to slot 50
    ADD SC, FP, R0
    ADDI SC, SC, 74
    STORE T4, SB, SC
; Spill const_f6_op59_0 to slot 51
    ADD SC, FP, R0
    ADDI SC, SC, 75
    STORE S1, SB, SC
; Spill const_f6_op60_7 to slot 52
    ADD SC, FP, R0
    ADDI SC, SC, 76
    STORE T3, SB, SC
; Spill const_f6_op61_2 to slot 53
    ADD SC, FP, R0
    ADDI SC, SC, 77
    STORE T0, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T0, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE T3, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Arg 1 (scalar) to A1
    ADD A1, T4, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, S1, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
    LI S0, 20
    LI S2, 2
    LI T1, 11
    LI T2, 10
    LI T6, 1
; Spill live registers before call
; Spill const_f6_op62_20 to slot 54
    ADD SC, FP, R0
    ADDI SC, SC, 78
    STORE S0, SB, SC
; Spill const_f6_op63_2 to slot 55
    ADD SC, FP, R0
    ADDI SC, SC, 79
    STORE S2, SB, SC
; Spill const_f6_op64_11 to slot 56
    ADD SC, FP, R0
    ADDI SC, SC, 80
    STORE T1, SB, SC
; Spill const_f6_op65_10 to slot 57
    ADD SC, FP, R0
    ADDI SC, SC, 81
    STORE T2, SB, SC
; Spill const_f6_op66_1 to slot 58
    ADD SC, FP, R0
    ADDI SC, SC, 82
    STORE T6, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T6, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE T2, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Arg 1 (scalar) to A1
    ADD A1, S2, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, T1, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
    LI S3, 28
    LI T5, 2
    LI T7, 20
    LI T4, 14
    LI S1, 3
; Spill live registers before call
; Spill const_f6_op67_28 to slot 59
    ADD SC, FP, R0
    ADDI SC, SC, 83
    STORE S3, SB, SC
; Spill const_f6_op68_2 to slot 60
    ADD SC, FP, R0
    ADDI SC, SC, 84
    STORE T5, SB, SC
; Spill const_f6_op69_20 to slot 61
    ADD SC, FP, R0
    ADDI SC, SC, 85
    STORE T7, SB, SC
; Spill const_f6_op70_14 to slot 62
    ADD SC, FP, R0
    ADDI SC, SC, 86
    STORE T4, SB, SC
; Spill const_f6_op71_3 to slot 63
    ADD SC, FP, R0
    ADDI SC, SC, 87
    STORE S1, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S1, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE T4, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Arg 1 (scalar) to A1
    ADD A1, T5, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, T7, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
    LI T3, 2
    LI T0, 4
    LI S0, 27
    LI S2, 7
    LI T1, 0
; Spill live registers before call
; Spill const_f6_op72_2 to slot 64
    ADD SC, FP, R0
    ADDI SC, SC, 88
    STORE T3, SB, SC
; Spill const_f6_op73_4 to slot 65
    ADD SC, FP, R0
    ADDI SC, SC, 89
    STORE T0, SB, SC
; Spill const_f6_op74_27 to slot 66
    ADD SC, FP, R0
    ADDI SC, SC, 90
    STORE S0, SB, SC
; Spill const_f6_op75_7 to slot 67
    ADD SC, FP, R0
    ADDI SC, SC, 91
    STORE S2, SB, SC
; Spill const_f6_op76_0 to slot 68
    ADD SC, FP, R0
    ADDI SC, SC, 92
    STORE T1, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T1, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE S2, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Arg 1 (scalar) to A1
    ADD A1, T0, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, S0, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
    LI T2, 5
; Spill live registers before call
; Spill const_f6_op77_5 to slot 69
    ADD SC, FP, R0
    ADDI SC, SC, 93
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function draw_rainbow_bar
    CALL draw_rainbow_bar
    LI T6, 2
    LI S3, 7
    LI T5, 36
    LI T7, 6
    LI T4, 0
; Spill live registers before call
; Spill const_f6_op78_2 to slot 70
    ADD SC, FP, R0
    ADDI SC, SC, 94
    STORE T6, SB, SC
; Spill const_f6_op79_7 to slot 71
    ADD SC, FP, R0
    ADDI SC, SC, 95
    STORE S3, SB, SC
; Spill const_f6_op80_36 to slot 72
    ADD SC, FP, R0
    ADDI SC, SC, 96
    STORE T5, SB, SC
; Spill const_f6_op81_6 to slot 73
    ADD SC, FP, R0
    ADDI SC, SC, 97
    STORE T7, SB, SC
; Spill const_f6_op82_0 to slot 74
    ADD SC, FP, R0
    ADDI SC, SC, 98
    STORE T4, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T4, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE T7, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Arg 1 (scalar) to A1
    ADD A1, S3, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, T5, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
    LI S1, 2
    LI T3, 9
; Spill live registers before call
; Spill const_f6_op83_2 to slot 75
    ADD SC, FP, R0
    ADDI SC, SC, 99
    STORE S1, SB, SC
; Spill const_f6_op84_9 to slot 76
    ADD SC, FP, R0
    ADDI SC, SC, 100
    STORE T3, SB, SC
; Setting up 2 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Arg 1 (scalar) to A1
    ADD A1, T3, R0
; Call function draw_color_palette
    CALL draw_color_palette
    LI T0, 2
    LI S0, 14
    LI S2, 51
    LI T1, 9
    LI T2, 4
; Spill live registers before call
; Spill const_f6_op85_2 to slot 77
    ADD SC, FP, R0
    ADDI SC, SC, 101
    STORE T0, SB, SC
; Spill const_f6_op86_14 to slot 78
    ADD SC, FP, R0
    ADDI SC, SC, 102
    STORE S0, SB, SC
; Spill const_f6_op87_51 to slot 79
    ADD SC, FP, R0
    ADDI SC, SC, 103
    STORE S2, SB, SC
; Spill const_f6_op88_9 to slot 80
    ADD SC, FP, R0
    ADDI SC, SC, 104
    STORE T1, SB, SC
; Spill const_f6_op89_4 to slot 81
    ADD SC, FP, R0
    ADDI SC, SC, 105
    STORE T2, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T2, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE T1, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Arg 1 (scalar) to A1
    ADD A1, S0, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, S2, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
    LI T6, 8
    LI S3, 14
    LI T5, 57
    LI T7, 11
    LI T4, 3
; Spill live registers before call
; Spill const_f6_op90_8 to slot 82
    ADD SC, FP, R0
    ADDI SC, SC, 106
    STORE T6, SB, SC
; Spill const_f6_op91_14 to slot 83
    ADD SC, FP, R0
    ADDI SC, SC, 107
    STORE S3, SB, SC
; Spill const_f6_op92_57 to slot 84
    ADD SC, FP, R0
    ADDI SC, SC, 108
    STORE T5, SB, SC
; Spill const_f6_op93_11 to slot 85
    ADD SC, FP, R0
    ADDI SC, SC, 109
    STORE T7, SB, SC
; Spill const_f6_op94_3 to slot 86
    ADD SC, FP, R0
    ADDI SC, SC, 110
    STORE T4, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T4, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE T7, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Arg 1 (scalar) to A1
    ADD A1, S3, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, T5, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
    LI S1, 15
    LI T3, 14
    LI T0, 64
    LI S0, 14
    LI S2, 2
; Spill live registers before call
; Spill const_f6_op95_15 to slot 87
    ADD SC, FP, R0
    ADDI SC, SC, 111
    STORE S1, SB, SC
; Spill const_f6_op96_14 to slot 88
    ADD SC, FP, R0
    ADDI SC, SC, 112
    STORE T3, SB, SC
; Spill const_f6_op97_64 to slot 89
    ADD SC, FP, R0
    ADDI SC, SC, 113
    STORE T0, SB, SC
; Spill const_f6_op98_14 to slot 90
    ADD SC, FP, R0
    ADDI SC, SC, 114
    STORE S0, SB, SC
; Spill const_f6_op99_2 to slot 91
    ADD SC, FP, R0
    ADDI SC, SC, 115
    STORE S2, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S2, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE S0, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Arg 1 (scalar) to A1
    ADD A1, T3, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, T0, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
    LI T1, 2
    LI T2, 16
    LI T6, 71
    LI S3, 11
    LI T5, 0
; Spill live registers before call
; Spill const_f6_op100_2 to slot 92
    ADD SC, FP, R0
    ADDI SC, SC, 116
    STORE T1, SB, SC
; Spill const_f6_op101_16 to slot 93
    ADD SC, FP, R0
    ADDI SC, SC, 117
    STORE T2, SB, SC
; Spill const_f6_op102_71 to slot 94
    ADD SC, FP, R0
    ADDI SC, SC, 118
    STORE T6, SB, SC
; Spill const_f6_op103_11 to slot 95
    ADD SC, FP, R0
    ADDI SC, SC, 119
    STORE S3, SB, SC
; Spill const_f6_op104_0 to slot 96
    ADD SC, FP, R0
    ADDI SC, SC, 120
    STORE T5, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T5, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Arg 1 (scalar) to A1
    ADD A1, T2, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, T6, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
    ADD T7, FP, R0
    ADDI T7, T7, 4
    LI T4, 0
    STORE T4, SB, T7
    BEQ R0, R0, L_main_39
; Unconditional branch to L_main_39
L_main_39:
; Recompute alloca t32 at FP+4
    ADD S1, FP, R0
    ADDI S1, S1, 4
    LOAD T3, SB, S1
    LI T0, 10
    SLT T3, T3, T0
    BEQ T3, R0, L_main_42
; Branch to L_main_42 if condition is false
    BEQ R0, R0, L_main_40
; Unconditional branch to L_main_40 (condition was true)
L_main_40:
    ADD S0, FP, R0
    ADDI S0, S0, 5
; Recompute alloca t32 at FP+4
    ADD S2, FP, R0
    ADDI S2, S2, 4
    LOAD T1, SB, S2
    LI T2, 5
    SLT T1, T1, T2
    BEQ T1, R0, L_main_44
; Branch to L_main_44 if condition is false
    BEQ R0, R0, L_main_43
; Unconditional branch to L_main_43 (condition was true)
L_main_43:
    LI T6, 11
; Recompute alloca t35 at FP+5
    ADD S3, FP, R0
    ADDI S3, S3, 5
    STORE T6, SB, S3
    BEQ R0, R0, L_main_45
; Unconditional branch to L_main_45
L_main_44:
    LI T5, 3
; Recompute alloca t35 at FP+5
    ADD T4, FP, R0
    ADDI T4, T4, 5
    STORE T5, SB, T4
    BEQ R0, R0, L_main_45
; Unconditional branch to L_main_45
L_main_45:
; Recompute alloca t32 at FP+4
    ADD T7, FP, R0
    ADDI T7, T7, 4
    LOAD T0, SB, T7
    LI T3, 10
    ADD T3, T3, T0
    LOAD S1, SB, T7
    LI T2, 10
    MOD S1, S1, T2
    LI T1, 48
    ADD T1, T1, S1
; Recompute alloca t35 at FP+5
    ADD S0, FP, R0
    ADDI S0, S0, 5
    LOAD S2, SB, S0
    LI T6, 16
    LI S3, 0
; Spill live registers before call
; Spill t39 to slot 97
    ADD SC, FP, R0
    ADDI SC, SC, 121
    STORE T3, SB, SC
; Spill const_f6_op113_16 to slot 98
    ADD SC, FP, R0
    ADDI SC, SC, 122
    STORE T6, SB, SC
; Spill t42 to slot 99
    ADD SC, FP, R0
    ADDI SC, SC, 123
    STORE T1, SB, SC
; Spill t43 to slot 100
    ADD SC, FP, R0
    ADDI SC, SC, 124
    STORE S2, SB, SC
; Spill const_f6_op114_0 to slot 101
    ADD SC, FP, R0
    ADDI SC, SC, 125
    STORE S3, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Arg 1 (scalar) to A1
    ADD A1, T6, R0
; Arg 2 (scalar) to A2
    ADD A2, T1, R0
; Arg 3 (scalar) to A3
    ADD A3, S2, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_main_41
; Unconditional branch to L_main_41
L_main_41:
; Recompute alloca t32 at FP+4
    ADD T5, FP, R0
    ADDI T5, T5, 4
    LOAD T4, SB, T5
    LI T0, 0
    ADD T4, T4, T0
    LOAD T2, SB, T5
    LI S1, 1
    ADD T2, T2, S1
    STORE T2, SB, T5
    BEQ R0, R0, L_main_39
; Unconditional branch to L_main_39
L_main_42:
    LI T7, 2
    LI S0, 18
    LI T3, 79
    LI T6, 10
    LI T1, 0
; Spill live registers before call
; Spill t45 to slot 102
    ADD SC, FP, R0
    ADDI SC, SC, 126
    STORE T4, SB, SC
; Spill t47 to slot 103
    ADD SC, FP, R0
    ADDI SC, SC, 127
    STORE T2, SB, SC
; Spill const_f6_op117_2 to slot 104
    ADD SC, FP, R0
    ADDI SC, SC, 128
    STORE T7, SB, SC
; Spill const_f6_op118_18 to slot 105
    ADD SC, FP, R0
    ADDI SC, SC, 129
    STORE S0, SB, SC
; Spill const_f6_op119_79 to slot 106
    ADD SC, FP, R0
    ADDI SC, SC, 130
    STORE T3, SB, SC
; Spill const_f6_op120_10 to slot 107
    ADD SC, FP, R0
    ADDI SC, SC, 131
    STORE T6, SB, SC
; Spill const_f6_op121_0 to slot 108
    ADD SC, FP, R0
    ADDI SC, SC, 132
    STORE T1, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T1, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE T6, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Arg 1 (scalar) to A1
    ADD A1, S0, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, T3, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
; Spill live registers before call
; Call function display_flush
    CALL display_flush
    ADD S2, FP, R0
    ADDI S2, S2, 6
    ADD S3, S2, R0
    LI T0, 47
    STORE T0, SB, S3
; Recompute alloca t48 at FP+6
    ADD S1, FP, R0
    ADDI S1, S1, 6
    ADDI T5, S1, 1
    LI T4, 45
    STORE T4, SB, T5
; Recompute alloca t48 at FP+6
    ADD T2, FP, R0
    ADDI T2, T2, 6
    ADDI T7, T2, 2
    LI S0, 92
    STORE S0, SB, T7
; Recompute alloca t48 at FP+6
    ADD T3, FP, R0
    ADDI T3, T3, 6
    ADDI T6, T3, 3
    LI T1, 124
    STORE T1, SB, T6
    ADD S2, FP, R0
    ADDI S2, S2, 8
    ADD T0, S2, R0
    LI S1, 8
    STORE S1, SB, T0
; Recompute alloca t53 at FP+8
    ADD T4, FP, R0
    ADDI T4, T4, 8
    ADDI T2, T4, 1
    LI S0, 9
    STORE S0, SB, T2
; Recompute alloca t53 at FP+8
    ADD T3, FP, R0
    ADDI T3, T3, 8
    ADDI T1, T3, 2
    LI S2, 10
    STORE S2, SB, T1
; Recompute alloca t53 at FP+8
    ADD S1, FP, R0
    ADDI S1, S1, 8
    ADDI T4, S1, 3
    LI S0, 11
    STORE S0, SB, T4
; Recompute alloca t53 at FP+8
    ADD T3, FP, R0
    ADDI T3, T3, 8
    ADDI S2, T3, 4
    LI S1, 12
    STORE S1, SB, S2
; Recompute alloca t53 at FP+8
    ADD S0, FP, R0
    ADDI S0, S0, 8
    ADDI T3, S0, 5
    LI S1, 13
    STORE S1, SB, T3
; Recompute alloca t53 at FP+8
    ADD S0, FP, R0
    ADDI S0, S0, 8
    ADDI S1, S0, 6
    LI S0, 2
    STORE S0, SB, S1
; Recompute alloca t53 at FP+8
    ADD S0, FP, R0
    ADDI S0, S0, 8
    ADDI S3, S0, 7
; Spill t49 to slot 109
    ADD SC, FP, R0
    ADDI SC, SC, 133
    STORE S3, SB, SC
    LI S0, 14
    STORE S0, SB, S3
    ADD S0, FP, R0
    ADDI S0, S0, 10
; Spill t50 to slot 110
    ADD SC, FP, R0
    ADDI SC, SC, 134
    STORE T5, SB, SC
    LI T5, 0
    STORE T5, SB, S0
    BEQ R0, R0, L_main_46
; Unconditional branch to L_main_46
L_main_46:
; Recompute alloca t62 at FP+10
    ADD T5, FP, R0
    ADDI T5, T5, 10
    LOAD S0, SB, T5
; Spill t51 to slot 111
    ADD SC, FP, R0
    ADDI SC, SC, 135
    STORE T7, SB, SC
    LI T7, 32
    SLT S0, S0, T7
    BEQ S0, R0, L_main_49
; Branch to L_main_49 if condition is false
    BEQ R0, R0, L_main_47
; Unconditional branch to L_main_47 (condition was true)
L_main_47:
    ADD T7, FP, R0
    ADDI T7, T7, 11
; Recompute alloca t62 at FP+10
    ADD S0, FP, R0
    ADDI S0, S0, 10
    LOAD T5, SB, S0
; Spill t52 to slot 112
    ADD SC, FP, R0
    ADDI SC, SC, 136
    STORE T6, SB, SC
    LI T6, 8
    MOD T5, T5, T6
; Recompute alloca t53 at FP+8
    ADD T6, FP, R0
    ADDI T6, T6, 8
; Spill t54 to slot 113
    ADD SC, FP, R0
    ADDI SC, SC, 137
    STORE T0, SB, SC
; Spill t55 to slot 114
    ADD SC, FP, R0
    ADDI SC, SC, 138
    STORE T2, SB, SC
    ADD T2, T5, R0
    ADD T0, T6, T2
; Runtime bank overflow calculation for dynamic GEP
; Spill t56 to slot 115
    ADD SC, FP, R0
    ADDI SC, SC, 139
    STORE T1, SB, SC
; Spill t57 to slot 116
    ADD SC, FP, R0
    ADDI SC, SC, 140
    STORE T4, SB, SC
    LI T4, 4096
    DIV T1, T0, T4
; Spill t58 to slot 117
    ADD SC, FP, R0
    ADDI SC, SC, 141
    STORE S2, SB, SC
    MOD S2, T0, T4
; Spill t59 to slot 118
    ADD SC, FP, R0
    ADDI SC, SC, 142
    STORE T3, SB, SC
    ADD T3, SB, T1
    ADD T0, S2, R0
    LOAD T2, SB, T0
    STORE T2, SB, T7
    LOAD T1, SB, S0
    LI T4, 4
    MOD T1, T1, T4
; Recompute alloca t48 at FP+6
    ADD S2, FP, R0
    ADDI S2, S2, 6
    ADD T4, T1, R0
    ADD T6, S2, T4
; Runtime bank overflow calculation for dynamic GEP
; Spill t60 to slot 119
    ADD SC, FP, R0
    ADDI SC, SC, 143
    STORE S1, SB, SC
; Spill t61 to slot 120
    ADD SC, FP, R0
    ADDI SC, SC, 144
    STORE S3, SB, SC
    LI S3, 4096
    DIV S1, T6, S3
; Spill t67 to slot 121
    ADD SC, FP, R0
    ADDI SC, SC, 145
    STORE T5, SB, SC
    MOD T5, T6, S3
; Spill gep_new_bank_f6_op141_t68 to slot 122
    ADD SC, FP, R0
    ADDI SC, SC, 146
    STORE T3, SB, SC
    ADD T3, SB, S1
    ADD T6, T5, R0
    LOAD T4, SB, T6
    LOAD S1, SB, T7
    LI S3, 13
    LI T5, 18
    LI S2, 0
; Spill live registers before call
; Spill t68 to slot 123
    ADD SC, FP, R0
    ADDI SC, SC, 147
    STORE T0, SB, SC
; Spill t69 to slot 124
    ADD SC, FP, R0
    ADDI SC, SC, 148
    STORE T2, SB, SC
; Spill t71 to slot 125
    ADD SC, FP, R0
    ADDI SC, SC, 149
    STORE T1, SB, SC
; Spill gep_new_bank_f6_op148_t72 to slot 126
    ADD SC, FP, R0
    ADDI SC, SC, 150
    STORE T3, SB, SC
; Spill t72 to slot 127
    ADD SC, FP, R0
    ADDI SC, SC, 151
    STORE T6, SB, SC
; Spill const_f6_op151_13 to slot 128
    ADD SC, FP, R0
    ADDI SC, SC, 152
    STORE S3, SB, SC
; Spill const_f6_op152_18 to slot 129
    ADD SC, FP, R0
    ADDI SC, SC, 153
    STORE T5, SB, SC
; Spill t73 to slot 130
    ADD SC, FP, R0
    ADDI SC, SC, 154
    STORE T4, SB, SC
; Spill t74 to slot 131
    ADD SC, FP, R0
    ADDI SC, SC, 155
    STORE S1, SB, SC
; Spill const_f6_op153_0 to slot 132
    ADD SC, FP, R0
    ADDI SC, SC, 156
    STORE S2, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S2, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Arg 1 (scalar) to A1
    ADD A1, T5, R0
; Arg 2 (scalar) to A2
    ADD A2, T4, R0
; Arg 3 (scalar) to A3
    ADD A3, S1, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
; Recompute alloca t62 at FP+10
    ADD T0, FP, R0
    ADDI T0, T0, 10
    LOAD T2, SB, T0
    LI S0, 1
    ADD T2, T2, S0
    LI T1, 4
    MOD T2, T2, T1
; Recompute alloca t48 at FP+6
    ADD T3, FP, R0
    ADDI T3, T3, 6
    ADD T7, T2, R0
    ADD T6, T3, T7
; Runtime bank overflow calculation for dynamic GEP
    LI T5, 4096
    DIV S3, T6, T5
    MOD T4, T6, T5
    ADD S1, SB, S3
    ADD T6, T4, R0
    LOAD S2, SB, T6
    LOAD S0, SB, T0
    LI T1, 1
    ADD S0, S0, T1
    LI T7, 8
    MOD S0, S0, T7
; Recompute alloca t53 at FP+8
    ADD S3, FP, R0
    ADDI S3, S3, 8
    ADD T4, S0, R0
    ADD T5, S3, T4
; Runtime bank overflow calculation for dynamic GEP
    LI T1, 4096
    DIV T3, T5, T1
    MOD T7, T5, T1
; Spill t77 to slot 133
    ADD SC, FP, R0
    ADDI SC, SC, 157
    STORE T2, SB, SC
    ADD T2, SB, T3
    ADD T5, T7, R0
    LOAD T4, SB, T5
    LI T3, 15
    LI T1, 18
    LI T7, 0
; Spill live registers before call
; Spill gep_new_bank_f6_op159_t78 to slot 134
    ADD SC, FP, R0
    ADDI SC, SC, 158
    STORE S1, SB, SC
; Spill t78 to slot 135
    ADD SC, FP, R0
    ADDI SC, SC, 159
    STORE T6, SB, SC
; Spill t82 to slot 136
    ADD SC, FP, R0
    ADDI SC, SC, 160
    STORE S0, SB, SC
; Spill gep_new_bank_f6_op166_t83 to slot 137
    ADD SC, FP, R0
    ADDI SC, SC, 161
    STORE T2, SB, SC
; Spill t83 to slot 138
    ADD SC, FP, R0
    ADDI SC, SC, 162
    STORE T5, SB, SC
; Spill const_f6_op168_15 to slot 139
    ADD SC, FP, R0
    ADDI SC, SC, 163
    STORE T3, SB, SC
; Spill const_f6_op169_18 to slot 140
    ADD SC, FP, R0
    ADDI SC, SC, 164
    STORE T1, SB, SC
; Spill t79 to slot 141
    ADD SC, FP, R0
    ADDI SC, SC, 165
    STORE S2, SB, SC
; Spill t84 to slot 142
    ADD SC, FP, R0
    ADDI SC, SC, 166
    STORE T4, SB, SC
; Spill const_f6_op170_0 to slot 143
    ADD SC, FP, R0
    ADDI SC, SC, 167
    STORE T7, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T7, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Arg 1 (scalar) to A1
    ADD A1, T1, R0
; Arg 2 (scalar) to A2
    ADD A2, S2, R0
; Arg 3 (scalar) to A3
    ADD A3, T4, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
; Recompute alloca t62 at FP+10
    ADD S3, FP, R0
    ADDI S3, S3, 10
    LOAD S1, SB, S3
    LI T6, 2
    ADD S1, S1, T6
    LI T0, 4
    MOD S1, S1, T0
; Recompute alloca t48 at FP+6
    ADD S0, FP, R0
    ADDI S0, S0, 6
    ADD T5, S1, R0
    ADD T2, S0, T5
; Runtime bank overflow calculation for dynamic GEP
    LI T1, 4096
    DIV T3, T2, T1
    MOD S2, T2, T1
    ADD T4, SB, T3
    ADD T2, S2, R0
    LOAD T7, SB, T2
    LOAD T6, SB, S3
    LI T0, 2
    ADD T6, T6, T0
    LI T5, 8
    MOD T6, T6, T5
; Recompute alloca t53 at FP+8
    ADD T3, FP, R0
    ADDI T3, T3, 8
    ADD S2, T6, R0
    ADD T1, T3, S2
; Runtime bank overflow calculation for dynamic GEP
    LI T0, 4096
    DIV S0, T1, T0
    MOD T5, T1, T0
; Spill t87 to slot 144
    ADD SC, FP, R0
    ADDI SC, SC, 168
    STORE S1, SB, SC
    ADD S1, SB, S0
    ADD T1, T5, R0
    LOAD S2, SB, T1
    LI S0, 17
    LI T0, 18
    LI T5, 0
; Spill live registers before call
; Spill gep_new_bank_f6_op176_t88 to slot 145
    ADD SC, FP, R0
    ADDI SC, SC, 169
    STORE T4, SB, SC
; Spill t88 to slot 146
    ADD SC, FP, R0
    ADDI SC, SC, 170
    STORE T2, SB, SC
; Spill t92 to slot 147
    ADD SC, FP, R0
    ADDI SC, SC, 171
    STORE T6, SB, SC
; Spill gep_new_bank_f6_op183_t93 to slot 148
    ADD SC, FP, R0
    ADDI SC, SC, 172
    STORE S1, SB, SC
; Spill t93 to slot 149
    ADD SC, FP, R0
    ADDI SC, SC, 173
    STORE T1, SB, SC
; Spill const_f6_op185_17 to slot 150
    ADD SC, FP, R0
    ADDI SC, SC, 174
    STORE S0, SB, SC
; Spill const_f6_op186_18 to slot 151
    ADD SC, FP, R0
    ADDI SC, SC, 175
    STORE T0, SB, SC
; Spill t89 to slot 152
    ADD SC, FP, R0
    ADDI SC, SC, 176
    STORE T7, SB, SC
; Spill t94 to slot 153
    ADD SC, FP, R0
    ADDI SC, SC, 177
    STORE S2, SB, SC
; Spill const_f6_op187_0 to slot 154
    ADD SC, FP, R0
    ADDI SC, SC, 178
    STORE T5, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T5, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Arg 1 (scalar) to A1
    ADD A1, T0, R0
; Arg 2 (scalar) to A2
    ADD A2, T7, R0
; Arg 3 (scalar) to A3
    ADD A3, S2, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    ADD T3, FP, R0
    ADDI T3, T3, 12
    LI T4, 0
    STORE T4, SB, T3
    BEQ R0, R0, L_main_50
; Unconditional branch to L_main_50
L_main_50:
; Recompute alloca t95 at FP+12
    ADD T2, FP, R0
    ADDI T2, T2, 12
    LOAD S3, SB, T2
    LI T6, 10
    SLT S3, S3, T6
    BEQ S3, R0, L_main_53
; Branch to L_main_53 if condition is false
    BEQ R0, R0, L_main_51
; Unconditional branch to L_main_51 (condition was true)
L_main_51:
    ADD S1, FP, R0
    ADDI S1, S1, 13
; Recompute alloca t62 at FP+10
    ADD T1, FP, R0
    ADDI T1, T1, 10
    LOAD S0, SB, T1
; Recompute alloca t95 at FP+12
    ADD T0, FP, R0
    ADDI T0, T0, 12
    LOAD T7, SB, T0
    ADD S0, S0, T7
    LI S2, 8
    MOD S0, S0, S2
; Recompute alloca t53 at FP+8
    ADD T5, FP, R0
    ADDI T5, T5, 8
    ADD T3, S0, R0
    ADD T4, T5, T3
; Runtime bank overflow calculation for dynamic GEP
    LI S3, 4096
    DIV T6, T4, S3
    MOD T2, T4, S3
    ADD T7, SB, T6
    ADD T4, T2, R0
    LOAD S2, SB, T4
    STORE S2, SB, S1
    LOAD T3, SB, T0
    LI T6, 25
    ADD T6, T6, T3
    LOAD S3, SB, S1
    LI T2, 18
    LI T5, 32
    LI T3, 0
; Spill live registers before call
; Spill t102 to slot 155
    ADD SC, FP, R0
    ADDI SC, SC, 179
    STORE S0, SB, SC
; Spill gep_new_bank_f6_op196_t103 to slot 156
    ADD SC, FP, R0
    ADDI SC, SC, 180
    STORE T7, SB, SC
; Spill t103 to slot 157
    ADD SC, FP, R0
    ADDI SC, SC, 181
    STORE T4, SB, SC
; Spill t104 to slot 158
    ADD SC, FP, R0
    ADDI SC, SC, 182
    STORE S2, SB, SC
; Spill t106 to slot 159
    ADD SC, FP, R0
    ADDI SC, SC, 183
    STORE T6, SB, SC
; Spill const_f6_op200_18 to slot 160
    ADD SC, FP, R0
    ADDI SC, SC, 184
    STORE T2, SB, SC
; Spill const_f6_op201_32 to slot 161
    ADD SC, FP, R0
    ADDI SC, SC, 185
    STORE T5, SB, SC
; Spill const_f6_op202_0 to slot 162
    ADD SC, FP, R0
    ADDI SC, SC, 186
    STORE T3, SB, SC
; Spill t107 to slot 163
    ADD SC, FP, R0
    ADDI SC, SC, 187
    STORE S3, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Arg 1 (scalar) to A1
    ADD A1, T2, R0
; Arg 2 (scalar) to A2
    ADD A2, T5, R0
; Arg 3 (scalar) to A3
    ADD A3, T3, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_main_52
; Unconditional branch to L_main_52
L_main_52:
; Recompute alloca t95 at FP+12
    ADD T1, FP, R0
    ADDI T1, T1, 12
    LOAD S0, SB, T1
    LI T7, 0
    ADD S0, S0, T7
    LOAD T4, SB, T1
    LI S2, 1
    ADD T4, T4, S2
    STORE T4, SB, T1
    BEQ R0, R0, L_main_50
; Unconditional branch to L_main_50
L_main_53:
    LI T0, 2
    LI S1, 20
    LI T6, 90
    LI T2, 6
    LI T5, 0
; Spill live registers before call
; Spill t109 to slot 164
    ADD SC, FP, R0
    ADDI SC, SC, 188
    STORE S0, SB, SC
; Spill t111 to slot 165
    ADD SC, FP, R0
    ADDI SC, SC, 189
    STORE T4, SB, SC
; Spill const_f6_op205_2 to slot 166
    ADD SC, FP, R0
    ADDI SC, SC, 190
    STORE T0, SB, SC
; Spill const_f6_op206_20 to slot 167
    ADD SC, FP, R0
    ADDI SC, SC, 191
    STORE S1, SB, SC
; Spill const_f6_op207_90 to slot 168
    ADD SC, FP, R0
    ADDI SC, SC, 192
    STORE T6, SB, SC
; Spill const_f6_op208_6 to slot 169
    ADD SC, FP, R0
    ADDI SC, SC, 193
    STORE T2, SB, SC
; Spill const_f6_op209_0 to slot 170
    ADD SC, FP, R0
    ADDI SC, SC, 194
    STORE T5, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T5, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE T2, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Arg 1 (scalar) to A1
    ADD A1, S1, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, T6, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
; Recompute alloca t62 at FP+10
    ADD T3, FP, R0
    ADDI T3, T3, 10
    LOAD S3, SB, T3
    LI T7, 10
    DIV S3, S3, T7
    LI S2, 48
    ADD S2, S2, S3
    LI T1, 9
    LI S0, 20
    LI T4, 7
    LI T0, 5
; Spill live registers before call
; Spill const_f6_op211_9 to slot 171
    ADD SC, FP, R0
    ADDI SC, SC, 195
    STORE T1, SB, SC
; Spill const_f6_op212_20 to slot 172
    ADD SC, FP, R0
    ADDI SC, SC, 196
    STORE S0, SB, SC
; Spill t114 to slot 173
    ADD SC, FP, R0
    ADDI SC, SC, 197
    STORE S2, SB, SC
; Spill const_f6_op213_7 to slot 174
    ADD SC, FP, R0
    ADDI SC, SC, 198
    STORE T4, SB, SC
; Spill const_f6_op214_5 to slot 175
    ADD SC, FP, R0
    ADDI SC, SC, 199
    STORE T0, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T0, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Arg 1 (scalar) to A1
    ADD A1, S0, R0
; Arg 2 (scalar) to A2
    ADD A2, S2, R0
; Arg 3 (scalar) to A3
    ADD A3, T4, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
; Recompute alloca t62 at FP+10
    ADD S1, FP, R0
    ADDI S1, S1, 10
    LOAD T6, SB, S1
    LI T2, 10
    MOD T6, T6, T2
    LI T5, 48
    ADD T5, T5, T6
    LI T7, 10
    LI S3, 20
    LI T3, 7
    LI T1, 5
; Spill live registers before call
; Spill const_f6_op216_10 to slot 176
    ADD SC, FP, R0
    ADDI SC, SC, 200
    STORE T7, SB, SC
; Spill const_f6_op217_20 to slot 177
    ADD SC, FP, R0
    ADDI SC, SC, 201
    STORE S3, SB, SC
; Spill t117 to slot 178
    ADD SC, FP, R0
    ADDI SC, SC, 202
    STORE T5, SB, SC
; Spill const_f6_op218_7 to slot 179
    ADD SC, FP, R0
    ADDI SC, SC, 203
    STORE T3, SB, SC
; Spill const_f6_op219_5 to slot 180
    ADD SC, FP, R0
    ADDI SC, SC, 204
    STORE T1, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T1, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Arg 1 (scalar) to A1
    ADD A1, S3, R0
; Arg 2 (scalar) to A2
    ADD A2, T5, R0
; Arg 3 (scalar) to A3
    ADD A3, T3, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    ADD S0, FP, R0
    ADDI S0, S0, 14
; Recompute alloca t62 at FP+10
    ADD S2, FP, R0
    ADDI S2, S2, 10
    LOAD T4, SB, S2
    LI T0, 20
    MUL T4, T4, T0
    LI T2, 32
    DIV T4, T4, T2
    STORE T4, SB, S0
    ADD T6, FP, R0
    ADDI T6, T6, 15
    LI S1, 0
    STORE S1, SB, T6
    BEQ R0, R0, L_main_54
; Unconditional branch to L_main_54
L_main_54:
; Recompute alloca t122 at FP+15
    ADD T7, FP, R0
    ADDI T7, T7, 15
    LOAD S3, SB, T7
    LI T5, 20
    SLT S3, S3, T5
    BEQ S3, R0, L_main_57
; Branch to L_main_57 if condition is false
    BEQ R0, R0, L_main_55
; Unconditional branch to L_main_55 (condition was true)
L_main_55:
; Recompute alloca t122 at FP+15
    ADD T3, FP, R0
    ADDI T3, T3, 15
    LOAD T1, SB, T3
; Recompute alloca t118 at FP+14
    ADD T0, FP, R0
    ADDI T0, T0, 14
    LOAD T2, SB, T0
    SLT T1, T1, T2
    BEQ T1, R0, L_main_59
; Branch to L_main_59 if condition is false
    BEQ R0, R0, L_main_58
; Unconditional branch to L_main_58 (condition was true)
L_main_58:
; Recompute alloca t122 at FP+15
    ADD S1, FP, R0
    ADDI S1, S1, 15
    LOAD T6, SB, S1
    LI S0, 15
    ADD S0, S0, T6
    LI S2, 20
    LI T5, 61
    LI S3, 11
    LI T7, 3
; Spill live registers before call
; Spill t121 to slot 181
    ADD SC, FP, R0
    ADDI SC, SC, 205
    STORE T4, SB, SC
; Spill t129 to slot 182
    ADD SC, FP, R0
    ADDI SC, SC, 206
    STORE S0, SB, SC
; Spill const_f6_op226_20 to slot 183
    ADD SC, FP, R0
    ADDI SC, SC, 207
    STORE S2, SB, SC
; Spill const_f6_op227_61 to slot 184
    ADD SC, FP, R0
    ADDI SC, SC, 208
    STORE T5, SB, SC
; Spill const_f6_op228_11 to slot 185
    ADD SC, FP, R0
    ADDI SC, SC, 209
    STORE S3, SB, SC
; Spill const_f6_op229_3 to slot 186
    ADD SC, FP, R0
    ADDI SC, SC, 210
    STORE T7, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T7, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Arg 1 (scalar) to A1
    ADD A1, S2, R0
; Arg 2 (scalar) to A2
    ADD A2, T5, R0
; Arg 3 (scalar) to A3
    ADD A3, S3, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_main_60
; Unconditional branch to L_main_60
L_main_59:
; Recompute alloca t122 at FP+15
    ADD T2, FP, R0
    ADDI T2, T2, 15
    LOAD T1, SB, T2
    LI T0, 15
    ADD T0, T0, T1
    LI T3, 20
    LI T6, 45
    LI T4, 5
    LI S1, 0
; Spill live registers before call
; Spill t131 to slot 187
    ADD SC, FP, R0
    ADDI SC, SC, 211
    STORE T0, SB, SC
; Spill const_f6_op231_20 to slot 188
    ADD SC, FP, R0
    ADDI SC, SC, 212
    STORE T3, SB, SC
; Spill const_f6_op232_45 to slot 189
    ADD SC, FP, R0
    ADDI SC, SC, 213
    STORE T6, SB, SC
; Spill const_f6_op233_5 to slot 190
    ADD SC, FP, R0
    ADDI SC, SC, 214
    STORE T4, SB, SC
; Spill const_f6_op234_0 to slot 191
    ADD SC, FP, R0
    ADDI SC, SC, 215
    STORE S1, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S1, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Arg 1 (scalar) to A1
    ADD A1, T3, R0
; Arg 2 (scalar) to A2
    ADD A2, T6, R0
; Arg 3 (scalar) to A3
    ADD A3, T4, R0
; Pushed 1 words to stack
; Call function text40_putchar_color
    CALL text40_putchar_color
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_main_60
; Unconditional branch to L_main_60
L_main_60:
    BEQ R0, R0, L_main_56
; Unconditional branch to L_main_56
L_main_56:
; Recompute alloca t122 at FP+15
    ADD S0, FP, R0
    ADDI S0, S0, 15
    LOAD S2, SB, S0
    LI T5, 0
    ADD S2, S2, T5
    LOAD S3, SB, S0
    LI T7, 1
    ADD S3, S3, T7
    STORE S3, SB, S0
    BEQ R0, R0, L_main_54
; Unconditional branch to L_main_54
L_main_57:
; Spill live registers before call
; Spill t133 to slot 192
    ADD SC, FP, R0
    ADDI SC, SC, 216
    STORE S2, SB, SC
; Spill t135 to slot 193
    ADD SC, FP, R0
    ADDI SC, SC, 217
    STORE S3, SB, SC
; Call function display_flush
    CALL display_flush
    LI T1, 8000
; Spill live registers before call
; Spill const_f6_op237_8000 to slot 194
    ADD SC, FP, R0
    ADDI SC, SC, 218
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function delay
    CALL delay
    BEQ R0, R0, L_main_48
; Unconditional branch to L_main_48
L_main_48:
; Recompute alloca t62 at FP+10
    ADD T2, FP, R0
    ADDI T2, T2, 10
    LOAD T0, SB, T2
    LI T3, 0
    ADD T0, T0, T3
    LOAD T6, SB, T2
    LI T4, 1
    ADD T6, T6, T4
    STORE T6, SB, T2
    BEQ R0, R0, L_main_46
; Unconditional branch to L_main_46
L_main_49:
    LI S1, 8
    LI T5, 22
    LI T7, 97
    LI S0, 7
    LI S2, 11
; Spill live registers before call
; Spill t137 to slot 195
    ADD SC, FP, R0
    ADDI SC, SC, 219
    STORE T0, SB, SC
; Spill t139 to slot 196
    ADD SC, FP, R0
    ADDI SC, SC, 220
    STORE T6, SB, SC
; Spill const_f6_op240_8 to slot 197
    ADD SC, FP, R0
    ADDI SC, SC, 221
    STORE S1, SB, SC
; Spill const_f6_op241_22 to slot 198
    ADD SC, FP, R0
    ADDI SC, SC, 222
    STORE T5, SB, SC
; Spill const_f6_op242_97 to slot 199
    ADD SC, FP, R0
    ADDI SC, SC, 223
    STORE T7, SB, SC
; Spill const_f6_op243_7 to slot 200
    ADD SC, FP, R0
    ADDI SC, SC, 224
    STORE S0, SB, SC
; Spill const_f6_op244_11 to slot 201
    ADD SC, FP, R0
    ADDI SC, SC, 225
    STORE S2, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE S2, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE S0, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Arg 1 (scalar) to A1
    ADD A1, T5, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, T7, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
    LI S3, 16
    LI T1, 22
    LI T3, 106
    LI T4, 0
    LI T2, 10
; Spill live registers before call
; Spill const_f6_op245_16 to slot 202
    ADD SC, FP, R0
    ADDI SC, SC, 226
    STORE S3, SB, SC
; Spill const_f6_op246_22 to slot 203
    ADD SC, FP, R0
    ADDI SC, SC, 227
    STORE T1, SB, SC
; Spill const_f6_op247_106 to slot 204
    ADD SC, FP, R0
    ADDI SC, SC, 228
    STORE T3, SB, SC
; Spill const_f6_op248_0 to slot 205
    ADD SC, FP, R0
    ADDI SC, SC, 229
    STORE T4, SB, SC
; Spill const_f6_op249_10 to slot 206
    ADD SC, FP, R0
    ADDI SC, SC, 230
    STORE T2, SB, SC
; Pushing 2 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T2, SB, SP
    ADDI SP, SP, 1
; Push arg 3 (scalar) to stack
    STORE T4, SB, SP
    ADDI SP, SP, 1
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Arg 1 (scalar) to A1
    ADD A1, T1, R0
; Arg 2 (fat ptr) to A2,A3
    ADD A2, T3, R0
    ADD A3, GP, R0
; Pushed 2 words to stack
; Call function text40_puts_color
    CALL text40_puts_color
; Clean up 2 words from stack
    ADDI SP, SP, -2
; Spill live registers before call
; Call function display_flush
    CALL display_flush
    LI T0, -15536
; Spill live registers before call
; Spill const_f6_op250_50000 to slot 207
    ADD SC, FP, R0
    ADDI SC, SC, 231
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function delay
    CALL delay
    LI T6, 0
; Spill live registers before call
; Spill const_f6_op251_0 to slot 208
    ADD SC, FP, R0
    ADDI SC, SC, 232
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function display_set_mode
    CALL display_set_mode
    LI S1, 118
; Spill live registers before call
; Spill const_f6_op252_118 to slot 209
    ADD SC, FP, R0
    ADDI SC, SC, 233
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S1, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
; Scalar return value for t140
    LI RV0, 0
; Jump to epilogue
    BEQ R0, R0, L_main_99999
L_main_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
