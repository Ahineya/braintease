; Generated by Ripple C99 Compiler (rcc)

_init_globals:
    RET
main:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 13 slots for locals
    ADDI SP, SP, 13
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
    ADD S3, FP, R0
    LI S2, 8
    STORE S2, SB, S3
    ADD S1, FP, R0
    ADDI S1, S1, 1
    LI S0, 4
    STORE S0, SB, S1
    ADD T7, FP, R0
    ADDI T7, T7, 2
    LOAD T6, SB, S3
    LOAD T5, SB, S1
    DIV T6, T6, T5
    STORE T6, SB, T7
    LOAD T4, SB, T7
    LI T3, 48
    ADD T3, T3, T4
; Spill live registers before call
; Spill t5 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE T6, SB, SC
; Spill t7 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
    LI T2, 10
; Spill live registers before call
; Spill const_f0_op5_10 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    ADD T1, FP, R0
    ADDI T1, T1, 3
    LI T0, 0
    STORE T0, SB, T1
    BEQ R0, R0, L_main_1
; Unconditional branch to L_main_1
L_main_1:
; Recompute alloca t8 at FP+3
    ADD S2, FP, R0
    ADDI S2, S2, 3
    LOAD S0, SB, S2
    LI T5, 32
    SLT S0, S0, T5
    BEQ S0, R0, L_main_3
; Branch to L_main_3 if condition is false
    BEQ R0, R0, L_main_2
; Unconditional branch to L_main_2 (condition was true)
L_main_2:
    ADD T4, FP, R0
    ADDI T4, T4, 4
; Recompute alloca t8 at FP+3
    ADD S3, FP, R0
    ADDI S3, S3, 3
    LOAD S1, SB, S3
    LI T6, 4
    DIV S1, S1, T6
    STORE S1, SB, T4
    LOAD T7, SB, T4
    LI T3, 48
    ADD T3, T3, T7
; Spill live registers before call
; Spill t13 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S1, SB, SC
; Spill t15 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
; Recompute alloca t8 at FP+3
    ADD T2, FP, R0
    ADDI T2, T2, 3
    LOAD T0, SB, T2
    LI T1, 1
    ADD T0, T0, T1
    LI T5, 4
    MOD T0, T0, T5
    LI S0, 0
    XOR S2, T0, S0
    LI T6, 1
    SLTU T0, S2, T6
    BEQ T0, R0, L_main_6
; Branch to L_main_6 if condition is false
    BEQ R0, R0, L_main_4
; Unconditional branch to L_main_4 (condition was true)
L_main_4:
    LI T7, 32
; Spill live registers before call
; Spill const_f0_op13_32 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_6
; Unconditional branch to L_main_6
L_main_6:
; Recompute alloca t8 at FP+3
    ADD S3, FP, R0
    ADDI S3, S3, 3
    LOAD S1, SB, S3
    LI T4, 0
    ADD S1, S1, T4
    LOAD T3, SB, S3
    LI T1, 1
    ADD T3, T3, T1
    STORE T3, SB, S3
    BEQ R0, R0, L_main_1
; Unconditional branch to L_main_1
L_main_3:
    LI T5, 10
; Spill live registers before call
; Spill t21 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE S1, SB, SC
; Spill t23 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T3, SB, SC
; Spill const_f0_op16_10 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function putchar
    CALL putchar
    LI S2, 10
    LI T6, 5
    DIV S2, S2, T6
    LI S0, 48
    ADD S0, S0, S2
; Spill live registers before call
; Spill t25 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Call function putchar
    CALL putchar
    LI T0, 32
; Spill live registers before call
; Spill const_f0_op17_32 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function putchar
    CALL putchar
    LI T2, 15
    LI T7, 3
    DIV T2, T2, T7
    LI T4, 48
    ADD T4, T4, T2
; Spill live registers before call
; Spill t27 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Call function putchar
    CALL putchar
    LI T1, 32
; Spill live registers before call
; Spill const_f0_op18_32 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
    LI S3, 20
    LI S1, 4
    DIV S3, S3, S1
    LI T3, 48
    ADD T3, T3, S3
; Spill live registers before call
; Spill t29 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
    LI T5, 10
; Spill live registers before call
; Spill const_f0_op19_10 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function putchar
    CALL putchar
    LI RV0, 0
; Jump to epilogue
    BEQ R0, R0, L_main_99999
L_main_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
