; Generated by Ripple C99 Compiler (rcc)

_init_globals:
    RET
main:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 16 slots for locals
    ADDI SP, SP, 16
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
    ADD S3, FP, R0
    ADD S2, S3, R0
; GEP: Setting bank info for t1 to Stack
    LI S1, 10
    STORE S1, SB, S2
; Recompute alloca t0 at FP+0
    ADD S0, FP, R0
    ADDI T7, S0, 1
; GEP: Setting bank info for t2 to Stack
    LI T6, 20
    STORE T6, SB, T7
; Recompute alloca t0 at FP+0
    ADD T5, FP, R0
    ADDI T4, T5, 2
; GEP: Setting bank info for t3 to Stack
    LI T3, 30
    STORE T3, SB, T4
; Recompute alloca t0 at FP+0
    ADD T2, FP, R0
    ADDI T1, T2, 3
; GEP: Setting bank info for t4 to Stack
    LI T0, 40
    STORE T0, SB, T1
; Recompute alloca t0 at FP+0
    ADD S3, FP, R0
    ADDI S1, S3, 4
; GEP: Setting bank info for t5 to Stack
    LI S0, 50
    STORE S0, SB, S1
    ADD T6, FP, R0
    ADDI T6, T6, 5
; Recompute alloca t0 at FP+0
    ADD T5, FP, R0
    ADD T3, SB, R0
    STORE T5, SB, T6
    ADDI T2, T6, 1
    STORE T3, SB, T2
    ADD T0, FP, R0
    ADDI T0, T0, 7
; Load instruction: t8 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op7_t8 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S3, SB, T6
    ADDI S0, T6, 1
    LOAD T2, SB, S0
    ADDI T3, S3, 1
; GEP: Setting bank info for t9 to Stack
    ADD T5, SB, R0
    STORE T3, SB, T6
    ADDI S0, T6, 1
    STORE T5, SB, S0
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op12_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, S3
    STORE S0, SB, T0
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op13_t11 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, T0
    LI T3, 10
    DIV T5, T5, T3
    LI T3, 48
    ADD T3, T3, T5
; Spill live registers before call
; Spill t1 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S2, SB, SC
; Spill t2 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T7, SB, SC
; Spill t3 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T4, SB, SC
; Spill t4 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T1, SB, SC
; Spill t5 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE S1, SB, SC
; Spill load_f0_op9_t8_bank_val to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T2, SB, SC
; Spill t9 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE S3, SB, SC
; Spill t10 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S0, SB, SC
; Spill t13 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
; Load instruction: t14 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op14_t14 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+7
    ADD T5, FP, R0
    ADDI T5, T5, 7
    LOAD S2, SB, T5
    LI T7, 10
    MOD S2, S2, T7
    LI T4, 48
    ADD T4, T4, S2
; Spill live registers before call
; Spill t16 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Call function putchar
    CALL putchar
    LI T1, 10
; Spill live registers before call
; Spill const_f0_op15_10 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
    LI RV0, 0
; Jump to epilogue
    BEQ R0, R0, L_main_99999
L_main_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
