; Generated by Ripple C99 Compiler (rcc)

_init_globals:
    RET
add:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 10 slots for locals
    ADDI SP, SP, 10
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADD S0, FP, R0
    ADDI S0, S0, 1
    STORE S2, SB, S0
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op2_t4 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T7, SB, S1
; Load instruction: t5 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op3_t5 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T6, SB, S0
    ADD T7, T7, T6
    MOVE RV0, T7
; Jump to epilogue
    BEQ R0, R0, L_add_99999
L_add_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
main:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 11 slots for locals
    ADDI SP, SP, 11
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
L_main_1:
    ADD S3, FP, R0
    LI S2, 5
    STORE S2, SB, S3
    ADD S1, FP, R0
    ADDI S1, S1, 1
    LI S0, 10
    STORE S0, SB, S1
    ADD T7, FP, R0
    ADDI T7, T7, 2
; Load instruction: t3 = load FatPtr(FatPointer { addr: Temp(0), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(0), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op2_t3 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T6, SB, S3
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op3_t4 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, S1
; Spill live registers before call
; Spill t3 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 11
    STORE T6, SB, SC
; Spill t4 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE T5, SB, SC
; Setting up 2 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Arg 1 (scalar) to A1
    ADD A1, T5, R0
; Call function add
    CALL add
; Scalar return value for t5
; Recompute alloca t2 at FP+2
    ADD T4, FP, R0
    ADDI T4, T4, 2
    STORE RV0, SB, T4
; Load instruction: t6 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op4_t6 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T3, SB, T4
    LI T2, 15
    XOR T1, T3, T2
    LI T0, 1
    SLTU T3, T1, T0
    BEQ T3, R0, L_main_3
; Branch to L_main_3 if condition is false
    BEQ R0, R0, L_main_2
; Unconditional branch to L_main_2 (condition was true)
; Invalidated 1 alloca bindings
L_main_2:
    LI S2, 89
; Spill live registers before call
; Spill t5 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE RV0, SB, SC
; Spill const_f2_op7_89 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_4
; Unconditional branch to L_main_4
L_main_3:
    LI S0, 78
; Spill live registers before call
; Spill const_f2_op8_78 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_4
; Unconditional branch to L_main_4
L_main_4:
    LI T7, 10
; Spill live registers before call
; Spill const_f2_op9_10 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
; Load instruction: t8 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op10_t8 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+2
    ADD S3, FP, R0
    ADDI S3, S3, 2
    LOAD S1, SB, S3
    MOVE RV0, S1
; Jump to epilogue
    BEQ R0, R0, L_main_99999
L_main_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
