; Generated by Ripple C99 Compiler (rcc)

_init_globals:
; Global variable: global_x at address 0
    LI T0, 10
    LI T1, 0
    STORE T0, GP, T1
    RET
main:
; === Function Prologue ===
; Initialize SB as stack bank (1)
    LI SB, 1
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 13 slots for locals
    ADDI SP, SP, 13
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
    ADD S3, FP, R0
    LI S2, 20
    STORE S2, SB, S3
    ADD S1, FP, R0
    ADDI S1, S1, 1
    LI S0, 0
    LOAD T7, GP, S0
    LI T6, 5
    SLT T7, T6, T7
    BEQ T7, R0, L_main_2
; Branch to L_main_2 if condition is false
    BEQ R0, R0, L_main_1
; Unconditional branch to L_main_1 (condition was true)
L_main_1:
    LI T5, 0
    ADD T4, GP, R0
    STORE T5, SB, S1
    ADDI T3, S1, 1
    STORE T4, SB, T3
    BEQ R0, R0, L_main_3
; Unconditional branch to L_main_3
L_main_2:
    ADD T2, SB, R0
    STORE S3, SB, S1
    ADDI T1, S1, 1
    STORE T2, SB, T1
    BEQ R0, R0, L_main_3
; Unconditional branch to L_main_3
L_main_3:
    ADD T0, FP, R0
    ADDI T0, T0, 3
    LOAD S2, SB, S1
    ADDI T6, S1, 1
    LOAD T7, SB, T6
    LOAD T3, T7, S2
    STORE T3, SB, T0
    LOAD T4, SB, T0
    LI T5, 10
    XOR T1, T4, T5
    LI T2, 1
    SLTU T4, T1, T2
    BEQ T4, R0, L_main_5
; Branch to L_main_5 if condition is false
    BEQ R0, R0, L_main_4
; Unconditional branch to L_main_4 (condition was true)
L_main_4:
    LI S3, 49
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Call function putchar
    CALL putchar
; Scalar return value for t9
    BEQ R0, R0, L_main_6
; Unconditional branch to L_main_6
L_main_5:
    LI T6, 78
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
; Scalar return value for t10
    BEQ R0, R0, L_main_6
; Unconditional branch to L_main_6
L_main_6:
    LI T1, 0
    LOAD T2, GP, T1
    LI T5, 5
    SLT T2, T2, T5
    BEQ T2, R0, L_main_8
; Branch to L_main_8 if condition is false
    BEQ R0, R0, L_main_7
; Unconditional branch to L_main_7 (condition was true)
L_main_7:
    LI T4, 0
    ADD T5, GP, R0
    STORE T4, SB, S1
    ADDI T2, S1, 1
    STORE T5, SB, T2
    BEQ R0, R0, L_main_9
; Unconditional branch to L_main_9
L_main_8:
    ADD T5, SB, R0
    STORE T2, SB, S1
    ADDI T4, S1, 1
    STORE T5, SB, T4
    BEQ R0, R0, L_main_9
; Unconditional branch to L_main_9
L_main_9:
    LOAD T4, SB, S1
    ADDI T5, S1, 1
    LOAD T2, SB, T5
    LOAD T5, T2, T4
    STORE T5, SB, T0
; Initialize SB as stack bank (1)
    LI SB, 1
; Spill load_f0_op1_t2_addr to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S0, SB, SC
    LOAD S0, SB, T0
; Spill load_f0_op10_t5_bank_val to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE T7, SB, SC
    LI T7, 20
; Spill t5 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S2, SB, SC
    XOR S2, S0, T7
; Spill t6 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T3, SB, SC
    LI T3, 1
    SLTU S0, S2, T3
    BEQ S0, R0, L_main_11
; Branch to L_main_11 if condition is false
    BEQ R0, R0, L_main_10
; Unconditional branch to L_main_10 (condition was true)
L_main_10:
    LI S2, 50
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
; Scalar return value for t17
    BEQ R0, R0, L_main_12
; Unconditional branch to L_main_12
L_main_11:
    LI T3, 78
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
; Scalar return value for t18
    BEQ R0, R0, L_main_12
; Unconditional branch to L_main_12
L_main_12:
    ADD T7, FP, R0
    ADDI T7, T7, 4
    LI S0, 0
    STORE S0, SB, T7
    BEQ R0, R0, L_main_13
; Unconditional branch to L_main_13
L_main_13:
    LOAD S0, SB, T7
; Spill const_f0_op14_49 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S3, SB, SC
    LI S3, 2
    SLT S0, S0, S3
    BEQ S0, R0, L_main_16
; Branch to L_main_16 if condition is false
    BEQ R0, R0, L_main_14
; Unconditional branch to L_main_14 (condition was true)
L_main_14:
    LOAD S3, SB, T7
    LI S0, 0
; Spill const_f0_op15_78 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T6, SB, SC
    XOR T6, S3, S0
; Spill load_f0_op16_t11_addr to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T1, SB, SC
    LI T1, 1
    SLTU S3, T6, T1
    BEQ S3, R0, L_main_18
; Branch to L_main_18 if condition is false
    BEQ R0, R0, L_main_17
; Unconditional branch to L_main_17 (condition was true)
L_main_17:
    LI T6, 0
    ADD T1, GP, R0
    STORE T6, SB, S1
    ADDI S0, S1, 1
    STORE T1, SB, S0
    BEQ R0, R0, L_main_19
; Unconditional branch to L_main_19
L_main_18:
    ADD S0, SB, R0
    STORE S3, SB, S1
    ADDI T1, S1, 1
    STORE S0, SB, T1
    BEQ R0, R0, L_main_19
; Unconditional branch to L_main_19
L_main_19:
    LOAD T6, SB, S1
    ADDI T1, S1, 1
    LOAD S0, SB, T1
    LOAD S3, S0, T6
    STORE S3, SB, T0
    LOAD T1, SB, T7
; Spill load_f0_op25_t13_bank_val to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T2, SB, SC
    LI T2, 0
; Spill t13 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T4, SB, SC
    XOR T4, T1, T2
; Spill t14 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T5, SB, SC
    LI T5, 1
    SLTU T1, T4, T5
    LOAD T4, SB, T0
    LI T5, 10
    XOR T2, T4, T5
; Spill const_f0_op29_50 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S2, SB, SC
    LI S2, 1
    SLTU T4, T2, S2
    AND T1, T1, T4
    LOAD T2, SB, T7
    LI S2, 1
    XOR T5, T2, S2
    LI T4, 1
    SLTU T2, T5, T4
    LOAD T5, SB, T0
    LI T4, 20
    XOR S2, T5, T4
; Spill const_f0_op30_78 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T3, SB, SC
    LI T3, 1
    SLTU T5, S2, T3
    AND T2, T2, T5
    OR T1, T1, T2
    BEQ T1, R0, L_main_21
; Branch to L_main_21 if condition is false
    BEQ R0, R0, L_main_20
; Unconditional branch to L_main_20 (condition was true)
L_main_20:
    LOAD S2, SB, T7
    LI T3, 51
    ADD T3, T3, S2
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
; Scalar return value for t39
    BEQ R0, R0, L_main_22
; Unconditional branch to L_main_22
L_main_21:
    LI T4, 78
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Call function putchar
    CALL putchar
; Scalar return value for t40
    BEQ R0, R0, L_main_22
; Unconditional branch to L_main_22
L_main_22:
    BEQ R0, R0, L_main_15
; Unconditional branch to L_main_15
L_main_15:
    LOAD T5, SB, T7
    LI T2, 1
    ADD T5, T5, T2
    STORE T5, SB, T7
    BEQ R0, R0, L_main_13
; Unconditional branch to L_main_13
L_main_16:
    LI T1, 10
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
; Scalar return value for t43
    LI RV0, 0
; Jump to epilogue
    BEQ R0, R0, L_main_99999
L_main_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
