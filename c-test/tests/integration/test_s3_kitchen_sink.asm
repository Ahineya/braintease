; Generated by Ripple C99 Compiler (rcc)

_init_globals:
; Uninitialized global myint
; Uninitialized global string
; Global variable: global_int at address 3
    LI T0, 42
    LI T1, 3
    STORE T0, GP, T1
; Global variable: global_char at address 4
    LI T0, 71
    LI T1, 4
    STORE T0, GP, T1
; String data "GLOBAL" at address 5
    LI T0, 71
    LI T1, 5
    STORE T0, GP, T1
    LI T0, 76
    LI T1, 6
    STORE T0, GP, T1
    LI T0, 79
    LI T1, 7
    STORE T0, GP, T1
    LI T0, 66
    LI T1, 8
    STORE T0, GP, T1
    LI T0, 65
    LI T1, 9
    STORE T0, GP, T1
    LI T0, 76
    LI T1, 10
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 11
    STORE T0, GP, T1
; Array global_array at address 12
    LI T0, 100
    LI T1, 12
    STORE T0, GP, T1
    LI T0, 200
    LI T1, 13
    STORE T0, GP, T1
    LI T0, 300
    LI T1, 14
    STORE T0, GP, T1
; Uninitialized global global_point
; Uninitialized global global_complex
; Uninitialized global null_ptr
; String data "=== S3 KITCHEN SINK TEST ===" at address 43
    LI T0, 61
    LI T1, 43
    STORE T0, GP, T1
    LI T0, 61
    LI T1, 44
    STORE T0, GP, T1
    LI T0, 61
    LI T1, 45
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 46
    STORE T0, GP, T1
    LI T0, 83
    LI T1, 47
    STORE T0, GP, T1
    LI T0, 51
    LI T1, 48
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 49
    STORE T0, GP, T1
    LI T0, 75
    LI T1, 50
    STORE T0, GP, T1
    LI T0, 73
    LI T1, 51
    STORE T0, GP, T1
    LI T0, 84
    LI T1, 52
    STORE T0, GP, T1
    LI T0, 67
    LI T1, 53
    STORE T0, GP, T1
    LI T0, 72
    LI T1, 54
    STORE T0, GP, T1
    LI T0, 69
    LI T1, 55
    STORE T0, GP, T1
    LI T0, 78
    LI T1, 56
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 57
    STORE T0, GP, T1
    LI T0, 83
    LI T1, 58
    STORE T0, GP, T1
    LI T0, 73
    LI T1, 59
    STORE T0, GP, T1
    LI T0, 78
    LI T1, 60
    STORE T0, GP, T1
    LI T0, 75
    LI T1, 61
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 62
    STORE T0, GP, T1
    LI T0, 84
    LI T1, 63
    STORE T0, GP, T1
    LI T0, 69
    LI T1, 64
    STORE T0, GP, T1
    LI T0, 83
    LI T1, 65
    STORE T0, GP, T1
    LI T0, 84
    LI T1, 66
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 67
    STORE T0, GP, T1
    LI T0, 61
    LI T1, 68
    STORE T0, GP, T1
    LI T0, 61
    LI T1, 69
    STORE T0, GP, T1
    LI T0, 61
    LI T1, 70
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 71
    STORE T0, GP, T1
; String data "T1: Locals" at address 72
    LI T0, 84
    LI T1, 72
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 73
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 74
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 75
    STORE T0, GP, T1
    LI T0, 76
    LI T1, 76
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 77
    STORE T0, GP, T1
    LI T0, 99
    LI T1, 78
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 79
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 80
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 81
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 82
    STORE T0, GP, T1
; String data "T2: Globals" at address 83
    LI T0, 84
    LI T1, 83
    STORE T0, GP, T1
    LI T0, 50
    LI T1, 84
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 85
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 86
    STORE T0, GP, T1
    LI T0, 71
    LI T1, 87
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 88
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 89
    STORE T0, GP, T1
    LI T0, 98
    LI T1, 90
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 91
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 92
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 93
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 94
    STORE T0, GP, T1
; String data "T3: Evil ptrs" at address 95
    LI T0, 84
    LI T1, 95
    STORE T0, GP, T1
    LI T0, 51
    LI T1, 96
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 97
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 98
    STORE T0, GP, T1
    LI T0, 69
    LI T1, 99
    STORE T0, GP, T1
    LI T0, 118
    LI T1, 100
    STORE T0, GP, T1
    LI T0, 105
    LI T1, 101
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 102
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 103
    STORE T0, GP, T1
    LI T0, 112
    LI T1, 104
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 105
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 106
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 107
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 108
    STORE T0, GP, T1
; String data "T4: Arrays" at address 109
    LI T0, 84
    LI T1, 109
    STORE T0, GP, T1
    LI T0, 52
    LI T1, 110
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 111
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 112
    STORE T0, GP, T1
    LI T0, 65
    LI T1, 113
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 114
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 115
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 116
    STORE T0, GP, T1
    LI T0, 121
    LI T1, 117
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 118
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 119
    STORE T0, GP, T1
; String data "T5: Shift" at address 120
    LI T0, 84
    LI T1, 120
    STORE T0, GP, T1
    LI T0, 53
    LI T1, 121
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 122
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 123
    STORE T0, GP, T1
    LI T0, 83
    LI T1, 124
    STORE T0, GP, T1
    LI T0, 104
    LI T1, 125
    STORE T0, GP, T1
    LI T0, 105
    LI T1, 126
    STORE T0, GP, T1
    LI T0, 102
    LI T1, 127
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 128
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 129
    STORE T0, GP, T1
; String data "T6: Structs" at address 130
    LI T0, 84
    LI T1, 130
    STORE T0, GP, T1
    LI T0, 54
    LI T1, 131
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 132
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 133
    STORE T0, GP, T1
    LI T0, 83
    LI T1, 134
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 135
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 136
    STORE T0, GP, T1
    LI T0, 117
    LI T1, 137
    STORE T0, GP, T1
    LI T0, 99
    LI T1, 138
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 139
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 140
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 141
    STORE T0, GP, T1
; String data "T7: Nested" at address 142
    LI T0, 84
    LI T1, 142
    STORE T0, GP, T1
    LI T0, 55
    LI T1, 143
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 144
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 145
    STORE T0, GP, T1
    LI T0, 78
    LI T1, 146
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 147
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 148
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 149
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 150
    STORE T0, GP, T1
    LI T0, 100
    LI T1, 151
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 152
    STORE T0, GP, T1
; String data "T8: StructArr" at address 153
    LI T0, 84
    LI T1, 153
    STORE T0, GP, T1
    LI T0, 56
    LI T1, 154
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 155
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 156
    STORE T0, GP, T1
    LI T0, 83
    LI T1, 157
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 158
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 159
    STORE T0, GP, T1
    LI T0, 117
    LI T1, 160
    STORE T0, GP, T1
    LI T0, 99
    LI T1, 161
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 162
    STORE T0, GP, T1
    LI T0, 65
    LI T1, 163
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 164
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 165
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 166
    STORE T0, GP, T1
; String data "T9: Casts" at address 167
    LI T0, 84
    LI T1, 167
    STORE T0, GP, T1
    LI T0, 57
    LI T1, 168
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 169
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 170
    STORE T0, GP, T1
    LI T0, 67
    LI T1, 171
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 172
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 173
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 174
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 175
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 176
    STORE T0, GP, T1
; String data "T10: PtrCast" at address 177
    LI T0, 84
    LI T1, 177
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 178
    STORE T0, GP, T1
    LI T0, 48
    LI T1, 179
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 180
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 181
    STORE T0, GP, T1
    LI T0, 80
    LI T1, 182
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 183
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 184
    STORE T0, GP, T1
    LI T0, 67
    LI T1, 185
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 186
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 187
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 188
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 189
    STORE T0, GP, T1
; String data "T11: NULL" at address 190
    LI T0, 84
    LI T1, 190
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 191
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 192
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 193
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 194
    STORE T0, GP, T1
    LI T0, 78
    LI T1, 195
    STORE T0, GP, T1
    LI T0, 85
    LI T1, 196
    STORE T0, GP, T1
    LI T0, 76
    LI T1, 197
    STORE T0, GP, T1
    LI T0, 76
    LI T1, 198
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 199
    STORE T0, GP, T1
; String data "T12: PtrArith" at address 200
    LI T0, 84
    LI T1, 200
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 201
    STORE T0, GP, T1
    LI T0, 50
    LI T1, 202
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 203
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 204
    STORE T0, GP, T1
    LI T0, 80
    LI T1, 205
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 206
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 207
    STORE T0, GP, T1
    LI T0, 65
    LI T1, 208
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 209
    STORE T0, GP, T1
    LI T0, 105
    LI T1, 210
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 211
    STORE T0, GP, T1
    LI T0, 104
    LI T1, 212
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 213
    STORE T0, GP, T1
; String data "T13: PtrCmp" at address 214
    LI T0, 84
    LI T1, 214
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 215
    STORE T0, GP, T1
    LI T0, 51
    LI T1, 216
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 217
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 218
    STORE T0, GP, T1
    LI T0, 80
    LI T1, 219
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 220
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 221
    STORE T0, GP, T1
    LI T0, 67
    LI T1, 222
    STORE T0, GP, T1
    LI T0, 109
    LI T1, 223
    STORE T0, GP, T1
    LI T0, 112
    LI T1, 224
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 225
    STORE T0, GP, T1
; String data "T14: Conds" at address 226
    LI T0, 84
    LI T1, 226
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 227
    STORE T0, GP, T1
    LI T0, 52
    LI T1, 228
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 229
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 230
    STORE T0, GP, T1
    LI T0, 67
    LI T1, 231
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 232
    STORE T0, GP, T1
    LI T0, 110
    LI T1, 233
    STORE T0, GP, T1
    LI T0, 100
    LI T1, 234
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 235
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 236
    STORE T0, GP, T1
; String data "T15: Math" at address 237
    LI T0, 84
    LI T1, 237
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 238
    STORE T0, GP, T1
    LI T0, 53
    LI T1, 239
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 240
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 241
    STORE T0, GP, T1
    LI T0, 77
    LI T1, 242
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 243
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 244
    STORE T0, GP, T1
    LI T0, 104
    LI T1, 245
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 246
    STORE T0, GP, T1
; String data "T16: Recur" at address 247
    LI T0, 84
    LI T1, 247
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 248
    STORE T0, GP, T1
    LI T0, 54
    LI T1, 249
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 250
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 251
    STORE T0, GP, T1
    LI T0, 82
    LI T1, 252
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 253
    STORE T0, GP, T1
    LI T0, 99
    LI T1, 254
    STORE T0, GP, T1
    LI T0, 117
    LI T1, 255
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 256
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 257
    STORE T0, GP, T1
; String data "T17: Strings" at address 258
    LI T0, 84
    LI T1, 258
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 259
    STORE T0, GP, T1
    LI T0, 55
    LI T1, 260
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 261
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 262
    STORE T0, GP, T1
    LI T0, 83
    LI T1, 263
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 264
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 265
    STORE T0, GP, T1
    LI T0, 105
    LI T1, 266
    STORE T0, GP, T1
    LI T0, 110
    LI T1, 267
    STORE T0, GP, T1
    LI T0, 103
    LI T1, 268
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 269
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 270
    STORE T0, GP, T1
; String data "HELLO" at address 271
    LI T0, 72
    LI T1, 271
    STORE T0, GP, T1
    LI T0, 69
    LI T1, 272
    STORE T0, GP, T1
    LI T0, 76
    LI T1, 273
    STORE T0, GP, T1
    LI T0, 76
    LI T1, 274
    STORE T0, GP, T1
    LI T0, 79
    LI T1, 275
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 276
    STORE T0, GP, T1
; String data "T18: For" at address 277
    LI T0, 84
    LI T1, 277
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 278
    STORE T0, GP, T1
    LI T0, 56
    LI T1, 279
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 280
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 281
    STORE T0, GP, T1
    LI T0, 70
    LI T1, 282
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 283
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 284
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 285
    STORE T0, GP, T1
; String data "T19: Break" at address 286
    LI T0, 84
    LI T1, 286
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 287
    STORE T0, GP, T1
    LI T0, 57
    LI T1, 288
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 289
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 290
    STORE T0, GP, T1
    LI T0, 66
    LI T1, 291
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 292
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 293
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 294
    STORE T0, GP, T1
    LI T0, 107
    LI T1, 295
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 296
    STORE T0, GP, T1
; String data "T20: Unary" at address 297
    LI T0, 84
    LI T1, 297
    STORE T0, GP, T1
    LI T0, 50
    LI T1, 298
    STORE T0, GP, T1
    LI T0, 48
    LI T1, 299
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 300
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 301
    STORE T0, GP, T1
    LI T0, 85
    LI T1, 302
    STORE T0, GP, T1
    LI T0, 110
    LI T1, 303
    STORE T0, GP, T1
    LI T0, 97
    LI T1, 304
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 305
    STORE T0, GP, T1
    LI T0, 121
    LI T1, 306
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 307
    STORE T0, GP, T1
; String data "T21: DoWhile" at address 308
    LI T0, 84
    LI T1, 308
    STORE T0, GP, T1
    LI T0, 50
    LI T1, 309
    STORE T0, GP, T1
    LI T0, 49
    LI T1, 310
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 311
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 312
    STORE T0, GP, T1
    LI T0, 68
    LI T1, 313
    STORE T0, GP, T1
    LI T0, 111
    LI T1, 314
    STORE T0, GP, T1
    LI T0, 87
    LI T1, 315
    STORE T0, GP, T1
    LI T0, 104
    LI T1, 316
    STORE T0, GP, T1
    LI T0, 105
    LI T1, 317
    STORE T0, GP, T1
    LI T0, 108
    LI T1, 318
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 319
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 320
    STORE T0, GP, T1
; String data "T22: Typedef" at address 321
    LI T0, 84
    LI T1, 321
    STORE T0, GP, T1
    LI T0, 50
    LI T1, 322
    STORE T0, GP, T1
    LI T0, 50
    LI T1, 323
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 324
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 325
    STORE T0, GP, T1
    LI T0, 84
    LI T1, 326
    STORE T0, GP, T1
    LI T0, 121
    LI T1, 327
    STORE T0, GP, T1
    LI T0, 112
    LI T1, 328
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 329
    STORE T0, GP, T1
    LI T0, 100
    LI T1, 330
    STORE T0, GP, T1
    LI T0, 101
    LI T1, 331
    STORE T0, GP, T1
    LI T0, 102
    LI T1, 332
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 333
    STORE T0, GP, T1
; String data "T23: AddrOf" at address 334
    LI T0, 84
    LI T1, 334
    STORE T0, GP, T1
    LI T0, 50
    LI T1, 335
    STORE T0, GP, T1
    LI T0, 51
    LI T1, 336
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 337
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 338
    STORE T0, GP, T1
    LI T0, 65
    LI T1, 339
    STORE T0, GP, T1
    LI T0, 100
    LI T1, 340
    STORE T0, GP, T1
    LI T0, 100
    LI T1, 341
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 342
    STORE T0, GP, T1
    LI T0, 79
    LI T1, 343
    STORE T0, GP, T1
    LI T0, 102
    LI T1, 344
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 345
    STORE T0, GP, T1
; String data "T24: StructAsg" at address 346
    LI T0, 84
    LI T1, 346
    STORE T0, GP, T1
    LI T0, 50
    LI T1, 347
    STORE T0, GP, T1
    LI T0, 52
    LI T1, 348
    STORE T0, GP, T1
    LI T0, 58
    LI T1, 349
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 350
    STORE T0, GP, T1
    LI T0, 83
    LI T1, 351
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 352
    STORE T0, GP, T1
    LI T0, 114
    LI T1, 353
    STORE T0, GP, T1
    LI T0, 117
    LI T1, 354
    STORE T0, GP, T1
    LI T0, 99
    LI T1, 355
    STORE T0, GP, T1
    LI T0, 116
    LI T1, 356
    STORE T0, GP, T1
    LI T0, 65
    LI T1, 357
    STORE T0, GP, T1
    LI T0, 115
    LI T1, 358
    STORE T0, GP, T1
    LI T0, 103
    LI T1, 359
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 360
    STORE T0, GP, T1
; String data "=== END S3 KITCHEN SINK ===" at address 361
    LI T0, 61
    LI T1, 361
    STORE T0, GP, T1
    LI T0, 61
    LI T1, 362
    STORE T0, GP, T1
    LI T0, 61
    LI T1, 363
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 364
    STORE T0, GP, T1
    LI T0, 69
    LI T1, 365
    STORE T0, GP, T1
    LI T0, 78
    LI T1, 366
    STORE T0, GP, T1
    LI T0, 68
    LI T1, 367
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 368
    STORE T0, GP, T1
    LI T0, 83
    LI T1, 369
    STORE T0, GP, T1
    LI T0, 51
    LI T1, 370
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 371
    STORE T0, GP, T1
    LI T0, 75
    LI T1, 372
    STORE T0, GP, T1
    LI T0, 73
    LI T1, 373
    STORE T0, GP, T1
    LI T0, 84
    LI T1, 374
    STORE T0, GP, T1
    LI T0, 67
    LI T1, 375
    STORE T0, GP, T1
    LI T0, 72
    LI T1, 376
    STORE T0, GP, T1
    LI T0, 69
    LI T1, 377
    STORE T0, GP, T1
    LI T0, 78
    LI T1, 378
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 379
    STORE T0, GP, T1
    LI T0, 83
    LI T1, 380
    STORE T0, GP, T1
    LI T0, 73
    LI T1, 381
    STORE T0, GP, T1
    LI T0, 78
    LI T1, 382
    STORE T0, GP, T1
    LI T0, 75
    LI T1, 383
    STORE T0, GP, T1
    LI T0, 32
    LI T1, 384
    STORE T0, GP, T1
    LI T0, 61
    LI T1, 385
    STORE T0, GP, T1
    LI T0, 61
    LI T1, 386
    STORE T0, GP, T1
    LI T0, 61
    LI T1, 387
    STORE T0, GP, T1
    LI T0, 0
    LI T1, 388
    STORE T0, GP, T1
    RET
print_digit:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 9 slots for locals
    ADDI SP, SP, 9
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
    ADD S2, FP, R0
    STORE S3, SB, S2
    LOAD S1, SB, S2
    LI S0, 0
    SLT T7, S1, S0
    LI T6, 1
    SUB S1, T6, T7
    LOAD T5, SB, S2
    LI T4, 9
    SLT T3, T4, T5
    LI T2, 1
    SUB T5, T2, T3
    AND S1, S1, T5
    BEQ S1, R0, L_print_digit_2
; Branch to L_print_digit_2 if condition is false
    BEQ R0, R0, L_print_digit_1
; Unconditional branch to L_print_digit_1 (condition was true)
L_print_digit_1:
; Recompute alloca t1 at FP+0
    ADD T1, FP, R0
    LOAD T0, SB, T1
    LI T7, 48
    ADD T7, T7, T0
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 9
    STORE S3, SB, SC
; Spill t8 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 10
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_print_digit_3
; Unconditional branch to L_print_digit_3
L_print_digit_2:
    LI T6, 63
; Spill live registers before call
; Spill const_f0_op8_63 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 11
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_print_digit_3
; Unconditional branch to L_print_digit_3
L_print_digit_3:
; Jump to epilogue
    BEQ R0, R0, L_print_digit_99999
L_print_digit_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
print_num:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 9 slots for locals
    ADDI SP, SP, 9
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
L_print_num_4:
    ADD S2, FP, R0
    STORE S3, SB, S2
    LOAD S1, SB, S2
    LI S0, 0
    SLT S1, S1, S0
    BEQ S1, R0, L_print_num_7
; Branch to L_print_num_7 if condition is false
    BEQ R0, R0, L_print_num_5
; Unconditional branch to L_print_num_5 (condition was true)
L_print_num_5:
    LI T7, 45
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 9
    STORE S3, SB, SC
; Spill const_f2_op2_45 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 10
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
; Recompute alloca t1 at FP+0
    ADD T6, FP, R0
    LOAD T5, SB, T6
    LI T4, 0
    SUB T4, T4, T5
    STORE T4, SB, T6
    BEQ R0, R0, L_print_num_7
; Unconditional branch to L_print_num_7
L_print_num_7:
; Recompute alloca t1 at FP+0
    ADD T3, FP, R0
    LOAD T2, SB, T3
    LI T1, 100
    SLT T0, T2, T1
    LI S0, 1
    SUB T2, S0, T0
    BEQ T2, R0, L_print_num_9
; Branch to L_print_num_9 if condition is false
    BEQ R0, R0, L_print_num_8
; Unconditional branch to L_print_num_8 (condition was true)
L_print_num_8:
; Recompute alloca t1 at FP+0
    ADD S1, FP, R0
    LOAD S2, SB, S1
    LI S3, 100
    DIV S2, S2, S3
; Spill live registers before call
; Spill t5 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 11
    STORE T4, SB, SC
; Spill t9 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function print_digit
    CALL print_digit
; Recompute alloca t1 at FP+0
    ADD T7, FP, R0
    LOAD T5, SB, T7
    LI T6, 10
    DIV T5, T5, T6
    LI T0, 10
    MOD T5, T5, T0
; Spill live registers before call
; Spill t12 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function print_digit
    CALL print_digit
; Recompute alloca t1 at FP+0
    ADD S0, FP, R0
    LOAD T1, SB, S0
    LI T2, 10
    MOD T1, T1, T2
; Spill live registers before call
; Spill t14 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function print_digit
    CALL print_digit
    BEQ R0, R0, L_print_num_10
; Unconditional branch to L_print_num_10
L_print_num_9:
; Recompute alloca t1 at FP+0
    ADD T3, FP, R0
    LOAD S3, SB, T3
    LI T4, 10
    SLT S1, S3, T4
    LI S2, 1
    SUB S3, S2, S1
    BEQ S3, R0, L_print_num_12
; Branch to L_print_num_12 if condition is false
    BEQ R0, R0, L_print_num_11
; Unconditional branch to L_print_num_11 (condition was true)
L_print_num_11:
; Recompute alloca t1 at FP+0
    ADD T6, FP, R0
    LOAD T0, SB, T6
    LI T7, 10
    DIV T0, T0, T7
; Spill live registers before call
; Spill t18 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function print_digit
    CALL print_digit
; Recompute alloca t1 at FP+0
    ADD T5, FP, R0
    LOAD T2, SB, T5
    LI S0, 10
    MOD T2, T2, S0
; Spill live registers before call
; Spill t20 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function print_digit
    CALL print_digit
    BEQ R0, R0, L_print_num_13
; Unconditional branch to L_print_num_13
L_print_num_12:
; Recompute alloca t1 at FP+0
    ADD T1, FP, R0
    LOAD S1, SB, T1
; Spill live registers before call
; Spill t21 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Call function print_digit
    CALL print_digit
    BEQ R0, R0, L_print_num_13
; Unconditional branch to L_print_num_13
L_print_num_13:
    BEQ R0, R0, L_print_num_10
; Unconditional branch to L_print_num_10
L_print_num_10:
; Jump to epilogue
    BEQ R0, R0, L_print_num_99999
L_print_num_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
process_array:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 15 slots for locals
    ADDI SP, SP, 15
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 2 from A3
    ADD S1, A3, R0
L_process_array_14:
    ADD S0, FP, R0
    STORE S3, SB, S0
    ADDI T7, S0, 1
    STORE A1, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 2
    STORE S2, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 3
    STORE S1, SB, T5
    ADD T4, FP, R0
    ADDI T4, T4, 4
    LI T3, 0
    STORE T3, SB, T4
    ADD T2, FP, R0
    ADDI T2, T2, 5
    LI T1, 0
    STORE T1, SB, T2
    BEQ R0, R0, L_process_array_15
; Unconditional branch to L_process_array_15
L_process_array_15:
; Recompute alloca t7 at FP+5
    ADD T0, FP, R0
    ADDI T0, T0, 5
    LOAD T7, SB, T0
; Recompute alloca t4 at FP+2
    ADD T3, FP, R0
    ADDI T3, T3, 2
    LOAD T1, SB, T3
    SLT T7, T7, T1
; Recompute alloca t3 at FP+0
    ADD T2, FP, R0
    LOAD T4, SB, T2
    ADDI T5, T2, 1
    LOAD T6, SB, T5
    LOAD S0, SB, T0
    ADD T5, S0, R0
    ADD T1, T4, T5
; Runtime bank overflow calculation for dynamic GEP
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S3, SB, SC
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S2, SB, SC
    LI S2, 4096
    DIV S3, T1, S2
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S1, SB, SC
    MOD S1, T1, S2
    ADD T3, T6, S3
    ADD T1, S1, R0
    LOAD T5, T3, T1
    LI S3, 0
    XOR S2, T5, S3
    LI S1, 0
    SLTU T5, S1, S2
    AND T7, T7, T5
    BEQ T7, R0, L_process_array_17
; Branch to L_process_array_17 if condition is false
    BEQ R0, R0, L_process_array_16
; Unconditional branch to L_process_array_16 (condition was true)
L_process_array_16:
    ADD T4, FP, R0
    ADDI T4, T4, 6
; Recompute alloca t3 at FP+0
    ADD S2, FP, R0
    LOAD S1, SB, S2
    ADDI S3, S2, 1
    LOAD T5, SB, S3
; Recompute alloca t7 at FP+5
    ADD T7, FP, R0
    ADDI T7, T7, 5
    LOAD T0, SB, T7
    ADD S3, T0, R0
    ADD T2, S1, S3
; Runtime bank overflow calculation for dynamic GEP
; Spill t12 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE S0, SB, SC
; Spill load_f4_op11_t11_bank_val to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T6, SB, SC
    LI T6, 4096
    DIV S0, T2, T6
; Spill gep_new_bank_f4_op17_t13 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T3, SB, SC
    MOD T3, T2, T6
; Spill t13 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T1, SB, SC
    ADD T1, T5, S0
    ADD T2, T3, R0
; Recompute alloca t5 at FP+3
    ADD S3, FP, R0
    ADDI S3, S3, 3
    LOAD S0, SB, S3
    ADD T3, S0, R0
    ADD T6, T2, T3
; Runtime bank overflow calculation for dynamic GEP
    LI T4, 4096
    DIV S1, T6, T4
    MOD S2, T6, T4
    ADD T1, T1, S1
    ADD T6, S2, R0
    LOAD T3, T1, T6
; Recompute alloca t17 at FP+6
    ADD S1, FP, R0
    ADDI S1, S1, 6
    STORE T3, SB, S1
; Recompute alloca t6 at FP+4
    ADD T4, FP, R0
    ADDI T4, T4, 4
    LOAD S2, SB, T4
    LOAD T2, SB, S1
    ADD S2, S2, T2
    STORE S2, SB, T4
    LOAD T2, SB, T7
; Spill t19 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T0, SB, SC
    LI T0, 1
    ADD T2, T2, T0
    STORE T2, SB, T7
    BEQ R0, R0, L_process_array_15
; Unconditional branch to L_process_array_15
L_process_array_17:
; Recompute alloca t6 at FP+4
    ADD T0, FP, R0
    ADDI T0, T0, 4
    LOAD T4, SB, T0
    MOVE RV0, T4
; Jump to epilogue
    BEQ R0, R0, L_process_array_99999
L_process_array_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
factorial:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 9 slots for locals
    ADDI SP, SP, 9
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
L_factorial_18:
    ADD S2, FP, R0
    STORE S3, SB, S2
    LOAD S1, SB, S2
    LI S0, 1
    SLT T7, S0, S1
    LI T6, 1
    SUB S1, T6, T7
    BEQ S1, R0, L_factorial_21
; Branch to L_factorial_21 if condition is false
    BEQ R0, R0, L_factorial_19
; Unconditional branch to L_factorial_19 (condition was true)
L_factorial_19:
    LI RV0, 1
; Jump to epilogue
    BEQ R0, R0, L_factorial_99999
    BEQ R0, R0, L_factorial_21
; Unconditional branch to L_factorial_21
L_factorial_21:
; Recompute alloca t1 at FP+0
    ADD T5, FP, R0
    LOAD T4, SB, T5
    LOAD T3, SB, T5
    LI T2, 1
    SUB T3, T3, T2
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 9
    STORE S3, SB, SC
; Spill t4 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 10
    STORE T4, SB, SC
; Spill t6 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 11
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function factorial
    CALL factorial
; Scalar return value for t7
; Reload t4 from slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 10
    LOAD T1, SB, SC
    MUL T1, T1, RV0
    MOVE RV0, T1
; Jump to epilogue
    BEQ R0, R0, L_factorial_99999
L_factorial_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
test_evil_pointers:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 16 slots for locals
    ADDI SP, SP, 16
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
L_test_evil_pointers_22:
    ADD S2, FP, R0
    STORE S3, SB, S2
    ADDI S1, S2, 1
    STORE A1, SB, S1
    LOAD S0, SB, S2
    ADDI T7, S2, 1
    LOAD T6, SB, T7
    LI T5, 123
    STORE T5, T6, S0
    ADD T4, FP, R0
    ADDI T4, T4, 2
    ADD T3, SB, R0
    STORE S2, SB, T4
    ADDI T2, T4, 1
    STORE T3, SB, T2
    LOAD T1, SB, T4
    ADDI T0, T4, 1
    LOAD S1, SB, T0
    LOAD T7, S1, T1
    ADDI T5, T1, 1
    LOAD T2, S1, T5
    LI T3, 456
    STORE T3, T2, T7
    ADD S2, FP, R0
    ADDI S2, S2, 4
    ADD T0, SB, R0
    STORE T4, SB, S2
    ADDI T5, S2, 1
    STORE T0, SB, T5
    LOAD T3, SB, S2
    ADDI T5, S2, 1
    LOAD T0, SB, T5
    LOAD T4, T0, T3
    ADDI T5, T3, 1
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S3, SB, SC
    LOAD S3, T0, T5
    LOAD T5, S3, T4
; Spill t2 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S0, SB, SC
    ADDI S0, T4, 1
; Spill load_f8_op5_t2_bank_val to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T6, SB, SC
    LOAD T6, S3, S0
    LI S0, 789
    STORE S0, T6, T5
    ADD S0, FP, R0
    ADDI S0, S0, 6
; Spill t4 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T1, SB, SC
    ADD T1, SB, R0
    STORE S2, SB, S0
; Spill load_f8_op11_t4_bank_val to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE S1, SB, SC
    ADDI S1, S0, 1
    STORE T1, SB, S1
    LOAD S1, SB, S0
    ADDI T1, S0, 1
    LOAD S2, SB, T1
    LOAD T1, S2, S1
; Spill t5 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T7, SB, SC
    ADDI T7, S1, 1
; Spill load_f8_op13_t5_bank_val to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T2, SB, SC
    LOAD T2, S2, T7
    LOAD T7, T2, T1
; Spill t7 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE T3, SB, SC
    ADDI T3, T1, 1
; Spill load_f8_op19_t7_bank_val to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T0, SB, SC
    LOAD T0, T2, T3
    LOAD T3, T0, T7
; Spill t8 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T4, SB, SC
    ADDI T4, T7, 1
; Spill load_f8_op21_t8_bank_val to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE S3, SB, SC
    LOAD S3, T0, T4
    LI T4, 999
    STORE T4, S3, T3
    LI T4, 80
; Spill live registers before call
; Spill t9 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T5, SB, SC
; Spill load_f8_op23_t9_bank_val to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T6, SB, SC
; Spill t11 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE S1, SB, SC
; Spill load_f8_op29_t11_bank_val to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE S2, SB, SC
; Spill t12 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 31
    STORE T1, SB, SC
; Spill load_f8_op31_t12_bank_val to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 32
    STORE T2, SB, SC
; Spill t13 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 33
    STORE T7, SB, SC
; Spill load_f8_op33_t13_bank_val to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 34
    STORE T0, SB, SC
; Spill t14 to slot 19
    ADD SC, FP, R0
    ADDI SC, SC, 35
    STORE T3, SB, SC
; Spill load_f8_op35_t14_bank_val to slot 20
    ADD SC, FP, R0
    ADDI SC, SC, 36
    STORE S3, SB, SC
; Spill const_f8_op37_80 to slot 21
    ADD SC, FP, R0
    ADDI SC, SC, 37
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Call function putchar
    CALL putchar
; Recompute alloca t1 at FP+0
    ADD T5, FP, R0
    LOAD T6, SB, T5
    ADDI S0, T5, 1
    LOAD S1, SB, S0
    LOAD S2, S1, T6
; Spill live registers before call
; Spill t15 to slot 22
    ADD SC, FP, R0
    ADDI SC, SC, 38
    STORE T6, SB, SC
; Spill load_f8_op40_t15_bank_val to slot 23
    ADD SC, FP, R0
    ADDI SC, SC, 39
    STORE S1, SB, SC
; Spill t16 to slot 24
    ADD SC, FP, R0
    ADDI SC, SC, 40
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function print_num
    CALL print_num
    LI T1, 10
; Spill live registers before call
; Spill const_f8_op41_10 to slot 25
    ADD SC, FP, R0
    ADDI SC, SC, 41
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
; Jump to epilogue
    BEQ R0, R0, L_test_evil_pointers_99999
L_test_evil_pointers_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
shift_array:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 12 slots for locals
    ADDI SP, SP, 12
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
L_shift_array_23:
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADDI S0, S1, 1
    STORE A1, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 2
    STORE S2, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 3
    LOAD T5, SB, T7
    LI T4, 1
    SUB T5, T5, T4
    STORE T5, SB, T6
    BEQ R0, R0, L_shift_array_24
; Unconditional branch to L_shift_array_24
L_shift_array_24:
; Recompute alloca t4 at FP+3
    ADD T3, FP, R0
    ADDI T3, T3, 3
    LOAD T2, SB, T3
    LI T1, 0
    SLT T2, T1, T2
    BEQ T2, R0, L_shift_array_26
; Branch to L_shift_array_26 if condition is false
    BEQ R0, R0, L_shift_array_25
; Unconditional branch to L_shift_array_25 (condition was true)
L_shift_array_25:
; Recompute alloca t2 at FP+0
    ADD T0, FP, R0
    LOAD S0, SB, T0
    ADDI T4, T0, 1
    LOAD T6, SB, T4
; Recompute alloca t4 at FP+3
    ADD T7, FP, R0
    ADDI T7, T7, 3
    LOAD S1, SB, T7
    ADD T2, S1, R0
    ADD T1, S0, T2
; Runtime bank overflow calculation for dynamic GEP
    LI T4, 4096
    DIV T3, T1, T4
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE S3, SB, SC
    MOD S3, T1, T4
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S2, SB, SC
    ADD S2, T6, T3
    ADD T1, S3, R0
    LOAD T2, SB, T0
    ADDI T3, T0, 1
    LOAD T4, SB, T3
    LOAD S3, SB, T7
    LI S0, 1
    SUB S3, S3, S0
    ADD S0, S3, R0
    ADD T3, T2, S0
; Runtime bank overflow calculation for dynamic GEP
; Spill t6 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE T5, SB, SC
; Spill t10 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S1, SB, SC
    LI S1, 4096
    DIV T5, T3, S1
; Spill load_f10_op8_t9_bank_val to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T6, SB, SC
    MOD T6, T3, S1
; Spill gep_new_bank_f10_op14_t11 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S2, SB, SC
    ADD S2, T4, T5
    ADD T3, T6, R0
    LOAD S0, S2, T3
    STORE S0, S2, T1
    LOAD T5, SB, T7
    LI S1, 1
    SUB T5, T5, S1
    STORE T5, SB, T7
    BEQ R0, R0, L_shift_array_24
; Unconditional branch to L_shift_array_24
L_shift_array_26:
; Recompute alloca t2 at FP+0
    ADD T6, FP, R0
    LOAD T2, SB, T6
    ADDI S1, T6, 1
    LOAD T0, SB, S1
    ADD T7, T2, R0
    LI S1, 88
    STORE S1, T0, T7
; Jump to epilogue
    BEQ R0, R0, L_shift_array_99999
L_shift_array_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
complex_calc:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 12 slots for locals
    ADDI SP, SP, 12
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
L_complex_calc_27:
    ADD S0, FP, R0
    STORE S3, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 1
    STORE S2, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 2
    STORE S1, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD T4, SB, S0
    LOAD T3, SB, T7
    LOAD T2, SB, T6
    MUL T3, T3, T2
    ADD T4, T4, T3
    LOAD T1, SB, S0
    LOAD T0, SB, T7
    MUL T1, T1, T0
    LOAD T2, SB, T6
    ADD T1, T1, T2
    LI T3, 2
    DIV T1, T1, T3
    SUB T4, T4, T1
    STORE T4, SB, T5
    LOAD T0, SB, T5
    LI T2, 15
    XOR T0, T0, T2
    STORE T0, SB, T5
    LOAD T3, SB, T5
    LI T1, 255
    AND T3, T3, T1
    STORE T3, SB, T5
    LOAD T2, SB, T5
    LI T1, 64
    OR T2, T2, T1
    STORE T2, SB, T5
    LOAD T1, SB, T5
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE S3, SB, SC
    LI S3, 1
    SLL T1, T1, S3
    STORE T1, SB, T5
    LOAD S3, SB, T5
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S2, SB, SC
    LI S2, 2
    SRL S3, S3, S2
    STORE S3, SB, T5
    LOAD S2, SB, T5
    MOVE RV0, S2
; Jump to epilogue
    BEQ R0, R0, L_complex_calc_99999
L_complex_calc_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
main:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 144 slots for locals
    ADDI SP, SP, 144
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
L_main_28:
    LI S3, 43
; Spill live registers before call
; Spill const_f14_op0_43 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 144
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S3, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    LI S2, 15
    ADD S1, S2, R0
    LI S0, 10
    STORE S0, GP, S1
    LI T7, 15
    ADDI T6, T7, 1
    LI T5, 20
    STORE T5, GP, T6
    LI T4, 72
; Spill live registers before call
; Spill t0 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 145
    STORE S1, SB, SC
; Spill t1 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 146
    STORE T6, SB, SC
; Spill const_f14_op5_72 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 147
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T4, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T3, FP, R0
    ADD T2, T3, R0
    LI T1, 76
    STORE T1, SB, T2
; Recompute alloca t2 at FP+0
    ADD T0, FP, R0
    ADDI S3, T0, 1
    LI S2, 79
    STORE S2, SB, S3
; Recompute alloca t2 at FP+0
    ADD S0, FP, R0
    ADDI T7, S0, 2
    LI T5, 67
    STORE T5, SB, T7
; Recompute alloca t2 at FP+0
    ADD S1, FP, R0
    ADDI T6, S1, 3
    LI T4, 65
    STORE T4, SB, T6
; Recompute alloca t2 at FP+0
    ADD T3, FP, R0
    ADDI T1, T3, 4
    LI T0, 76
    STORE T0, SB, T1
; Recompute alloca t2 at FP+0
    ADD S2, FP, R0
    ADDI S0, S2, 5
    LI T5, 0
    STORE T5, SB, S0
; Recompute alloca t2 at FP+0
    ADD S1, FP, R0
; Spill live registers before call
; Spill t3 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 148
    STORE T2, SB, SC
; Spill t4 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 149
    STORE S3, SB, SC
; Spill t5 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 150
    STORE T7, SB, SC
; Spill t6 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 151
    STORE T6, SB, SC
; Spill t7 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 152
    STORE T1, SB, SC
; Spill t8 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 153
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S1, R0
    ADD A1, SB, R0
; Call function puts
    CALL puts
    LI T4, 83
; Spill live registers before call
; Spill const_f14_op12_83 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 154
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T4, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    LI T3, 4
    LOAD T0, GP, T3
; Spill live registers before call
; Spill load_f14_op13_t9_addr to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 155
    STORE T3, SB, SC
; Spill t9 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 156
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function putchar
    CALL putchar
    LI S2, 10
; Spill live registers before call
; Spill const_f14_op15_10 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 157
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
    LI T5, 5
; Spill live registers before call
; Spill const_f14_op16_5 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 158
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T5, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    LI T2, 3
    LOAD S3, GP, T2
; Spill live registers before call
; Spill load_f14_op17_t10_addr to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 159
    STORE T2, SB, SC
; Spill t10 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 160
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Call function print_num
    CALL print_num
    LI T7, 10
; Spill live registers before call
; Spill const_f14_op19_10 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 161
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    LI T6, 95
; Spill live registers before call
; Spill const_f14_op20_95 to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 162
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T6, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T1, FP, R0
    ADDI T1, T1, 10
    LI S0, 0
    STORE S0, SB, T1
; Spill live registers before call
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T1, R0
    ADD A1, SB, R0
; Call function test_evil_pointers
    CALL test_evil_pointers
    LI S1, 109
; Spill live registers before call
; Spill const_f14_op22_109 to slot 19
    ADD SC, FP, R0
    ADDI SC, SC, 163
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S1, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T4, FP, R0
    ADDI T4, T4, 11
    ADD T3, T4, R0
    LI T0, 65
    STORE T0, SB, T3
; Recompute alloca t12 at FP+11
    ADD S2, FP, R0
    ADDI S2, S2, 11
    ADDI T5, S2, 1
    LI T2, 66
    STORE T2, SB, T5
; Recompute alloca t12 at FP+11
    ADD S3, FP, R0
    ADDI S3, S3, 11
    ADDI T7, S3, 2
    LI T6, 67
    STORE T6, SB, T7
; Recompute alloca t12 at FP+11
    ADD S0, FP, R0
    ADDI S0, S0, 11
    ADDI T1, S0, 3
    LI S1, 68
    STORE S1, SB, T1
; Recompute alloca t12 at FP+11
    ADD T4, FP, R0
    ADDI T4, T4, 11
    ADDI T0, T4, 4
    LI S2, 0
    STORE S2, SB, T0
    ADD T2, FP, R0
    ADDI T2, T2, 16
    LI S3, 2
    STORE S3, SB, T2
    ADD T6, FP, R0
    ADDI T6, T6, 17
    LOAD S0, SB, T2
    LI S1, 1
    ADD S0, S0, S1
; Recompute alloca t12 at FP+11
    ADD T4, FP, R0
    ADDI T4, T4, 11
    ADD S3, S0, R0
    ADD S2, T4, S3
; Runtime bank overflow calculation for dynamic GEP
; Spill t13 to slot 20
    ADD SC, FP, R0
    ADDI SC, SC, 164
    STORE T3, SB, SC
    LI T3, 4096
    DIV S1, S2, T3
; Spill t14 to slot 21
    ADD SC, FP, R0
    ADDI SC, SC, 165
    STORE T5, SB, SC
    MOD T5, S2, T3
; Spill t15 to slot 22
    ADD SC, FP, R0
    ADDI SC, SC, 166
    STORE T7, SB, SC
    ADD T7, SB, S1
    ADD S2, T5, R0
    LOAD S3, SB, S2
    STORE S3, SB, T6
    LOAD S1, SB, T6
; Spill live registers before call
; Spill t16 to slot 23
    ADD SC, FP, R0
    ADDI SC, SC, 167
    STORE T1, SB, SC
; Spill t17 to slot 24
    ADD SC, FP, R0
    ADDI SC, SC, 168
    STORE T0, SB, SC
; Spill t21 to slot 25
    ADD SC, FP, R0
    ADDI SC, SC, 169
    STORE S0, SB, SC
; Spill gep_new_bank_f14_op34_t22 to slot 26
    ADD SC, FP, R0
    ADDI SC, SC, 170
    STORE T7, SB, SC
; Spill t22 to slot 27
    ADD SC, FP, R0
    ADDI SC, SC, 171
    STORE S2, SB, SC
; Spill t23 to slot 28
    ADD SC, FP, R0
    ADDI SC, SC, 172
    STORE S3, SB, SC
; Spill t24 to slot 29
    ADD SC, FP, R0
    ADDI SC, SC, 173
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Call function putchar
    CALL putchar
    LI T3, 10
; Spill live registers before call
; Spill const_f14_op37_10 to slot 30
    ADD SC, FP, R0
    ADDI SC, SC, 174
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
    LI T5, 120
; Spill live registers before call
; Spill const_f14_op38_120 to slot 31
    ADD SC, FP, R0
    ADDI SC, SC, 175
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T5, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
; Recompute alloca t12 at FP+11
    ADD T4, FP, R0
    ADDI T4, T4, 11
    LI T1, 4
; Spill live registers before call
; Spill const_f14_op39_4 to slot 32
    ADD SC, FP, R0
    ADDI SC, SC, 176
    STORE T1, SB, SC
; Setting up 2 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T4, R0
    ADD A1, SB, R0
; Arg 1 (scalar) to A2
    ADD A2, T1, R0
; Call function shift_array
    CALL shift_array
; Recompute alloca t12 at FP+11
    ADD T0, FP, R0
    ADDI T0, T0, 11
; Spill live registers before call
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T0, R0
    ADD A1, SB, R0
; Call function puts
    CALL puts
    LI T2, 130
; Spill live registers before call
; Spill const_f14_op40_130 to slot 33
    ADD SC, FP, R0
    ADDI SC, SC, 177
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T2, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD S0, FP, R0
    ADDI S0, S0, 18
    ADD T7, S0, R0
    LI S2, 5
    STORE S2, SB, T7
; Recompute alloca t25 at FP+18
    ADD S3, FP, R0
    ADDI S3, S3, 18
    ADDI T6, S3, 1
    LI S1, 10
    STORE S1, SB, T6
    ADD T3, FP, R0
    ADDI T3, T3, 20
; Recompute alloca t25 at FP+18
    ADD T5, FP, R0
    ADDI T5, T5, 18
    ADD T4, SB, R0
    STORE T5, SB, T3
    ADDI T1, T3, 1
    STORE T4, SB, T1
    LOAD T0, SB, T3
    ADDI T2, T3, 1
    LOAD S0, SB, T2
    ADD S2, T0, R0
    LI S3, 15
    STORE S3, S0, S2
    LOAD S1, SB, T3
    ADDI T1, T3, 1
    LOAD T4, SB, T1
    ADDI T5, S1, 1
    LI T2, 25
    STORE T2, T4, T5
; Recompute alloca t25 at FP+18
    ADD T0, FP, R0
    ADDI T0, T0, 18
    ADD S3, T0, R0
    LOAD T1, SB, S3
    LI S1, 15
    XOR T2, T1, S1
    LI T0, 1
    SLTU T1, T2, T0
; Recompute alloca t25 at FP+18
    ADD T2, FP, R0
    ADDI T2, T2, 18
    ADDI T0, T2, 1
    LOAD S1, SB, T0
    LI T2, 25
; Spill t26 to slot 34
    ADD SC, FP, R0
    ADDI SC, SC, 178
    STORE T7, SB, SC
    XOR T7, S1, T2
; Spill t27 to slot 35
    ADD SC, FP, R0
    ADDI SC, SC, 179
    STORE T6, SB, SC
    LI T6, 1
    SLTU S1, T7, T6
    AND T1, T1, S1
    BEQ T1, R0, L_main_30
; Branch to L_main_30 if condition is false
    BEQ R0, R0, L_main_29
; Unconditional branch to L_main_29 (condition was true)
L_main_29:
    LI T7, 89
; Spill live registers before call
; Spill t30 to slot 36
    ADD SC, FP, R0
    ADDI SC, SC, 180
    STORE S2, SB, SC
; Spill load_f14_op47_t29_bank_val to slot 37
    ADD SC, FP, R0
    ADDI SC, SC, 181
    STORE S0, SB, SC
; Spill t32 to slot 38
    ADD SC, FP, R0
    ADDI SC, SC, 182
    STORE T5, SB, SC
; Spill load_f14_op51_t31_bank_val to slot 39
    ADD SC, FP, R0
    ADDI SC, SC, 183
    STORE T4, SB, SC
; Spill t33 to slot 40
    ADD SC, FP, R0
    ADDI SC, SC, 184
    STORE S3, SB, SC
; Spill t36 to slot 41
    ADD SC, FP, R0
    ADDI SC, SC, 185
    STORE T0, SB, SC
; Spill const_f14_op59_89 to slot 42
    ADD SC, FP, R0
    ADDI SC, SC, 186
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_31
; Unconditional branch to L_main_31
L_main_30:
    LI T6, 78
; Spill live registers before call
; Spill const_f14_op60_78 to slot 43
    ADD SC, FP, R0
    ADDI SC, SC, 187
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_31
; Unconditional branch to L_main_31
L_main_31:
    LI T2, 10
; Spill live registers before call
; Spill const_f14_op61_10 to slot 44
    ADD SC, FP, R0
    ADDI SC, SC, 188
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    LI S1, 142
; Spill live registers before call
; Spill const_f14_op62_142 to slot 45
    ADD SC, FP, R0
    ADDI SC, SC, 189
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S1, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T1, FP, R0
    ADDI T1, T1, 22
    ADD T3, T1, R0
    LI S2, 42
    STORE S2, SB, T3
; Recompute alloca t40 at FP+22
    ADD S0, FP, R0
    ADDI S0, S0, 22
    ADDI T5, S0, 1
    ADD T4, T5, R0
    LI S3, 100
    STORE S3, SB, T4
; Recompute alloca t40 at FP+22
    ADD T0, FP, R0
    ADDI T0, T0, 22
    ADDI T7, T0, 1
    ADDI T6, T7, 1
    LI T2, 200
    STORE T2, SB, T6
; Recompute alloca t40 at FP+22
    ADD S1, FP, R0
    ADDI S1, S1, 22
    ADDI T1, S1, 3
    ADD S2, T1, R0
    LI S0, 84
    STORE S0, SB, S2
; Recompute alloca t40 at FP+22
    ADD T5, FP, R0
    ADDI T5, T5, 22
    ADDI S3, T5, 3
    ADDI T0, S3, 1
    LI T7, 69
    STORE T7, SB, T0
; Recompute alloca t40 at FP+22
    ADD T2, FP, R0
    ADDI T2, T2, 22
    ADDI S1, T2, 3
    ADDI T1, S1, 2
    LI S0, 83
    STORE S0, SB, T1
; Recompute alloca t40 at FP+22
    ADD T5, FP, R0
    ADDI T5, T5, 22
    ADDI S3, T5, 3
    ADDI T7, S3, 3
    LI T2, 84
    STORE T2, SB, T7
; Recompute alloca t40 at FP+22
    ADD S1, FP, R0
    ADDI S1, S1, 22
    ADDI S0, S1, 3
    ADDI T5, S0, 4
    LI S3, 0
    STORE S3, SB, T5
; Recompute alloca t40 at FP+22
    ADD T2, FP, R0
    ADDI T2, T2, 22
    ADDI S1, T2, 1
    ADD S0, S1, R0
    LOAD S3, SB, S0
    LI T2, 100
    XOR S1, S3, T2
; Spill t41 to slot 46
    ADD SC, FP, R0
    ADDI SC, SC, 190
    STORE T3, SB, SC
    LI T3, 1
    SLTU S3, S1, T3
    BEQ S3, R0, L_main_33
; Branch to L_main_33 if condition is false
    BEQ R0, R0, L_main_32
; Unconditional branch to L_main_32 (condition was true)
L_main_32:
    LI S1, 89
; Spill live registers before call
; Spill t43 to slot 47
    ADD SC, FP, R0
    ADDI SC, SC, 191
    STORE T4, SB, SC
; Spill t45 to slot 48
    ADD SC, FP, R0
    ADDI SC, SC, 192
    STORE T6, SB, SC
; Spill t47 to slot 49
    ADD SC, FP, R0
    ADDI SC, SC, 193
    STORE S2, SB, SC
; Spill t49 to slot 50
    ADD SC, FP, R0
    ADDI SC, SC, 194
    STORE T0, SB, SC
; Spill t51 to slot 51
    ADD SC, FP, R0
    ADDI SC, SC, 195
    STORE T1, SB, SC
; Spill t53 to slot 52
    ADD SC, FP, R0
    ADDI SC, SC, 196
    STORE T7, SB, SC
; Spill t55 to slot 53
    ADD SC, FP, R0
    ADDI SC, SC, 197
    STORE T5, SB, SC
; Spill t57 to slot 54
    ADD SC, FP, R0
    ADDI SC, SC, 198
    STORE S0, SB, SC
; Spill const_f14_op74_89 to slot 55
    ADD SC, FP, R0
    ADDI SC, SC, 199
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_34
; Unconditional branch to L_main_34
L_main_33:
    LI T3, 78
; Spill live registers before call
; Spill const_f14_op75_78 to slot 56
    ADD SC, FP, R0
    ADDI SC, SC, 200
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_34
; Unconditional branch to L_main_34
L_main_34:
; Recompute alloca t40 at FP+22
    ADD T2, FP, R0
    ADDI T2, T2, 22
    ADDI S3, T2, 3
; Spill live registers before call
; Spill t60 to slot 57
    ADD SC, FP, R0
    ADDI SC, SC, 201
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S3, R0
    ADD A1, SB, R0
; Call function puts
    CALL puts
    LI T4, 153
; Spill live registers before call
; Spill const_f14_op76_153 to slot 58
    ADD SC, FP, R0
    ADDI SC, SC, 202
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T4, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
; Recompute alloca t40 at FP+22
    ADD T6, FP, R0
    ADDI T6, T6, 22
    ADDI S2, T6, 65
    ADD T0, S2, R0
    ADD T1, T0, R0
    LI T7, 111
    STORE T7, SB, T1
; Recompute alloca t40 at FP+22
    ADD T5, FP, R0
    ADDI T5, T5, 22
    ADDI S0, T5, 65
    ADDI S1, S0, 5
    ADD T3, S1, R0
    LI T2, 222
    STORE T2, SB, T3
; Recompute alloca t40 at FP+22
    ADD S3, FP, R0
    ADDI S3, S3, 22
    ADDI T4, S3, 65
    ADD T6, T4, R0
    ADDI S2, T6, 1
; Recompute alloca t40 at FP+22
    ADD T0, FP, R0
    ADDI T0, T0, 22
    ADDI T7, T0, 65
    ADDI T5, T7, 5
    ADD S0, SB, R0
    STORE T5, SB, S2
    ADDI S1, S2, 1
    STORE S0, SB, S1
; Recompute alloca t40 at FP+22
    ADD T2, FP, R0
    ADDI T2, T2, 22
    ADDI S3, T2, 65
    ADDI T4, S3, 5
    ADDI T6, T4, 3
; Recompute alloca t40 at FP+22
    ADD T0, FP, R0
    ADDI T0, T0, 22
    ADDI T7, T0, 65
    ADD S1, T7, R0
    ADD S0, SB, R0
    STORE S1, SB, T6
    ADDI T5, T6, 1
    STORE S0, SB, T5
; Recompute alloca t40 at FP+22
    ADD T2, FP, R0
    ADDI T2, T2, 22
    ADDI S3, T2, 65
    ADD T4, S3, R0
    ADDI T0, T4, 1
    LOAD T7, SB, T0
    ADDI T5, T0, 1
    LOAD S0, SB, T5
    ADD S1, T7, R0
    LOAD T2, S0, S1
    LI S3, 222
    XOR T4, T2, S3
    LI T5, 1
    SLTU T2, T4, T5
    BEQ T2, R0, L_main_36
; Branch to L_main_36 if condition is false
    BEQ R0, R0, L_main_35
; Unconditional branch to L_main_35 (condition was true)
L_main_35:
    LI T7, 89
; Spill live registers before call
; Spill t63 to slot 59
    ADD SC, FP, R0
    ADDI SC, SC, 203
    STORE T1, SB, SC
; Spill t66 to slot 60
    ADD SC, FP, R0
    ADDI SC, SC, 204
    STORE T3, SB, SC
; Spill t69 to slot 61
    ADD SC, FP, R0
    ADDI SC, SC, 205
    STORE S2, SB, SC
; Spill t74 to slot 62
    ADD SC, FP, R0
    ADDI SC, SC, 206
    STORE T6, SB, SC
; Spill t79 to slot 63
    ADD SC, FP, R0
    ADDI SC, SC, 207
    STORE T0, SB, SC
; Spill t81 to slot 64
    ADD SC, FP, R0
    ADDI SC, SC, 208
    STORE S1, SB, SC
; Spill load_f14_op85_t80_bank_val to slot 65
    ADD SC, FP, R0
    ADDI SC, SC, 209
    STORE S0, SB, SC
; Spill const_f14_op88_89 to slot 66
    ADD SC, FP, R0
    ADDI SC, SC, 210
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_37
; Unconditional branch to L_main_37
L_main_36:
    LI T4, 78
; Spill live registers before call
; Spill const_f14_op89_78 to slot 67
    ADD SC, FP, R0
    ADDI SC, SC, 211
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_37
; Unconditional branch to L_main_37
L_main_37:
    LI T5, 10
; Spill live registers before call
; Spill const_f14_op90_10 to slot 68
    ADD SC, FP, R0
    ADDI SC, SC, 212
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function putchar
    CALL putchar
    LI S3, 167
; Spill live registers before call
; Spill const_f14_op91_167 to slot 69
    ADD SC, FP, R0
    ADDI SC, SC, 213
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S3, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T2, FP, R0
    ADDI T2, T2, 46
    LI T1, 65
    STORE T1, SB, T2
    ADD T3, FP, R0
    ADDI T3, T3, 47
    LOAD S2, SB, T2
    STORE S2, SB, T3
    LOAD T6, SB, T3
; Spill live registers before call
; Spill t86 to slot 70
    ADD SC, FP, R0
    ADDI SC, SC, 214
    STORE S2, SB, SC
; Spill t87 to slot 71
    ADD SC, FP, R0
    ADDI SC, SC, 215
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
    ADD T0, FP, R0
    ADDI T0, T0, 48
    LI S1, 66
    STORE S1, SB, T0
    ADD S0, FP, R0
    ADDI S0, S0, 49
    LOAD T7, SB, T0
    STORE T7, SB, S0
    LOAD T4, SB, S0
    LI T5, 66
    XOR S3, T4, T5
    LI T1, 1
    SLTU T4, S3, T1
    BEQ T4, R0, L_main_39
; Branch to L_main_39 if condition is false
    BEQ R0, R0, L_main_38
; Unconditional branch to L_main_38 (condition was true)
L_main_38:
    LI T2, 89
; Spill live registers before call
; Spill t90 to slot 72
    ADD SC, FP, R0
    ADDI SC, SC, 216
    STORE T7, SB, SC
; Spill const_f14_op100_89 to slot 73
    ADD SC, FP, R0
    ADDI SC, SC, 217
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_40
; Unconditional branch to L_main_40
L_main_39:
    LI S2, 78
; Spill live registers before call
; Spill const_f14_op101_78 to slot 74
    ADD SC, FP, R0
    ADDI SC, SC, 218
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_40
; Unconditional branch to L_main_40
L_main_40:
    LI T3, 10
; Spill live registers before call
; Spill const_f14_op102_10 to slot 75
    ADD SC, FP, R0
    ADDI SC, SC, 219
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
    LI T6, 177
; Spill live registers before call
; Spill const_f14_op103_177 to slot 76
    ADD SC, FP, R0
    ADDI SC, SC, 220
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T6, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD S1, FP, R0
    ADDI S1, S1, 50
    LI S3, 16706
    STORE S3, SB, S1
    ADD T1, FP, R0
    ADDI T1, T1, 51
    ADD T5, SB, R0
    STORE S1, SB, T1
    ADDI T4, T1, 1
    STORE T5, SB, T4
    ADD T0, FP, R0
    ADDI T0, T0, 53
    LOAD S0, SB, T1
    ADDI T7, T1, 1
    LOAD T2, SB, T7
    STORE S0, SB, T0
    ADDI S2, T0, 1
    STORE T2, SB, S2
    ADD T3, FP, R0
    ADDI T3, T3, 55
    LOAD T6, SB, T1
    ADDI S3, T1, 1
    LOAD T4, SB, S3
    STORE T6, SB, T3
    ADDI T5, T3, 1
    STORE T4, SB, T5
    LOAD S1, SB, T0
    ADDI T7, T0, 1
    LOAD S2, SB, T7
    LOAD S0, S2, S1
    LI S3, 16706
    XOR T5, S0, S3
    LI T6, 1
    SLTU S0, T5, T6
    BEQ S0, R0, L_main_42
; Branch to L_main_42 if condition is false
    BEQ R0, R0, L_main_41
; Unconditional branch to L_main_41 (condition was true)
L_main_41:
    LI T7, 89
; Spill live registers before call
; Spill load_f14_op109_t96_bank_val to slot 77
    ADD SC, FP, R0
    ADDI SC, SC, 221
    STORE T2, SB, SC
; Spill load_f14_op113_t98_bank_val to slot 78
    ADD SC, FP, R0
    ADDI SC, SC, 222
    STORE T4, SB, SC
; Spill t99 to slot 79
    ADD SC, FP, R0
    ADDI SC, SC, 223
    STORE S1, SB, SC
; Spill load_f14_op117_t99_bank_val to slot 80
    ADD SC, FP, R0
    ADDI SC, SC, 224
    STORE S2, SB, SC
; Spill const_f14_op120_89 to slot 81
    ADD SC, FP, R0
    ADDI SC, SC, 225
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_43
; Unconditional branch to L_main_43
L_main_42:
    LI T5, 78
; Spill live registers before call
; Spill const_f14_op121_78 to slot 82
    ADD SC, FP, R0
    ADDI SC, SC, 226
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_43
; Unconditional branch to L_main_43
L_main_43:
; Recompute alloca t97 at FP+55
    ADD T6, FP, R0
    ADDI T6, T6, 55
    LOAD S3, SB, T6
    ADDI S0, T6, 1
    LOAD T0, SB, S0
    LOAD T1, T0, S3
; Spill live registers before call
; Spill t102 to slot 83
    ADD SC, FP, R0
    ADDI SC, SC, 227
    STORE S3, SB, SC
; Spill load_f14_op124_t102_bank_val to slot 84
    ADD SC, FP, R0
    ADDI SC, SC, 228
    STORE T0, SB, SC
; Spill t103 to slot 85
    ADD SC, FP, R0
    ADDI SC, SC, 229
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
; Recompute alloca t97 at FP+55
    ADD T3, FP, R0
    ADDI T3, T3, 55
    LOAD T2, SB, T3
    ADDI T4, T3, 1
    LOAD S1, SB, T4
    ADDI S2, T2, 1
    LOAD T7, S1, S2
; Spill live registers before call
; Spill t105 to slot 86
    ADD SC, FP, R0
    ADDI SC, SC, 230
    STORE S2, SB, SC
; Spill load_f14_op127_t104_bank_val to slot 87
    ADD SC, FP, R0
    ADDI SC, SC, 231
    STORE S1, SB, SC
; Spill t106 to slot 88
    ADD SC, FP, R0
    ADDI SC, SC, 232
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    LI T5, 10
; Spill live registers before call
; Spill const_f14_op128_10 to slot 89
    ADD SC, FP, R0
    ADDI SC, SC, 233
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function putchar
    CALL putchar
    LI S0, 190
; Spill live registers before call
; Spill const_f14_op129_190 to slot 90
    ADD SC, FP, R0
    ADDI SC, SC, 234
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S0, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T6, FP, R0
    ADDI T6, T6, 57
    LI S3, 0
    LI T0, 0
    STORE S3, SB, T6
    ADDI T1, T6, 1
    STORE T0, SB, T1
    ADD T4, FP, R0
    ADDI T4, T4, 59
    LI T2, 0
    LI T3, 0
    STORE T2, SB, T4
    ADDI S2, T4, 1
    STORE T3, SB, S2
    LOAD S1, SB, T6
    ADDI T7, T6, 1
    LOAD T5, SB, T7
    LI S0, 0
    XOR T1, S1, S0
    LI T0, 1
    SLTU S1, T1, T0
    BEQ S1, R0, L_main_45
; Branch to L_main_45 if condition is false
    BEQ R0, R0, L_main_44
; Unconditional branch to L_main_44 (condition was true)
L_main_44:
    LI S3, 89
; Spill live registers before call
; Spill load_f14_op138_t109_bank_val to slot 91
    ADD SC, FP, R0
    ADDI SC, SC, 235
    STORE T5, SB, SC
; Spill const_f14_op141_89 to slot 92
    ADD SC, FP, R0
    ADDI SC, SC, 236
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_46
; Unconditional branch to L_main_46
L_main_45:
    LI S2, 78
; Spill live registers before call
; Spill const_f14_op142_78 to slot 93
    ADD SC, FP, R0
    ADDI SC, SC, 237
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_46
; Unconditional branch to L_main_46
L_main_46:
; Recompute alloca t108 at FP+59
    ADD T3, FP, R0
    ADDI T3, T3, 59
    LOAD T2, SB, T3
    ADDI T7, T3, 1
    LOAD T1, SB, T7
    LI T0, 41
    LOAD S0, GP, T0
    ADDI S1, T0, 1
    LOAD T4, GP, S1
    XOR T6, T2, S0
    LI T5, 1
    SLTU T2, T6, T5
    BEQ T2, R0, L_main_48
; Branch to L_main_48 if condition is false
    BEQ R0, R0, L_main_47
; Unconditional branch to L_main_47 (condition was true)
L_main_47:
    LI S3, 89
; Spill live registers before call
; Spill load_f14_op145_t111_bank_val to slot 94
    ADD SC, FP, R0
    ADDI SC, SC, 238
    STORE T1, SB, SC
; Spill load_f14_op146_t112_addr to slot 95
    ADD SC, FP, R0
    ADDI SC, SC, 239
    STORE T0, SB, SC
; Spill load_f14_op149_t112_bank_val to slot 96
    ADD SC, FP, R0
    ADDI SC, SC, 240
    STORE T4, SB, SC
; Spill const_f14_op152_89 to slot 97
    ADD SC, FP, R0
    ADDI SC, SC, 241
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_49
; Unconditional branch to L_main_49
L_main_48:
    LI S2, 78
; Spill live registers before call
; Spill const_f14_op153_78 to slot 98
    ADD SC, FP, R0
    ADDI SC, SC, 242
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_49
; Unconditional branch to L_main_49
L_main_49:
    ADD T7, FP, R0
    ADDI T7, T7, 61
    LI S1, 123
    STORE S1, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 62
    ADD T5, SB, R0
    STORE T7, SB, T6
    ADDI S0, T6, 1
    STORE T5, SB, S0
    LOAD T2, SB, T6
    ADDI T3, T6, 1
    LOAD T1, SB, T3
    LI T0, 0
    XOR T4, T2, T0
    LI S3, 0
    SLTU T2, S3, T4
    BEQ T2, R0, L_main_51
; Branch to L_main_51 if condition is false
    BEQ R0, R0, L_main_50
; Unconditional branch to L_main_50 (condition was true)
L_main_50:
    LI S2, 89
; Spill live registers before call
; Spill load_f14_op159_t116_bank_val to slot 99
    ADD SC, FP, R0
    ADDI SC, SC, 243
    STORE T1, SB, SC
; Spill const_f14_op162_89 to slot 100
    ADD SC, FP, R0
    ADDI SC, SC, 244
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_52
; Unconditional branch to L_main_52
L_main_51:
    LI S1, 78
; Spill live registers before call
; Spill const_f14_op163_78 to slot 101
    ADD SC, FP, R0
    ADDI SC, SC, 245
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_52
; Unconditional branch to L_main_52
L_main_52:
    LI S0, 10
; Spill live registers before call
; Spill const_f14_op164_10 to slot 102
    ADD SC, FP, R0
    ADDI SC, SC, 246
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Call function putchar
    CALL putchar
    LI T5, 200
; Spill live registers before call
; Spill const_f14_op165_200 to slot 103
    ADD SC, FP, R0
    ADDI SC, SC, 247
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T5, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T7, FP, R0
    ADDI T7, T7, 64
    ADD T3, FP, R0
    ADDI T3, T3, 74
    LI T4, 0
    STORE T4, SB, T3
    BEQ R0, R0, L_main_53
; Unconditional branch to L_main_53
L_main_53:
; Recompute alloca t119 at FP+74
    ADD S3, FP, R0
    ADDI S3, S3, 74
    LOAD T0, SB, S3
    LI T2, 10
    SLT T0, T0, T2
    BEQ T0, R0, L_main_56
; Branch to L_main_56 if condition is false
    BEQ R0, R0, L_main_54
; Unconditional branch to L_main_54 (condition was true)
L_main_54:
; Recompute alloca t119 at FP+74
    ADD T6, FP, R0
    ADDI T6, T6, 74
    LOAD T1, SB, T6
; Recompute alloca t118 at FP+64
    ADD S2, FP, R0
    ADDI S2, S2, 64
    ADD S0, T1, R0
    ADD S1, S2, S0
; Runtime bank overflow calculation for dynamic GEP
    LI T4, 4096
    DIV T5, S1, T4
    MOD T3, S1, T4
    ADD T7, SB, T5
    ADD S1, T3, R0
    LOAD T2, SB, T6
    LI T0, 10
    MUL T2, T2, T0
    STORE T2, SB, S1
    BEQ R0, R0, L_main_55
; Unconditional branch to L_main_55
L_main_55:
; Recompute alloca t119 at FP+74
    ADD S3, FP, R0
    ADDI S3, S3, 74
    LOAD S0, SB, S3
    LI T5, 1
    ADD S0, S0, T5
    STORE S0, SB, S3
    BEQ R0, R0, L_main_53
; Unconditional branch to L_main_53
L_main_56:
    ADD T4, FP, R0
    ADDI T4, T4, 75
; Recompute alloca t118 at FP+64
    ADD T3, FP, R0
    ADDI T3, T3, 64
    ADD S2, T3, R0
    ADD T0, SB, R0
    STORE S2, SB, T4
    ADDI T6, T4, 1
    STORE T0, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 77
    LOAD S3, SB, T4
    ADDI T3, T4, 1
    LOAD T6, SB, T3
    ADDI T0, S3, 5
    STORE T0, SB, T5
    ADDI S2, T5, 1
    STORE T6, SB, S2
    ADD T3, FP, R0
    ADDI T3, T3, 79
    LOAD S3, SB, T5
    ADDI S2, T5, 1
    LOAD T0, SB, S2
    LI S2, 0
; Spill t122 to slot 104
    ADD SC, FP, R0
    ADDI SC, SC, 248
    STORE T1, SB, SC
    LI T1, 2
    SUB S2, S2, T1
; Spill gep_new_bank_f14_op173_t123 to slot 105
    ADD SC, FP, R0
    ADDI SC, SC, 249
    STORE T7, SB, SC
    ADD T7, S2, R0
    ADD T1, S3, T7
; Runtime bank overflow calculation for dynamic GEP
; Spill t125 to slot 106
    ADD SC, FP, R0
    ADDI SC, SC, 250
    STORE T2, SB, SC
; Spill t123 to slot 107
    ADD SC, FP, R0
    ADDI SC, SC, 251
    STORE S1, SB, SC
    LI S1, 4096
    DIV T2, T1, S1
; Spill t127 to slot 108
    ADD SC, FP, R0
    ADDI SC, SC, 252
    STORE S0, SB, SC
    MOD S0, T1, S1
    ADD T4, T0, T2
    ADD T1, S0, R0
    STORE T1, SB, T3
    ADDI T7, T3, 1
    STORE T4, SB, T7
    LOAD T2, SB, T5
    ADDI S1, T5, 1
    LOAD S0, SB, S1
    LOAD S3, S0, T2
    LI T7, 50
    XOR T1, S3, T7
    LI S1, 1
    SLTU S3, T1, S1
    BEQ S3, R0, L_main_58
; Branch to L_main_58 if condition is false
    BEQ R0, R0, L_main_57
; Unconditional branch to L_main_57 (condition was true)
L_main_57:
    LI T1, 89
; Spill live registers before call
; Spill load_f14_op180_t131_bank_val to slot 109
    ADD SC, FP, R0
    ADDI SC, SC, 253
    STORE T6, SB, SC
; Spill t135 to slot 110
    ADD SC, FP, R0
    ADDI SC, SC, 254
    STORE S2, SB, SC
; Spill load_f14_op184_t134_bank_val to slot 111
    ADD SC, FP, R0
    ADDI SC, SC, 255
    STORE T0, SB, SC
; Spill gep_new_bank_f14_op189_t136 to slot 112
    ADD SC, FP, R0
    ADDI SC, SC, 256
    STORE T4, SB, SC
; Spill t137 to slot 113
    ADD SC, FP, R0
    ADDI SC, SC, 257
    STORE T2, SB, SC
; Spill load_f14_op193_t137_bank_val to slot 114
    ADD SC, FP, R0
    ADDI SC, SC, 258
    STORE S0, SB, SC
; Spill const_f14_op196_89 to slot 115
    ADD SC, FP, R0
    ADDI SC, SC, 259
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_59
; Unconditional branch to L_main_59
L_main_58:
    LI S1, 78
; Spill live registers before call
; Spill const_f14_op197_78 to slot 116
    ADD SC, FP, R0
    ADDI SC, SC, 260
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_59
; Unconditional branch to L_main_59
L_main_59:
; Recompute alloca t133 at FP+79
    ADD T7, FP, R0
    ADDI T7, T7, 79
    LOAD S3, SB, T7
    ADDI T3, T7, 1
    LOAD T5, SB, T3
    LOAD T6, T5, S3
    LI S2, 30
    XOR T0, T6, S2
    LI T4, 1
    SLTU T6, T0, T4
    BEQ T6, R0, L_main_61
; Branch to L_main_61 if condition is false
    BEQ R0, R0, L_main_60
; Unconditional branch to L_main_60 (condition was true)
L_main_60:
    LI T2, 89
; Spill live registers before call
; Spill t140 to slot 117
    ADD SC, FP, R0
    ADDI SC, SC, 261
    STORE S3, SB, SC
; Spill load_f14_op200_t140_bank_val to slot 118
    ADD SC, FP, R0
    ADDI SC, SC, 262
    STORE T5, SB, SC
; Spill const_f14_op203_89 to slot 119
    ADD SC, FP, R0
    ADDI SC, SC, 263
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_62
; Unconditional branch to L_main_62
L_main_61:
    LI S0, 78
; Spill live registers before call
; Spill const_f14_op204_78 to slot 120
    ADD SC, FP, R0
    ADDI SC, SC, 264
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_62
; Unconditional branch to L_main_62
L_main_62:
    ADD T1, FP, R0
    ADDI T1, T1, 81
; Recompute alloca t130 at FP+77
    ADD S1, FP, R0
    ADDI S1, S1, 77
    LOAD T3, SB, S1
    ADDI T0, S1, 1
    LOAD T4, SB, T0
; Recompute alloca t128 at FP+75
    ADD S2, FP, R0
    ADDI S2, S2, 75
    LOAD T6, SB, S2
    ADDI T7, S2, 1
    LOAD S3, SB, T7
    SUB T3, T3, T6
    LI T5, 1
    DIV T3, T3, T5
    STORE T3, SB, T1
    LOAD T2, SB, T1
; Spill live registers before call
; Spill load_f14_op207_t144_bank_val to slot 121
    ADD SC, FP, R0
    ADDI SC, SC, 265
    STORE T4, SB, SC
; Spill load_f14_op210_t145_bank_val to slot 122
    ADD SC, FP, R0
    ADDI SC, SC, 266
    STORE S3, SB, SC
; Spill t147 to slot 123
    ADD SC, FP, R0
    ADDI SC, SC, 267
    STORE T3, SB, SC
; Spill t148 to slot 124
    ADD SC, FP, R0
    ADDI SC, SC, 268
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function print_digit
    CALL print_digit
    LI S0, 10
; Spill live registers before call
; Spill const_f14_op212_10 to slot 125
    ADD SC, FP, R0
    ADDI SC, SC, 269
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Call function putchar
    CALL putchar
    LI T0, 214
; Spill live registers before call
; Spill const_f14_op213_214 to slot 126
    ADD SC, FP, R0
    ADDI SC, SC, 270
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T0, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
; Recompute alloca t130 at FP+77
    ADD T7, FP, R0
    ADDI T7, T7, 77
    LOAD T6, SB, T7
    ADDI T5, T7, 1
    LOAD S1, SB, T5
; Recompute alloca t128 at FP+75
    ADD T4, FP, R0
    ADDI T4, T4, 75
    LOAD S2, SB, T4
    ADDI S3, T4, 1
    LOAD T3, SB, S3
    SLT T6, S2, T6
    BEQ T6, R0, L_main_64
; Branch to L_main_64 if condition is false
    BEQ R0, R0, L_main_63
; Unconditional branch to L_main_63 (condition was true)
L_main_63:
    LI T1, 89
; Spill live registers before call
; Spill load_f14_op216_t149_bank_val to slot 127
    ADD SC, FP, R0
    ADDI SC, SC, 271
    STORE S1, SB, SC
; Spill load_f14_op219_t150_bank_val to slot 128
    ADD SC, FP, R0
    ADDI SC, SC, 272
    STORE T3, SB, SC
; Spill const_f14_op220_89 to slot 129
    ADD SC, FP, R0
    ADDI SC, SC, 273
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_65
; Unconditional branch to L_main_65
L_main_64:
    LI T2, 78
; Spill live registers before call
; Spill const_f14_op221_78 to slot 130
    ADD SC, FP, R0
    ADDI SC, SC, 274
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_65
; Unconditional branch to L_main_65
L_main_65:
; Recompute alloca t133 at FP+79
    ADD S0, FP, R0
    ADDI S0, S0, 79
    LOAD T0, SB, S0
    ADDI T5, S0, 1
    LOAD S3, SB, T5
; Recompute alloca t130 at FP+77
    ADD S2, FP, R0
    ADDI S2, S2, 77
    LOAD T6, SB, S2
    ADDI T4, S2, 1
    LOAD T7, SB, T4
    SLT T0, T0, T6
    BEQ T0, R0, L_main_67
; Branch to L_main_67 if condition is false
    BEQ R0, R0, L_main_66
; Unconditional branch to L_main_66 (condition was true)
L_main_66:
    LI S1, 89
; Spill live registers before call
; Spill load_f14_op224_t152_bank_val to slot 131
    ADD SC, FP, R0
    ADDI SC, SC, 275
    STORE S3, SB, SC
; Spill load_f14_op227_t153_bank_val to slot 132
    ADD SC, FP, R0
    ADDI SC, SC, 276
    STORE T7, SB, SC
; Spill const_f14_op228_89 to slot 133
    ADD SC, FP, R0
    ADDI SC, SC, 277
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_68
; Unconditional branch to L_main_68
L_main_67:
    LI T3, 78
; Spill live registers before call
; Spill const_f14_op229_78 to slot 134
    ADD SC, FP, R0
    ADDI SC, SC, 278
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_68
; Unconditional branch to L_main_68
L_main_68:
; Recompute alloca t128 at FP+75
    ADD T1, FP, R0
    ADDI T1, T1, 75
    LOAD T2, SB, T1
    ADDI T5, T1, 1
    LOAD T4, SB, T5
; Recompute alloca t133 at FP+79
    ADD T6, FP, R0
    ADDI T6, T6, 79
    LOAD T0, SB, T6
    ADDI S0, T6, 1
    LOAD S2, SB, S0
    SLT S3, T0, T2
    LI T7, 1
    SUB T2, T7, S3
    LOAD S1, SB, T6
    ADDI T3, T6, 1
    LOAD T5, SB, T3
; Recompute alloca t130 at FP+77
    ADD S0, FP, R0
    ADDI S0, S0, 77
    LOAD S3, SB, S0
    ADDI T7, S0, 1
    LOAD T0, SB, T7
    SLT T3, S3, S1
    LI T7, 1
    SUB S1, T7, T3
    AND T2, T2, S1
    BEQ T2, R0, L_main_70
; Branch to L_main_70 if condition is false
    BEQ R0, R0, L_main_69
; Unconditional branch to L_main_69 (condition was true)
L_main_69:
    LI T3, 89
; Spill live registers before call
; Spill load_f14_op232_t155_bank_val to slot 135
    ADD SC, FP, R0
    ADDI SC, SC, 279
    STORE T4, SB, SC
; Spill load_f14_op235_t156_bank_val to slot 136
    ADD SC, FP, R0
    ADDI SC, SC, 280
    STORE S2, SB, SC
; Spill load_f14_op240_t158_bank_val to slot 137
    ADD SC, FP, R0
    ADDI SC, SC, 281
    STORE T5, SB, SC
; Spill load_f14_op243_t159_bank_val to slot 138
    ADD SC, FP, R0
    ADDI SC, SC, 282
    STORE T0, SB, SC
; Spill const_f14_op246_89 to slot 139
    ADD SC, FP, R0
    ADDI SC, SC, 283
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_71
; Unconditional branch to L_main_71
L_main_70:
    LI T7, 78
; Spill live registers before call
; Spill const_f14_op247_78 to slot 140
    ADD SC, FP, R0
    ADDI SC, SC, 284
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_71
; Unconditional branch to L_main_71
L_main_71:
    LI S3, 10
; Spill live registers before call
; Spill const_f14_op248_10 to slot 141
    ADD SC, FP, R0
    ADDI SC, SC, 285
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Call function putchar
    CALL putchar
    LI S1, 226
; Spill live registers before call
; Spill const_f14_op249_226 to slot 142
    ADD SC, FP, R0
    ADDI SC, SC, 286
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S1, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T2, FP, R0
    ADDI T2, T2, 82
    LI T1, 5
    STORE T1, SB, T2
    ADD T6, FP, R0
    ADDI T6, T6, 83
    LI S0, 3
    STORE S0, SB, T6
    LOAD T4, SB, T2
    LOAD S2, SB, T6
    SLT T4, S2, T4
    BEQ T4, R0, L_main_73
; Branch to L_main_73 if condition is false
    BEQ R0, R0, L_main_72
; Unconditional branch to L_main_72 (condition was true)
L_main_72:
    LI T5, 89
; Spill live registers before call
; Spill const_f14_op254_89 to slot 143
    ADD SC, FP, R0
    ADDI SC, SC, 287
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_74
; Unconditional branch to L_main_74
L_main_73:
    LI T0, 78
; Spill live registers before call
; Spill const_f14_op255_78 to slot 144
    ADD SC, FP, R0
    ADDI SC, SC, 288
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_74
; Unconditional branch to L_main_74
L_main_74:
; Recompute alloca t162 at FP+82
    ADD T3, FP, R0
    ADDI T3, T3, 82
    LOAD T7, SB, T3
    LI S3, 0
    SLT T7, S3, T7
; Recompute alloca t163 at FP+83
    ADD S1, FP, R0
    ADDI S1, S1, 83
    LOAD T1, SB, S1
    LI S0, 0
    SLT T1, S0, T1
    AND T7, T7, T1
    LOAD S2, SB, T3
    LOAD T4, SB, S1
    SLT S2, T4, S2
    AND T7, T7, S2
    BEQ T7, R0, L_main_76
; Branch to L_main_76 if condition is false
    BEQ R0, R0, L_main_75
; Unconditional branch to L_main_75 (condition was true)
L_main_75:
    LI T2, 89
; Spill live registers before call
; Spill const_f14_op260_89 to slot 145
    ADD SC, FP, R0
    ADDI SC, SC, 289
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_77
; Unconditional branch to L_main_77
L_main_76:
    LI T6, 78
; Spill live registers before call
; Spill const_f14_op261_78 to slot 146
    ADD SC, FP, R0
    ADDI SC, SC, 290
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_77
; Unconditional branch to L_main_77
L_main_77:
; Recompute alloca t162 at FP+82
    ADD T5, FP, R0
    ADDI T5, T5, 82
    LOAD T0, SB, T5
    LI S3, 0
    SLT T0, T0, S3
; Recompute alloca t163 at FP+83
    ADD S0, FP, R0
    ADDI S0, S0, 83
    LOAD T1, SB, S0
    LI T4, 0
    SLT T1, T1, T4
    OR T0, T0, T1
    LOAD S2, SB, T5
    LI T7, 5
    XOR T3, S2, T7
    LI S1, 1
    SLTU S2, T3, S1
    OR T0, T0, S2
    BEQ T0, R0, L_main_79
; Branch to L_main_79 if condition is false
    BEQ R0, R0, L_main_78
; Unconditional branch to L_main_78 (condition was true)
L_main_78:
    LI T2, 89
; Spill live registers before call
; Spill const_f14_op267_89 to slot 147
    ADD SC, FP, R0
    ADDI SC, SC, 291
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_80
; Unconditional branch to L_main_80
L_main_79:
    LI T6, 78
; Spill live registers before call
; Spill const_f14_op268_78 to slot 148
    ADD SC, FP, R0
    ADDI SC, SC, 292
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_80
; Unconditional branch to L_main_80
L_main_80:
    LI S3, 10
; Spill live registers before call
; Spill const_f14_op269_10 to slot 149
    ADD SC, FP, R0
    ADDI SC, SC, 293
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Call function putchar
    CALL putchar
    LI T4, 237
; Spill live registers before call
; Spill const_f14_op270_237 to slot 150
    ADD SC, FP, R0
    ADDI SC, SC, 294
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T4, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T1, FP, R0
    ADDI T1, T1, 84
    LI T3, 10
    LI S1, 20
    LI T7, 3
; Spill live registers before call
; Spill const_f14_op271_10 to slot 151
    ADD SC, FP, R0
    ADDI SC, SC, 295
    STORE T3, SB, SC
; Spill const_f14_op272_20 to slot 152
    ADD SC, FP, R0
    ADDI SC, SC, 296
    STORE S1, SB, SC
; Spill const_f14_op273_3 to slot 153
    ADD SC, FP, R0
    ADDI SC, SC, 297
    STORE T7, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Arg 1 (scalar) to A1
    ADD A1, S1, R0
; Arg 2 (scalar) to A2
    ADD A2, T7, R0
; Call function complex_calc
    CALL complex_calc
; Scalar return value for t185
; Recompute alloca t184 at FP+84
    ADD S2, FP, R0
    ADDI S2, S2, 84
    STORE RV0, SB, S2
    LOAD T0, SB, S2
; Spill live registers before call
; Spill t185 to slot 154
    ADD SC, FP, R0
    ADDI SC, SC, 298
    STORE RV0, SB, SC
; Spill t186 to slot 155
    ADD SC, FP, R0
    ADDI SC, SC, 299
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function print_num
    CALL print_num
    LI T5, 10
; Spill live registers before call
; Spill const_f14_op275_10 to slot 156
    ADD SC, FP, R0
    ADDI SC, SC, 300
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function putchar
    CALL putchar
    LI S0, 247
; Spill live registers before call
; Spill const_f14_op276_247 to slot 157
    ADD SC, FP, R0
    ADDI SC, SC, 301
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S0, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T2, FP, R0
    ADDI T2, T2, 85
    LI T6, 5
; Spill live registers before call
; Spill const_f14_op277_5 to slot 158
    ADD SC, FP, R0
    ADDI SC, SC, 302
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function factorial
    CALL factorial
; Scalar return value for t188
; Recompute alloca t187 at FP+85
    ADD S3, FP, R0
    ADDI S3, S3, 85
    STORE RV0, SB, S3
    LOAD T4, SB, S3
; Spill live registers before call
; Spill t188 to slot 159
    ADD SC, FP, R0
    ADDI SC, SC, 303
    STORE RV0, SB, SC
; Spill t189 to slot 160
    ADD SC, FP, R0
    ADDI SC, SC, 304
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Call function print_num
    CALL print_num
    LI T1, 10
; Spill live registers before call
; Spill const_f14_op279_10 to slot 161
    ADD SC, FP, R0
    ADDI SC, SC, 305
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
    LI T3, 258
; Spill live registers before call
; Spill const_f14_op280_258 to slot 162
    ADD SC, FP, R0
    ADDI SC, SC, 306
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T3, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD S1, FP, R0
    ADDI S1, S1, 86
    LI T7, 271
    ADD S2, GP, R0
    STORE T7, SB, S1
    ADDI T0, S1, 1
    STORE S2, SB, T0
    ADD T5, FP, R0
    ADDI T5, T5, 88
    LOAD S0, SB, S1
    ADDI T2, S1, 1
    LOAD T6, SB, T2
    STORE S0, SB, T5
    ADDI RV0, T5, 1
    STORE T6, SB, RV0
    BEQ R0, R0, L_main_81
; Unconditional branch to L_main_81
L_main_81:
; Recompute alloca t191 at FP+88
    ADD S3, FP, R0
    ADDI S3, S3, 88
    LOAD T4, SB, S3
    ADDI T1, S3, 1
    LOAD T3, SB, T1
    LOAD T0, T3, T4
    BEQ T0, R0, L_main_83
; Branch to L_main_83 if condition is false
    BEQ R0, R0, L_main_82
; Unconditional branch to L_main_82 (condition was true)
L_main_82:
; Recompute alloca t191 at FP+88
    ADD S2, FP, R0
    ADDI S2, S2, 88
    LOAD T7, SB, S2
    ADDI T2, S2, 1
    LOAD RV0, SB, T2
    LOAD S0, RV0, T7
; Spill live registers before call
; Spill load_f14_op286_t192_bank_val to slot 163
    ADD SC, FP, R0
    ADDI SC, SC, 307
    STORE T6, SB, SC
; Spill t193 to slot 164
    ADD SC, FP, R0
    ADDI SC, SC, 308
    STORE T4, SB, SC
; Spill load_f14_op290_t193_bank_val to slot 165
    ADD SC, FP, R0
    ADDI SC, SC, 309
    STORE T3, SB, SC
; Spill t195 to slot 166
    ADD SC, FP, R0
    ADDI SC, SC, 310
    STORE T7, SB, SC
; Spill load_f14_op293_t195_bank_val to slot 167
    ADD SC, FP, R0
    ADDI SC, SC, 311
    STORE RV0, SB, SC
; Spill t196 to slot 168
    ADD SC, FP, R0
    ADDI SC, SC, 312
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Call function putchar
    CALL putchar
; Recompute alloca t191 at FP+88
    ADD T5, FP, R0
    ADDI T5, T5, 88
    LOAD S1, SB, T5
    ADDI T1, T5, 1
    LOAD T0, SB, T1
    ADDI S3, S1, 1
    STORE S3, SB, T5
    ADDI T2, T5, 1
    STORE T0, SB, T2
    BEQ R0, R0, L_main_81
; Unconditional branch to L_main_81
L_main_83:
    LI T6, 10
; Spill live registers before call
; Spill load_f14_op296_t197_bank_val to slot 169
    ADD SC, FP, R0
    ADDI SC, SC, 313
    STORE T0, SB, SC
; Spill const_f14_op298_10 to slot 170
    ADD SC, FP, R0
    ADDI SC, SC, 314
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
    ADD T4, FP, R0
    ADDI T4, T4, 90
    ADD T3, T4, R0
    LI S2, 73
    STORE S2, SB, T3
; Recompute alloca t199 at FP+90
    ADD T7, FP, R0
    ADDI T7, T7, 90
    ADDI RV0, T7, 1
    LI S0, 78
    STORE S0, SB, RV0
; Recompute alloca t199 at FP+90
    ADD T1, FP, R0
    ADDI T1, T1, 90
    ADDI S1, T1, 2
    LI T2, 73
    STORE T2, SB, S1
; Recompute alloca t199 at FP+90
    ADD S3, FP, R0
    ADDI S3, S3, 90
    ADDI T5, S3, 3
    LI T0, 84
    STORE T0, SB, T5
; Recompute alloca t199 at FP+90
    ADD T6, FP, R0
    ADDI T6, T6, 90
    ADDI T4, T6, 4
    LI S2, 0
    STORE S2, SB, T4
; Recompute alloca t199 at FP+90
    ADD T7, FP, R0
    ADDI T7, T7, 90
; Spill live registers before call
; Spill t200 to slot 171
    ADD SC, FP, R0
    ADDI SC, SC, 315
    STORE T3, SB, SC
; Spill t201 to slot 172
    ADD SC, FP, R0
    ADDI SC, SC, 316
    STORE RV0, SB, SC
; Spill t202 to slot 173
    ADD SC, FP, R0
    ADDI SC, SC, 317
    STORE S1, SB, SC
; Spill t203 to slot 174
    ADD SC, FP, R0
    ADDI SC, SC, 318
    STORE T5, SB, SC
; Spill t204 to slot 175
    ADD SC, FP, R0
    ADDI SC, SC, 319
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T7, R0
    ADD A1, SB, R0
; Call function puts
    CALL puts
    LI S0, 277
; Spill live registers before call
; Spill const_f14_op304_277 to slot 176
    ADD SC, FP, R0
    ADDI SC, SC, 320
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S0, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T1, FP, R0
    ADDI T1, T1, 92
    LI T2, 0
    STORE T2, SB, T1
    BEQ R0, R0, L_main_84
; Unconditional branch to L_main_84
L_main_84:
; Recompute alloca t205 at FP+92
    ADD S3, FP, R0
    ADDI S3, S3, 92
    LOAD T0, SB, S3
    LI T6, 5
    SLT T0, T0, T6
    BEQ T0, R0, L_main_87
; Branch to L_main_87 if condition is false
    BEQ R0, R0, L_main_85
; Unconditional branch to L_main_85 (condition was true)
L_main_85:
; Recompute alloca t205 at FP+92
    ADD S2, FP, R0
    ADDI S2, S2, 92
    LOAD T3, SB, S2
    LI RV0, 48
    ADD RV0, RV0, T3
; Spill live registers before call
; Spill t209 to slot 177
    ADD SC, FP, R0
    ADDI SC, SC, 321
    STORE RV0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, RV0, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_86
; Unconditional branch to L_main_86
L_main_86:
; Recompute alloca t205 at FP+92
    ADD S1, FP, R0
    ADDI S1, S1, 92
    LOAD T5, SB, S1
    LI T4, 1
    ADD T5, T5, T4
    STORE T5, SB, S1
    BEQ R0, R0, L_main_84
; Unconditional branch to L_main_84
L_main_87:
    LI T7, 10
; Spill live registers before call
; Spill t211 to slot 178
    ADD SC, FP, R0
    ADDI SC, SC, 322
    STORE T5, SB, SC
; Spill const_f14_op309_10 to slot 179
    ADD SC, FP, R0
    ADDI SC, SC, 323
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    LI S0, 286
; Spill live registers before call
; Spill const_f14_op310_286 to slot 180
    ADD SC, FP, R0
    ADDI SC, SC, 324
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S0, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    LI T2, 0
; Recompute alloca t119 at FP+74
    ADD T1, FP, R0
    ADDI T1, T1, 74
    STORE T2, SB, T1
    BEQ R0, R0, L_main_88
; Unconditional branch to L_main_88
L_main_88:
    LI T6, 1
    BEQ T6, R0, L_main_90
; Branch to L_main_90 if condition is false
    BEQ R0, R0, L_main_89
; Unconditional branch to L_main_89 (condition was true)
L_main_89:
; Recompute alloca t119 at FP+74
    ADD T0, FP, R0
    ADDI T0, T0, 74
    LOAD S3, SB, T0
    LI T3, 3
    SLT S2, S3, T3
    LI RV0, 1
    SUB S3, RV0, S2
    BEQ S3, R0, L_main_93
; Branch to L_main_93 if condition is false
    BEQ R0, R0, L_main_91
; Unconditional branch to L_main_91 (condition was true)
L_main_91:
    BEQ R0, R0, L_main_90
; Unconditional branch to L_main_90
    BEQ R0, R0, L_main_93
; Unconditional branch to L_main_93
L_main_93:
    LI T4, 66
; Spill live registers before call
; Spill const_f14_op315_66 to slot 181
    ADD SC, FP, R0
    ADDI SC, SC, 325
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Call function putchar
    CALL putchar
; Recompute alloca t119 at FP+74
    ADD S1, FP, R0
    ADDI S1, S1, 74
    LOAD T5, SB, S1
    LI T7, 48
    ADD T7, T7, T5
; Spill live registers before call
; Spill t215 to slot 182
    ADD SC, FP, R0
    ADDI SC, SC, 326
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
; Recompute alloca t119 at FP+74
    ADD S0, FP, R0
    ADDI S0, S0, 74
    LOAD T2, SB, S0
    LI T1, 1
    ADD T2, T2, T1
    STORE T2, SB, S0
    BEQ R0, R0, L_main_88
; Unconditional branch to L_main_88
L_main_90:
    LI T6, 10
; Spill live registers before call
; Spill t217 to slot 183
    ADD SC, FP, R0
    ADDI SC, SC, 327
    STORE T2, SB, SC
; Spill const_f14_op318_10 to slot 184
    ADD SC, FP, R0
    ADDI SC, SC, 328
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
    LI S2, 297
; Spill live registers before call
; Spill const_f14_op319_297 to slot 185
    ADD SC, FP, R0
    ADDI SC, SC, 329
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S2, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD RV0, FP, R0
    ADDI RV0, RV0, 93
    LI T3, 5
    STORE T3, SB, RV0
    LOAD S3, SB, RV0
    LI T0, 0
    SUB T0, T0, S3
    STORE T0, SB, RV0
    LOAD T4, SB, RV0
    LI T5, -1
    XOR T4, T4, T5
    STORE T4, SB, RV0
    LOAD S1, SB, RV0
    LI T7, 0
    XOR T1, S1, T7
    LI S0, 1
    SLTU S1, T1, S0
    STORE S1, SB, RV0
    LOAD T2, SB, RV0
    LI T6, 0
    XOR S2, T2, T6
    LI T3, 1
    SLTU T2, S2, T3
    STORE T2, SB, RV0
    LOAD S3, SB, RV0
; Spill live registers before call
; Spill t220 to slot 186
    ADD SC, FP, R0
    ADDI SC, SC, 330
    STORE T0, SB, SC
; Spill t222 to slot 187
    ADD SC, FP, R0
    ADDI SC, SC, 331
    STORE T4, SB, SC
; Spill t224 to slot 188
    ADD SC, FP, R0
    ADDI SC, SC, 332
    STORE S1, SB, SC
; Spill t226 to slot 189
    ADD SC, FP, R0
    ADDI SC, SC, 333
    STORE T2, SB, SC
; Spill t227 to slot 190
    ADD SC, FP, R0
    ADDI SC, SC, 334
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Call function print_digit
    CALL print_digit
    LI T5, 10
; Spill live registers before call
; Spill const_f14_op330_10 to slot 191
    ADD SC, FP, R0
    ADDI SC, SC, 335
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function putchar
    CALL putchar
    LI T1, 308
; Spill live registers before call
; Spill const_f14_op331_308 to slot 192
    ADD SC, FP, R0
    ADDI SC, SC, 336
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T1, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD S0, FP, R0
    ADDI S0, S0, 94
    LI T7, 0
    STORE T7, SB, S0
    LI S2, 68
; Spill live registers before call
; Spill const_f14_op333_68 to slot 193
    ADD SC, FP, R0
    ADDI SC, SC, 337
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
; Recompute alloca t228 at FP+94
    ADD T3, FP, R0
    ADDI T3, T3, 94
    LOAD T6, SB, T3
    LI T0, 48
    ADD T0, T0, T6
; Spill live registers before call
; Spill t230 to slot 194
    ADD SC, FP, R0
    ADDI SC, SC, 338
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function putchar
    CALL putchar
; Recompute alloca t228 at FP+94
    ADD T4, FP, R0
    ADDI T4, T4, 94
    LOAD S1, SB, T4
    LI T2, 1
    ADD S1, S1, T2
    STORE S1, SB, T4
    BEQ R0, R0, L_main_94
; Unconditional branch to L_main_94
L_main_94:
; Recompute alloca t228 at FP+94
    ADD RV0, FP, R0
    ADDI RV0, RV0, 94
    LOAD S3, SB, RV0
    LI T5, 3
    SLT S3, S3, T5
    BEQ S3, R0, L_main_96
; Branch to L_main_96 if condition is false
    BEQ R0, R0, L_main_95
; Unconditional branch to L_main_95 (condition was true)
L_main_95:
    LI T1, 68
; Spill live registers before call
; Spill t232 to slot 195
    ADD SC, FP, R0
    ADDI SC, SC, 339
    STORE S1, SB, SC
; Spill const_f14_op337_68 to slot 196
    ADD SC, FP, R0
    ADDI SC, SC, 340
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
; Recompute alloca t228 at FP+94
    ADD T7, FP, R0
    ADDI T7, T7, 94
    LOAD S0, SB, T7
    LI S2, 48
    ADD S2, S2, S0
; Spill live registers before call
; Spill t236 to slot 197
    ADD SC, FP, R0
    ADDI SC, SC, 341
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
; Recompute alloca t228 at FP+94
    ADD T6, FP, R0
    ADDI T6, T6, 94
    LOAD T3, SB, T6
    LI T0, 1
    ADD T3, T3, T0
    STORE T3, SB, T6
    BEQ R0, R0, L_main_94
; Unconditional branch to L_main_94
L_main_96:
    LI T2, 10
; Spill live registers before call
; Spill t238 to slot 198
    ADD SC, FP, R0
    ADDI SC, SC, 342
    STORE T3, SB, SC
; Spill const_f14_op340_10 to slot 199
    ADD SC, FP, R0
    ADDI SC, SC, 343
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    LI T4, 321
; Spill live registers before call
; Spill const_f14_op341_321 to slot 200
    ADD SC, FP, R0
    ADDI SC, SC, 344
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T4, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T5, FP, R0
    ADDI T5, T5, 95
    ADD S3, FP, R0
    ADDI S3, S3, 96
    LI RV0, 79
; Spill live registers before call
; Spill const_f14_op342_79 to slot 201
    ADD SC, FP, R0
    ADDI SC, SC, 345
    STORE RV0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, RV0, R0
; Call function putchar
    CALL putchar
    LI S1, 75
; Spill live registers before call
; Spill const_f14_op343_75 to slot 202
    ADD SC, FP, R0
    ADDI SC, SC, 346
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Call function putchar
    CALL putchar
    LI T1, 10
; Spill live registers before call
; Spill const_f14_op344_10 to slot 203
    ADD SC, FP, R0
    ADDI SC, SC, 347
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
    LI S0, 334
; Spill live registers before call
; Spill const_f14_op345_334 to slot 204
    ADD SC, FP, R0
    ADDI SC, SC, 348
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S0, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T7, FP, R0
    ADDI T7, T7, 98
    ADD S2, T7, R0
    LI T0, 777
    STORE T0, SB, S2
    ADD T6, FP, R0
    ADDI T6, T6, 122
; Recompute alloca t241 at FP+98
    ADD T3, FP, R0
    ADDI T3, T3, 98
    ADD T2, T3, R0
    ADD T4, SB, R0
    STORE T2, SB, T6
    ADDI T5, T6, 1
    STORE T4, SB, T5
    LOAD S3, SB, T6
    ADDI RV0, T6, 1
    LOAD S1, SB, RV0
    LI T1, 888
    STORE T1, S1, S3
; Recompute alloca t241 at FP+98
    ADD S0, FP, R0
    ADDI S0, S0, 98
    ADD T7, S0, R0
    LOAD T0, SB, T7
    LI T3, 888
    XOR T5, T0, T3
    LI T4, 1
    SLTU T0, T5, T4
    BEQ T0, R0, L_main_98
; Branch to L_main_98 if condition is false
    BEQ R0, R0, L_main_97
; Unconditional branch to L_main_97 (condition was true)
L_main_97:
    LI T2, 89
; Spill live registers before call
; Spill t242 to slot 205
    ADD SC, FP, R0
    ADDI SC, SC, 349
    STORE S2, SB, SC
; Spill t245 to slot 206
    ADD SC, FP, R0
    ADDI SC, SC, 350
    STORE S3, SB, SC
; Spill load_f14_op351_t245_bank_val to slot 207
    ADD SC, FP, R0
    ADDI SC, SC, 351
    STORE S1, SB, SC
; Spill t246 to slot 208
    ADD SC, FP, R0
    ADDI SC, SC, 352
    STORE T7, SB, SC
; Spill const_f14_op356_89 to slot 209
    ADD SC, FP, R0
    ADDI SC, SC, 353
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_99
; Unconditional branch to L_main_99
L_main_98:
    LI RV0, 78
; Spill live registers before call
; Spill const_f14_op357_78 to slot 210
    ADD SC, FP, R0
    ADDI SC, SC, 354
    STORE RV0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, RV0, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_99
; Unconditional branch to L_main_99
L_main_99:
    ADD T1, FP, R0
    ADDI T1, T1, 124
; Recompute alloca t241 at FP+98
    ADD S0, FP, R0
    ADDI S0, S0, 98
    ADDI T5, S0, 1
    ADD T4, SB, R0
    STORE T5, SB, T1
    ADDI T3, T1, 1
    STORE T4, SB, T3
    LOAD T0, SB, T1
    ADDI T6, T1, 1
    LOAD S2, SB, T6
    ADD S3, T0, R0
    LI S1, 999
    STORE S1, S2, S3
; Recompute alloca t241 at FP+98
    ADD T7, FP, R0
    ADDI T7, T7, 98
    ADDI T2, T7, 1
    ADD RV0, T2, R0
    LOAD S0, SB, RV0
    LI T3, 999
    XOR T4, S0, T3
    LI T5, 1
    SLTU S0, T4, T5
    BEQ S0, R0, L_main_101
; Branch to L_main_101 if condition is false
    BEQ R0, R0, L_main_100
; Unconditional branch to L_main_100 (condition was true)
L_main_100:
    LI T6, 89
; Spill live registers before call
; Spill t252 to slot 211
    ADD SC, FP, R0
    ADDI SC, SC, 355
    STORE S3, SB, SC
; Spill load_f14_op362_t251_bank_val to slot 212
    ADD SC, FP, R0
    ADDI SC, SC, 356
    STORE S2, SB, SC
; Spill t254 to slot 213
    ADD SC, FP, R0
    ADDI SC, SC, 357
    STORE RV0, SB, SC
; Spill const_f14_op367_89 to slot 214
    ADD SC, FP, R0
    ADDI SC, SC, 358
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_102
; Unconditional branch to L_main_102
L_main_101:
    LI T0, 78
; Spill live registers before call
; Spill const_f14_op368_78 to slot 215
    ADD SC, FP, R0
    ADDI SC, SC, 359
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function putchar
    CALL putchar
    BEQ R0, R0, L_main_102
; Unconditional branch to L_main_102
L_main_102:
    LI S1, 10
; Spill live registers before call
; Spill const_f14_op369_10 to slot 216
    ADD SC, FP, R0
    ADDI SC, SC, 360
    STORE S1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Call function putchar
    CALL putchar
    BRK
    LI T7, 346
; Spill live registers before call
; Spill const_f14_op370_346 to slot 217
    ADD SC, FP, R0
    ADDI SC, SC, 361
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T7, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    ADD T2, FP, R0
    ADDI T2, T2, 126
    ADD T4, FP, R0
    ADDI T4, T4, 128
    ADD T5, FP, R0
    ADDI T5, T5, 134
    ADDI T3, T4, 2
    ADD S0, SB, R0
    STORE T3, SB, T5
    ADDI T1, T5, 1
    STORE S0, SB, T1
    LI S3, 10
; Spill live registers before call
; Spill const_f14_op373_10 to slot 218
    ADD SC, FP, R0
    ADDI SC, SC, 362
    STORE S3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Call function putchar
    CALL putchar
    LI S2, 361
; Spill live registers before call
; Spill const_f14_op374_361 to slot 219
    ADD SC, FP, R0
    ADDI SC, SC, 363
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, S2, R0
    ADD A1, GP, R0
; Call function puts
    CALL puts
    LI RV0, 0
; Jump to epilogue
    BEQ R0, R0, L_main_99999
L_main_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
