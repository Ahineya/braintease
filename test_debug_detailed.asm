; Generated by Ripple C99 Compiler (rcc)

_init_globals:
    RET
print_num:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 9 slots for locals
    ADDI SP, SP, 9
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
    ADD S2, FP, R0
    STORE S3, SB, S2
; Load instruction: t2 = load FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op1_t2 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S1, SB, S2
    LI S0, 0
    SLT S1, S1, S0
    BEQ S1, R0, L_print_num_3
; Branch to L_print_num_3 if condition is false
    BEQ R0, R0, L_print_num_1
; Unconditional branch to L_print_num_1 (condition was true)
; Invalidated 1 alloca bindings
L_print_num_1:
    LI T7, 45
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 9
    STORE S3, SB, SC
; Spill const_f0_op2_45 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 10
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op3_t4 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t1 at FP+0
    ADD T6, FP, R0
    LOAD T5, SB, T6
    LI T4, 0
    SUB T4, T4, T5
    STORE T4, SB, T6
    BEQ R0, R0, L_print_num_3
; Unconditional branch to L_print_num_3
; Invalidated 1 alloca bindings
L_print_num_3:
; Load instruction: t6 = load FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op4_t6 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t1 at FP+0
    ADD T3, FP, R0
    LOAD T2, SB, T3
    LI T1, 10
    SLT T0, T2, T1
    LI S0, 1
    SUB T2, S0, T0
    BEQ T2, R0, L_print_num_6
; Branch to L_print_num_6 if condition is false
    BEQ R0, R0, L_print_num_4
; Unconditional branch to L_print_num_4 (condition was true)
; Invalidated 1 alloca bindings
L_print_num_4:
; Load instruction: t8 = load FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op7_t8 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t1 at FP+0
    ADD S1, FP, R0
    LOAD S2, SB, S1
    LI S3, 10
    DIV S2, S2, S3
; Spill live registers before call
; Spill t5 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 11
    STORE T4, SB, SC
; Spill t9 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function print_num
    CALL print_num
    BEQ R0, R0, L_print_num_6
; Unconditional branch to L_print_num_6
L_print_num_6:
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op8_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t1 at FP+0
    ADD T7, FP, R0
    LOAD T5, SB, T7
    LI T6, 10
    MOD T5, T5, T6
    LI T0, 48
    ADD T0, T0, T5
; Spill live registers before call
; Spill t12 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function putchar
    CALL putchar
; Jump to epilogue
    BEQ R0, R0, L_print_num_99999
L_print_num_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
main:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 16 slots for locals
    ADDI SP, SP, 16
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
L_main_7:
    ADD S3, FP, R0
    ADD S2, FP, R0
    ADDI S2, S2, 2
    ADD S1, FP, R0
    ADDI S1, S1, 5
    ADD S0, S3, R0
; GEP: Setting bank info for t3 to Stack
    LI T7, 10
    STORE T7, SB, S0
; Recompute alloca t0 at FP+0
    ADD T6, FP, R0
    ADDI T5, T6, 1
; GEP: Setting bank info for t4 to Stack
    LI T4, 20
    STORE T4, SB, T5
    ADD T3, S2, R0
; GEP: Setting bank info for t5 to Stack
    LI T2, 5
    STORE T2, SB, T3
; Recompute alloca t1 at FP+2
    ADD T1, FP, R0
    ADDI T1, T1, 2
    ADDI T0, T1, 2
; GEP: Setting bank info for t6 to Stack
; Recompute alloca t0 at FP+0
    ADD S3, FP, R0
    ADD T7, SB, R0
    STORE S3, SB, T0
    ADDI T6, T0, 1
    STORE T7, SB, T6
; Recompute alloca t1 at FP+2
    ADD T4, FP, R0
    ADDI T4, T4, 2
    ADD S2, SB, R0
    STORE T4, SB, S1
    ADDI T2, S1, 1
    STORE S2, SB, T2
    LI T1, 97
; Spill live registers before call
; Spill t3 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S0, SB, SC
; Spill t4 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T5, SB, SC
; Spill t5 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T3, SB, SC
; Spill t6 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T0, SB, SC
; Spill const_f2_op7_97 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
    LI T6, 61
; Spill live registers before call
; Spill const_f2_op8_61 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
; Recompute alloca t1 at FP+2
    ADD T7, FP, R0
    ADDI T7, T7, 2
    ADD T2, T7, R0
; GEP: Setting bank info for t7 to Stack
; Load instruction: t8 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op9_t8 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S2, SB, T2
; Spill live registers before call
; Spill t7 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T2, SB, SC
; Spill t8 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function print_num
    CALL print_num
    LI S0, 32
; Spill live registers before call
; Spill const_f2_op10_32 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Call function putchar
    CALL putchar
    LI T5, 120
; Spill live registers before call
; Spill const_f2_op11_120 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function putchar
    CALL putchar
    LI T3, 61
; Spill live registers before call
; Spill const_f2_op12_61 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T3, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Call function putchar
    CALL putchar
; Recompute alloca t1 at FP+2
    ADD S3, FP, R0
    ADDI S3, S3, 2
    ADDI T0, S3, 2
; GEP: Setting bank info for t9 to Stack
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op13_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, T0
    ADDI S1, T0, 1
    LOAD T1, SB, S1
    ADD T6, T4, R0
; GEP: Setting bank info for t11 to Dynamic("load_f2_op15_t10_bank_val")
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(11), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Mixed })
; LOAD: Pointer t11 has bank info: Dynamic("load_f2_op15_t10_bank_val")
; LOAD: Using bank register T1 for load
    LOAD T7, T1, T6
; Spill live registers before call
; Spill t9 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T0, SB, SC
; Spill t11 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T6, SB, SC
; Spill load_f2_op15_t10_bank_val to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE T1, SB, SC
; Spill t12 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function print_num
    CALL print_num
    LI T2, 32
; Spill live registers before call
; Spill const_f2_op16_32 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 31
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    LI S2, 121
; Spill live registers before call
; Spill const_f2_op17_121 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 32
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
    LI S0, 61
; Spill live registers before call
; Spill const_f2_op18_61 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 33
    STORE S0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Call function putchar
    CALL putchar
; Recompute alloca t1 at FP+2
    ADD T5, FP, R0
    ADDI T5, T5, 2
    ADDI T3, T5, 2
; GEP: Setting bank info for t13 to Stack
; Load instruction: t14 = load FatPtr(FatPointer { addr: Temp(13), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(13), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op19_t14 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S3, SB, T3
    ADDI S1, T3, 1
    LOAD T4, SB, S1
    ADDI T0, S3, 1
; GEP: Setting bank info for t15 to Dynamic("load_f2_op21_t14_bank_val")
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(15), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(15), bank: Mixed })
; LOAD: Pointer t15 has bank info: Dynamic("load_f2_op21_t14_bank_val")
; LOAD: Using bank register T4 for load
    LOAD T6, T4, T0
; Spill live registers before call
; Spill t13 to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 34
    STORE T3, SB, SC
; Spill t15 to slot 19
    ADD SC, FP, R0
    ADDI SC, SC, 35
    STORE T0, SB, SC
; Spill load_f2_op21_t14_bank_val to slot 20
    ADD SC, FP, R0
    ADDI SC, SC, 36
    STORE T4, SB, SC
; Spill t16 to slot 21
    ADD SC, FP, R0
    ADDI SC, SC, 37
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function print_num
    CALL print_num
    LI T1, 32
; Spill live registers before call
; Spill const_f2_op22_32 to slot 22
    ADD SC, FP, R0
    ADDI SC, SC, 38
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
    LI T7, 112
; Spill live registers before call
; Spill const_f2_op23_112 to slot 23
    ADD SC, FP, R0
    ADDI SC, SC, 39
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    LI T2, 97
; Spill live registers before call
; Spill const_f2_op24_97 to slot 24
    ADD SC, FP, R0
    ADDI SC, SC, 40
    STORE T2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
    LI S2, 61
; Spill live registers before call
; Spill const_f2_op25_61 to slot 25
    ADD SC, FP, R0
    ADDI SC, SC, 41
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
; Load instruction: t17 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op26_t17 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+5
    ADD S0, FP, R0
    ADDI S0, S0, 5
    LOAD T5, SB, S0
    ADDI S1, S0, 1
    LOAD S3, SB, S1
    ADD T3, T5, R0
; GEP: Setting bank info for t18 to Dynamic("load_f2_op28_t17_bank_val")
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(18), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(18), bank: Mixed })
; LOAD: Pointer t18 has bank info: Dynamic("load_f2_op28_t17_bank_val")
; LOAD: Using bank register S3 for load
    LOAD T0, S3, T3
; Spill live registers before call
; Spill t18 to slot 26
    ADD SC, FP, R0
    ADDI SC, SC, 42
    STORE T3, SB, SC
; Spill load_f2_op28_t17_bank_val to slot 27
    ADD SC, FP, R0
    ADDI SC, SC, 43
    STORE S3, SB, SC
; Spill t19 to slot 28
    ADD SC, FP, R0
    ADDI SC, SC, 44
    STORE T0, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function print_num
    CALL print_num
    LI T4, 32
; Spill live registers before call
; Spill const_f2_op29_32 to slot 29
    ADD SC, FP, R0
    ADDI SC, SC, 45
    STORE T4, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Call function putchar
    CALL putchar
    LI T6, 112
; Spill live registers before call
; Spill const_f2_op30_112 to slot 30
    ADD SC, FP, R0
    ADDI SC, SC, 46
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
    LI T1, 121
; Spill live registers before call
; Spill const_f2_op31_121 to slot 31
    ADD SC, FP, R0
    ADDI SC, SC, 47
    STORE T1, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
    LI T7, 61
; Spill live registers before call
; Spill const_f2_op32_61 to slot 32
    ADD SC, FP, R0
    ADDI SC, SC, 48
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function putchar
    CALL putchar
    ADD T2, FP, R0
    ADDI T2, T2, 7
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op33_t21 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+5
    ADD S2, FP, R0
    ADDI S2, S2, 5
    LOAD S1, SB, S2
    ADDI T5, S2, 1
    LOAD S0, SB, T5
    ADDI T3, S1, 2
; GEP: Setting bank info for t22 to Dynamic("load_f2_op35_t21_bank_val")
; Load instruction: t23 = load FatPtr(FatPointer { addr: Temp(22), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(22), bank: Mixed })
; LOAD: Pointer t22 has bank info: Dynamic("load_f2_op35_t21_bank_val")
; LOAD: Using bank register S0 for load
    LOAD S3, S0, T3
    ADDI T0, T3, 1
    LOAD T4, S0, T0
    ADDI T6, S3, 1
; GEP: Setting bank info for t24 to Dynamic("load_f2_op37_t23_bank_val")
; Load instruction: t25 = load FatPtr(FatPointer { addr: Temp(24), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(24), bank: Mixed })
; LOAD: Pointer t24 has bank info: Dynamic("load_f2_op37_t23_bank_val")
; LOAD: Using bank register T4 for load
    LOAD T1, T4, T6
    STORE T1, SB, T2
; Load instruction: t26 = load FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op38_t26 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T7, SB, T2
; Spill live registers before call
; Spill t22 to slot 33
    ADD SC, FP, R0
    ADDI SC, SC, 49
    STORE T3, SB, SC
; Spill load_f2_op35_t21_bank_val to slot 34
    ADD SC, FP, R0
    ADDI SC, SC, 50
    STORE S0, SB, SC
; Spill t24 to slot 35
    ADD SC, FP, R0
    ADDI SC, SC, 51
    STORE T6, SB, SC
; Spill load_f2_op37_t23_bank_val to slot 36
    ADD SC, FP, R0
    ADDI SC, SC, 52
    STORE T4, SB, SC
; Spill t25 to slot 37
    ADD SC, FP, R0
    ADDI SC, SC, 53
    STORE T1, SB, SC
; Spill t26 to slot 38
    ADD SC, FP, R0
    ADDI SC, SC, 54
    STORE T7, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Call function print_num
    CALL print_num
    LI T5, 10
; Spill live registers before call
; Spill const_f2_op39_10 to slot 39
    ADD SC, FP, R0
    ADDI SC, SC, 55
    STORE T5, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T5, R0
; Call function putchar
    CALL putchar
    LI RV0, 0
; Jump to epilogue
    BEQ R0, R0, L_main_99999
L_main_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
