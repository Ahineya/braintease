; Generated by Ripple C99 Compiler (rcc)

_init_globals:
; Global variable: putchar at address 0
; Uninitialized global putchar
    RET
add:
; === Function Prologue ===
; Initialize SB as stack bank (1)
    LI SB, 1
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 10 slots for locals
    ADDI SP, SP, 10
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
    ADD S2, FP, R0
    STORE S3, SB, S2
    ADD S1, FP, R0
    ADDI S1, S1, 1
    STORE S2, SB, S1
    LOAD S0, SB, S2
    LOAD T7, SB, S1
    ADD S0, S0, T7
    MOVE RV0, S0
; Jump to epilogue
    BEQ R0, R0, L_add_99999
L_add_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
main:
; === Function Prologue ===
; Initialize SB as stack bank (1)
    LI SB, 1
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 11 slots for locals
    ADDI SP, SP, 11
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
L_main_1:
    ADD S3, FP, R0
    LI S2, 5
    STORE S2, SB, S3
    ADD S1, FP, R0
    ADDI S1, S1, 1
    LI S0, 10
    STORE S0, SB, S1
    ADD T7, FP, R0
    ADDI T7, T7, 2
    LOAD T6, SB, S3
    LOAD T5, SB, S1
; Setting up 2 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T6, R0
    ADD A1, SB, R0
; Arg 1 (fat ptr) to A2,A3
    ADD A2, T5, R0
    ADD A3, SB, R0
; Call function add
    CALL add
; Scalar return value for t5
    STORE RV0, SB, T7
    LOAD T4, SB, T7
    LI T3, 15
    XOR T2, T4, T3
    LI T1, 1
    SLTU T4, T2, T1
    BEQ T4, R0, L_main_3
; Branch to L_main_3 if condition is false
    BEQ R0, R0, L_main_2
; Unconditional branch to L_main_2 (condition was true)
L_main_2:
    LI T0, 89
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Call function putchar
    CALL putchar
; Scalar return value for t8
    BEQ R0, R0, L_main_4
; Unconditional branch to L_main_4
L_main_3:
    LI S2, 78
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function putchar
    CALL putchar
; Scalar return value for t9
    BEQ R0, R0, L_main_4
; Unconditional branch to L_main_4
L_main_4:
    LI S0, 10
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S0, R0
; Call function putchar
    CALL putchar
; Scalar return value for t10
    LOAD T2, SB, T7
    MOVE RV0, T2
; Jump to epilogue
    BEQ R0, R0, L_main_99999
L_main_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
