; Generated by Ripple C99 Compiler (rcc)

_init_globals:
    RET
; Function: main
main:
    STORE RA, R13, R14
    ADDI R14, R14, 1
    STORE R15, R13, R14
    ADDI R14, R14, 1
    ADD R15, R14, R0
; === ModuleLowerer::get_reg for 't0' ===
; get_reg for 't0'
;   Allocated free register for t0
; Alloca for t0 at FP+1 (fat ptr: stack bank)
    ADDI R5, R15, 1
; === ModuleLowerer::get_reg for 'addr_t0_0' ===
; get_reg for 'addr_t0_0'
;   Allocated free register for addr_t0_0
    ADDI R6, R15, 1
; Store 0 to [t0]
; get_reg for 'const_0_1'
;   Allocated free register for const_0_1
    LI R7, 0
    STORE R7, R13, R6
; === ModuleLowerer::get_reg for 't1' ===
; get_reg for 't1'
;   Allocated free register for t1
; Alloca for t1 at FP+2 (fat ptr: stack bank)
    ADDI R5, R15, 2
; === ModuleLowerer::get_reg for 'addr_t1_2' ===
; get_reg for 'addr_t1_2'
;   Allocated free register for addr_t1_2
    ADDI R6, R15, 2
; Store 10 to [t1]
; get_reg for 'const_10_3'
;   Allocated free register for const_10_3
    LI R7, 10
    STORE R7, R13, R6
; Load from [t0] to t2
; === ModuleLowerer::get_reg for 't2' ===
; get_reg for 't2'
;   Allocated free register for t2
; === ModuleLowerer::get_reg for 'addr_t0_4' ===
; get_reg for 'addr_t0_4'
;   Allocated free register for addr_t0_4
    ADDI R6, R15, 1
    LOAD R5, R13, R6
; === Processing Binary t3 ===
; Getting register for temp t2
; t2 already in register
;   t2 is now in R5
    LI R4, 0
; === ModuleLowerer::get_reg for 't3' ===
; get_reg for 't3'
;   Allocated free register for t3
    SLTU R9, R5, R4
    SLTU R8, R4, R5
    OR R7, R9, R8
    LI R8, 1
    SUB R7, R8, R7
; Load from [t1] to t4
; === ModuleLowerer::get_reg for 't4' ===
; get_reg for 't4'
;   Allocated free register for t4
; === ModuleLowerer::get_reg for 'addr_t1_7' ===
; get_reg for 'addr_t1_7'
;   Allocated free register for addr_t1_7
    ADDI R9, R15, 2
    LOAD R8, R13, R9
; === Processing Binary t5 ===
; Getting register for temp t4
; t4 already in register
;   t4 is now in R8
    LI R4, 10
; === ModuleLowerer::get_reg for 't5' ===
; get_reg for 't5'
;   Allocated free register for t5
; Spilling binary_right_t999999 to FP+0
    ADDI R12, R15, 0
    STORE R4, R13, R12
    SLTU R11, R8, R4
    SLTU R4, R4, R8
    OR R10, R11, R4
    LI R11, 1
    SUB R10, R11, R10
; === Processing Binary t6 ===
; Binary op: t6 = t3 And t5
; Getting register for temp t3
; t3 already in register
;   t3 is now in R7
; Getting register for temp t5
; t5 already in register
;   t5 is now in R10
; === ModuleLowerer::get_reg for 't6' ===
; get_reg for 't6'
;   Allocated free register for t6
    AND R11, R7, R10
; Getting register for temp t6
; t6 already in register
;   t6 is now in R11
    BNE R11, R0, main_L1
    BEQ R0, R0, main_L2
main_L1:
; get_reg for 'const_49_10'
;   Allocated free register for const_49_10
    LI R5, 49
    ADD R3, R5, R0
    CALL putchar
    BEQ R0, R0, main_L3
main_L2:
; get_reg for 'const_78_11'
;   Allocated free register for const_78_11
    LI R5, 78
    ADD R3, R5, R0
    CALL putchar
    BEQ R0, R0, main_L3
main_L3:
; Load from [t0] to t7
; === ModuleLowerer::get_reg for 't7' ===
; get_reg for 't7'
;   Allocated free register for t7
; === ModuleLowerer::get_reg for 'addr_t0_12' ===
; get_reg for 'addr_t0_12'
;   Allocated free register for addr_t0_12
    ADDI R6, R15, 1
    LOAD R5, R13, R6
; === Processing Binary t8 ===
; Getting register for temp t7
; t7 already in register
;   t7 is now in R5
    LI R4, 1
; === ModuleLowerer::get_reg for 't8' ===
; get_reg for 't8'
;   Allocated free register for t8
    SLTU R9, R5, R4
    SLTU R8, R4, R5
    OR R7, R9, R8
    LI R8, 1
    SUB R7, R8, R7
; Load from [t1] to t9
; === ModuleLowerer::get_reg for 't9' ===
; get_reg for 't9'
;   Allocated free register for t9
; === ModuleLowerer::get_reg for 'addr_t1_15' ===
; get_reg for 'addr_t1_15'
;   Allocated free register for addr_t1_15
    ADDI R9, R15, 2
    LOAD R8, R13, R9
; === Processing Binary t10 ===
; Getting register for temp t9
; t9 already in register
;   t9 is now in R8
    LI R4, 20
; === ModuleLowerer::get_reg for 't10' ===
; get_reg for 't10'
;   Allocated free register for t10
; Spilling binary_right_t999999 to FP+0
    ADDI R12, R15, 0
    STORE R4, R13, R12
    SLTU R11, R8, R4
    SLTU R4, R4, R8
    OR R10, R11, R4
    LI R11, 1
    SUB R10, R11, R10
; === Processing Binary t11 ===
; Binary op: t11 = t8 And t10
; Getting register for temp t8
; t8 already in register
;   t8 is now in R7
; Getting register for temp t10
; t10 already in register
;   t10 is now in R10
; === ModuleLowerer::get_reg for 't11' ===
; get_reg for 't11'
;   Allocated free register for t11
    AND R11, R7, R10
; Getting register for temp t11
; t11 already in register
;   t11 is now in R11
    BNE R11, R0, main_L4
    BEQ R0, R0, main_L5
main_L4:
; get_reg for 'const_78_18'
;   Allocated free register for const_78_18
    LI R5, 78
    ADD R3, R5, R0
    CALL putchar
    BEQ R0, R0, main_L6
main_L5:
; get_reg for 'const_50_19'
;   Allocated free register for const_50_19
    LI R5, 50
    ADD R3, R5, R0
    CALL putchar
    BEQ R0, R0, main_L6
main_L6:
; Load from [t0] to t12
; === ModuleLowerer::get_reg for 't12' ===
; get_reg for 't12'
;   Allocated free register for t12
; === ModuleLowerer::get_reg for 'addr_t0_20' ===
; get_reg for 'addr_t0_20'
;   Allocated free register for addr_t0_20
    ADDI R6, R15, 1
    LOAD R5, R13, R6
; === Processing Binary t13 ===
; Getting register for temp t12
; t12 already in register
;   t12 is now in R5
    LI R4, 0
; === ModuleLowerer::get_reg for 't13' ===
; get_reg for 't13'
;   Allocated free register for t13
    SLTU R9, R5, R4
    SLTU R8, R4, R5
    OR R7, R9, R8
    LI R8, 1
    SUB R7, R8, R7
; Load from [t1] to t14
; === ModuleLowerer::get_reg for 't14' ===
; get_reg for 't14'
;   Allocated free register for t14
; === ModuleLowerer::get_reg for 'addr_t1_23' ===
; get_reg for 'addr_t1_23'
;   Allocated free register for addr_t1_23
    ADDI R9, R15, 2
    LOAD R8, R13, R9
; === Processing Binary t15 ===
; Getting register for temp t14
; t14 already in register
;   t14 is now in R8
    LI R4, 10
; === ModuleLowerer::get_reg for 't15' ===
; get_reg for 't15'
;   Allocated free register for t15
; Spilling binary_right_t999999 to FP+0
    ADDI R12, R15, 0
    STORE R4, R13, R12
    SLTU R11, R8, R4
    SLTU R4, R4, R8
    OR R10, R11, R4
    LI R11, 1
    SUB R10, R11, R10
; === Processing Binary t16 ===
; Binary op: t16 = t13 And t15
; Getting register for temp t13
; t13 already in register
;   t13 is now in R7
; Getting register for temp t15
; t15 already in register
;   t15 is now in R10
; === ModuleLowerer::get_reg for 't16' ===
; get_reg for 't16'
;   Allocated free register for t16
    AND R11, R7, R10
; Load from [t0] to t17
; === ModuleLowerer::get_reg for 't17' ===
; get_reg for 't17'
;   No free registers, need to spill for t17
;     R4 contains 'eq_temp2_24'
;     R5 contains 'binary_left_t12'
;     R6 contains 'addr_t0_20'
;     R7 contains 'binary_left_t13'
;     R8 contains 'binary_left_t14'
;     R9 contains 'addr_t1_23'
;     R10 contains 'binary_right_t15'
;     R11 contains 't16'
;   Chose to spill eq_temp2_24 from R4
; Spilling eq_temp2_24 to FP+1
    ADDI R12, R15, 1
    STORE R4, R13, R12
;   Now R4 will contain t17
; === ModuleLowerer::get_reg for 'addr_t0_26' ===
; get_reg for 'addr_t0_26'
;   No free registers, need to spill for addr_t0_26
;     R4 contains 't17'
;     R5 contains 'binary_left_t12'
;     R6 contains 'addr_t0_20'
;     R7 contains 'binary_left_t13'
;     R8 contains 'binary_left_t14'
;     R9 contains 'addr_t1_23'
;     R10 contains 'binary_right_t15'
;     R11 contains 't16'
;   Chose to spill t17 from R4
; Spilling t17 to FP+2
    ADDI R12, R15, 2
    STORE R4, R13, R12
;   Now R4 will contain addr_t0_26
    ADDI R4, R15, 1
    LOAD R4, R13, R4
; === Processing Binary t18 ===
; Getting register for temp t17
; get_reg for 't17'
;   No free registers, need to spill for t17
;     R4 contains 'addr_t0_26'
;     R5 contains 'binary_left_t12'
;     R6 contains 'addr_t0_20'
;     R7 contains 'binary_left_t13'
;     R8 contains 'binary_left_t14'
;     R9 contains 'addr_t1_23'
;     R10 contains 'binary_right_t15'
;     R11 contains 't16'
;   Chose to spill addr_t0_26 from R4
; Spilling addr_t0_26 to FP+3
    ADDI R12, R15, 3
    STORE R4, R13, R12
;   Now R4 will contain t17
; Reloading t17 from FP+2
    ADDI R12, R15, 2
    LOAD R4, R13, R12
;   t17 is now in R4
    LI R4, 1
; === ModuleLowerer::get_reg for 't18' ===
; get_reg for 't18'
;   No free registers, need to spill for t18
;     R4 contains 'binary_right_t999999'
;     R5 contains 'binary_left_t12'
;     R6 contains 'addr_t0_20'
;     R7 contains 'binary_left_t13'
;     R8 contains 'binary_left_t14'
;     R9 contains 'addr_t1_23'
;     R10 contains 'binary_right_t15'
;     R11 contains 't16'
;   Chose to spill binary_right_t999999 from R4
; Spilling binary_right_t999999 to FP+0
    ADDI R12, R15, 0
    STORE R4, R13, R12
;   Now R4 will contain t18
; Spilling t18 to FP+4
    ADDI R12, R15, 4
    STORE R4, R13, R12
; Spilling binary_left_t12 to FP+5
    ADDI R12, R15, 5
    STORE R5, R13, R12
    SLTU R4, R4, R4
    SLTU R5, R4, R4
    OR R4, R4, R5
    LI R5, 1
    SUB R4, R5, R4
; Load from [t1] to t19
; === ModuleLowerer::get_reg for 't19' ===
; get_reg for 't19'
;   Allocated free register for t19
; === ModuleLowerer::get_reg for 'addr_t1_29' ===
; get_reg for 'addr_t1_29'
;   No free registers, need to spill for addr_t1_29
;     R4 contains 'eq_temp1_27'
;     R5 contains 't19'
;     R6 contains 'addr_t0_20'
;     R7 contains 'binary_left_t13'
;     R8 contains 'binary_left_t14'
;     R9 contains 'addr_t1_23'
;     R10 contains 'binary_right_t15'
;     R11 contains 't16'
;   Chose to spill eq_temp1_27 from R4
; Spilling eq_temp1_27 to FP+6
    ADDI R12, R15, 6
    STORE R4, R13, R12
;   Now R4 will contain addr_t1_29
    ADDI R4, R15, 2
    LOAD R5, R13, R4
; === Processing Binary t20 ===
; Getting register for temp t19
; t19 already in register
;   t19 is now in R5
    LI R4, 20
; === ModuleLowerer::get_reg for 't20' ===
; get_reg for 't20'
;   No free registers, need to spill for t20
;     R4 contains 'binary_right_t999999'
;     R5 contains 'binary_left_t19'
;     R6 contains 'addr_t0_20'
;     R7 contains 'binary_left_t13'
;     R8 contains 'binary_left_t14'
;     R9 contains 'addr_t1_23'
;     R10 contains 'binary_right_t15'
;     R11 contains 't16'
;   Chose to spill binary_right_t999999 from R4
; Spilling binary_right_t999999 to FP+0
    ADDI R12, R15, 0
    STORE R4, R13, R12
;   Now R4 will contain t20
; Spilling t20 to FP+7
    ADDI R12, R15, 7
    STORE R4, R13, R12
; Spilling binary_left_t19 to FP+8
    ADDI R12, R15, 8
    STORE R5, R13, R12
    SLTU R4, R5, R4
    SLTU R5, R4, R5
    OR R4, R4, R5
    LI R5, 1
    SUB R4, R5, R4
; === Processing Binary t21 ===
; Binary op: t21 = t18 And t20
; Getting register for temp t18
; get_reg for 't18'
;   Allocated free register for t18
; Reloading t18 from FP+4
    ADDI R12, R15, 4
    LOAD R5, R13, R12
;   t18 is now in R5
; Getting register for temp t20
; get_reg for 't20'
;   No free registers, need to spill for t20
;     R4 contains 'eq_temp1_30'
;     R5 contains 't18'
;     R6 contains 'addr_t0_20'
;     R7 contains 'binary_left_t13'
;     R8 contains 'binary_left_t14'
;     R9 contains 'addr_t1_23'
;     R10 contains 'binary_right_t15'
;     R11 contains 't16'
;   Chose to spill eq_temp1_30 from R4
; Spilling eq_temp1_30 to FP+9
    ADDI R12, R15, 9
    STORE R4, R13, R12
;   Now R4 will contain t20
; Reloading t20 from FP+7
    ADDI R12, R15, 7
    LOAD R4, R13, R12
;   t20 is now in R4
; === ModuleLowerer::get_reg for 't21' ===
; get_reg for 't21'
;   No free registers, need to spill for t21
;     R4 contains 'binary_right_t20'
;     R5 contains 'binary_left_t18'
;     R6 contains 'addr_t0_20'
;     R7 contains 'binary_left_t13'
;     R8 contains 'binary_left_t14'
;     R9 contains 'addr_t1_23'
;     R10 contains 'binary_right_t15'
;     R11 contains 't16'
;   Chose to spill binary_right_t20 from R4
; Spilling binary_right_t20 to FP+10
    ADDI R12, R15, 10
    STORE R4, R13, R12
;   Now R4 will contain t21
    AND R4, R5, R4
; === Processing Binary t22 ===
; Binary op: t22 = t16 Or t21
; Getting register for temp t16
; t16 already in register
;   t16 is now in R11
; Getting register for temp t21
; t21 already in register
;   t21 is now in R4
; === ModuleLowerer::get_reg for 't22' ===
; get_reg for 't22'
;   No free registers, need to spill for t22
;     R4 contains 'binary_right_t21'
;     R5 contains 'binary_left_t18'
;     R6 contains 'addr_t0_20'
;     R7 contains 'binary_left_t13'
;     R8 contains 'binary_left_t14'
;     R9 contains 'addr_t1_23'
;     R10 contains 'binary_right_t15'
;     R11 contains 'binary_left_t16'
;   Chose to spill binary_right_t21 from R4
; Spilling binary_right_t21 to FP+11
    ADDI R12, R15, 11
    STORE R4, R13, R12
;   Now R4 will contain t22
    OR R4, R11, R4
; Getting register for temp t22
; t22 already in register
;   t22 is now in R4
    BNE R4, R0, main_L7
    BEQ R0, R0, main_L8
main_L7:
; get_reg for 'const_51_32'
;   Allocated free register for const_51_32
    LI R5, 51
    ADD R3, R5, R0
    CALL putchar
    BEQ R0, R0, main_L9
main_L8:
; get_reg for 'const_78_33'
;   Allocated free register for const_78_33
    LI R5, 78
    ADD R3, R5, R0
    CALL putchar
    BEQ R0, R0, main_L9
main_L9:
; get_reg for 'const_10_34'
;   Allocated free register for const_10_34
    LI R5, 10
    ADD R3, R5, R0
    CALL putchar
; get_reg for 'const_0_35'
;   Allocated free register for const_0_35
    LI R5, 0
    ADD R3, R5, R0
    ADD R14, R15, R0
    ADDI R14, R14, -1
    LOAD R15, R13, R14
    ADDI R14, R14, -1
    LOAD RA, R13, R14
    RET
