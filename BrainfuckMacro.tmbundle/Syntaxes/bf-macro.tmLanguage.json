{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Brainfuck Macro",
  "scopeName": "source.bfmacro",
  "fileTypes": ["bfm", "bfmacro", "bf"],
  "uuid": "B5E5B8C6-6E2E-4E87-9F7A-2A8C3B4D5E6F",
  "patterns": [
    { "include": "#comments" },
    { "include": "#macro-definition" },
    { "include": "#builtin-functions" },
    { "include": "#macro-invocation" },
    { "include": "#brainfuck-operators" },
    { "include": "#numbers" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash",
          "match": "//.*$"
        },
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "macro-definition": {
      "patterns": [
        {
          "match": "(#define)\\s+([a-zA-Z_]\\w*)\\s*(\\(([^)]*)\\))?",
          "captures": {
            "1": { "name": "keyword.control.directive.define" },
            "2": { "name": "entity.name.function.preprocessor" },
            "3": { "name": "punctuation.definition.parameters" },
            "4": { 
              "patterns": [
                {
                  "match": "[a-zA-Z_]\\w*",
                  "name": "variable.parameter.function"
                }
              ]
            }
          }
        }
      ]
    },
    "macro-invocation": {
      "patterns": [
        {
          "name": "meta.function-call.macro",
          "begin": "(@)([a-zA-Z_]\\w*)(\\()",
          "end": "\\)",
          "beginCaptures": {
            "1": { "name": "keyword.operator.macro" },
            "2": { "name": "entity.name.function.preprocessor" },
            "3": { "name": "punctuation.definition.parameters.begin" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.definition.parameters.end" }
          },
          "patterns": [
            { "include": "#macro-arguments" }
          ]
        },
        {
          "name": "entity.name.function.preprocessor",
          "match": "@[a-zA-Z_]\\w*"
        },
        {
          "name": "entity.name.function.preprocessor",
          "match": "#[a-zA-Z_]\\w*(?!define)"
        }
      ]
    },
    "macro-arguments": {
      "patterns": [
        { "include": "#builtin-functions" },
        { "include": "#numbers" },
        { "include": "#identifiers" },
        {
          "name": "punctuation.separator.arguments",
          "match": ","
        }
      ]
    },
    "builtin-functions": {
      "patterns": [
        {
          "name": "meta.builtin.preserve",
          "begin": "\\{(:)",
          "end": "\\}",
          "beginCaptures": {
            "1": { "name": "keyword.control.flow.preserve" }
          },
          "patterns": [
            { "include": "#builtin-functions" },
            { "include": "#preserve-content" }
          ]
        },
        {
          "name": "meta.builtin.label",
          "begin": "\\{(label)\\s+",
          "end": "\\}",
          "beginCaptures": {
            "1": { "name": "keyword.control.flow.label" }
          },
          "patterns": [
            {
              "match": "[a-zA-Z_]\\w*",
              "name": "entity.name.label"
            }
          ]
        },
        {
          "name": "meta.builtin.br",
          "match": "\\{(br)\\}",
          "captures": {
            "1": { "name": "keyword.control.flow.break" }
          }
        },
        {
          "name": "meta.builtin.repeat",
          "begin": "\\{(repeat)\\s*\\(",
          "end": "\\)\\s*\\}",
          "beginCaptures": {
            "1": { "name": "keyword.control.loop.repeat" }
          },
          "patterns": [
            { "include": "#builtin-arguments" }
          ]
        },
        {
          "name": "meta.builtin.if",
          "begin": "\\{(if)\\s*\\(",
          "end": "\\)\\s*\\}",
          "beginCaptures": {
            "1": { "name": "keyword.control.conditional.if" }
          },
          "patterns": [
            { "include": "#builtin-arguments" }
          ]
        },
        {
          "name": "meta.builtin.for",
          "begin": "\\{(for)\\s*\\(",
          "end": "\\)\\s*\\}",
          "beginCaptures": {
            "1": { "name": "keyword.control.loop.for" }
          },
          "patterns": [
            {
              "match": "\\b(in)\\b",
              "name": "keyword.control.loop.in"
            },
            { "include": "#builtin-arguments" }
          ]
        },
        {
          "name": "meta.builtin.reverse",
          "begin": "\\{(reverse)\\s*\\(",
          "end": "\\)\\s*\\}",
          "beginCaptures": {
            "1": { "name": "keyword.control.flow.reverse" }
          },
          "patterns": [
            { "include": "#builtin-arguments" }
          ]
        },
        {
          "name": "meta.builtin.preserve",
          "begin": "\\{(preserve)\\s*\\(",
          "end": "\\)\\s*\\}",
          "beginCaptures": {
            "1": { "name": "keyword.control.flow.preserve" }
          },
          "patterns": [
            { "include": "#preserve-content" }
          ]
        }
      ]
    },
    "builtin-arguments": {
      "patterns": [
        { "include": "#builtin-functions" },
        { "include": "#macro-invocation" },
        { "include": "#numbers" },
        { "include": "#identifiers" },
        {
          "name": "punctuation.separator.arguments",
          "match": ","
        }
      ]
    },
    "preserve-content": {
      "patterns": [
        { "include": "#builtin-functions" },
        {
          "match": "[^{}]+",
          "name": "string.unquoted"
        }
      ]
    },
    "brainfuck-operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.increment",
          "match": "\\++"
        },
        {
          "name": "keyword.operator.arithmetic.decrement",
          "match": "--"
        },
        {
          "name": "keyword.operator.arithmetic.plus",
          "match": "\\+"
        },
        {
          "name": "keyword.operator.arithmetic.minus",
          "match": "-"
        },
        {
          "name": "keyword.operator.memory.pointer",
          "match": "<+"
        },
        {
          "name": "keyword.operator.memory.pointer",
          "match": ">+"
        },
        {
          "name": "keyword.operator.io.input",
          "match": ","
        },
        {
          "name": "keyword.operator.io.output",
          "match": "\\."
        },
        {
          "name": "keyword.control.flow.loop.begin",
          "match": "\\["
        },
        {
          "name": "keyword.control.flow.loop.end",
          "match": "\\]"
        },
        {
          "name": "keyword.control.flow.break",
          "match": "\\$"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.character.literal",
          "match": "'[^']'"
        },
        {
          "name": "constant.numeric.integer.hexadecimal",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.integer.decimal",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.readwrite",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}