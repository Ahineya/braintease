; Generated by Ripple C99 Compiler (rcc)

q_add:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 15 slots for locals
    ADDI SP, SP, 15
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 1 bank from A3
; Load param 2 from FP-7
    ADDI SC, FP, -7
    LOAD S1, SB, SC
; Load param 2 bank from FP-8
    ADDI SC, FP, -8
    LOAD S0, SB, SC
    ADD T7, FP, R0
    STORE S3, SB, T7
    ADDI T6, T7, 1
    STORE A1, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 2
    STORE S2, SB, T5
    ADDI T4, T5, 1
    STORE A3, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    STORE S1, SB, T3
    ADDI T2, T3, 1
    STORE S0, SB, T2
    ADD T1, FP, R0
    ADDI T1, T1, 6
; Load instruction: t7 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op10_t7 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, T5
    ADDI T6, T5, 1
    LOAD T4, SB, T6
    ADDI T2, T0, 1
; GEP: Setting bank info for t8 to NamedValue("load_f0_op12_t7_bank_val")
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(8), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Mixed })
; LOAD: Pointer t8 has bank info: NamedValue("load_f0_op12_t7_bank_val")
; LOAD: Using bank register T4 for load
    LOAD T6, T4, T2
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op13_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, T3
; Spill param_bank_f0_op5_2 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S0, SB, SC
    ADDI S0, T3, 1
; Spill t0 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S3, SB, SC
    LOAD S3, SB, S0
    ADDI S0, T0, 1
; GEP: Setting bank info for t11 to NamedValue("load_f0_op15_t10_bank_val")
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(11), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Mixed })
; LOAD: Pointer t11 has bank info: NamedValue("load_f0_op15_t10_bank_val")
; LOAD: Using bank register S3 for load
    LOAD T0, S3, S0
    ADD T6, T6, T0
    STORE T6, SB, T1
; Load instruction: t14 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op16_t14 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, T7
; Spill t1 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S2, SB, SC
    ADDI S2, T7, 1
; Spill t2 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE S1, SB, SC
    LOAD S1, SB, S2
    ADDI S2, T0, 1
; GEP: Setting bank info for t15 to NamedValue("load_f0_op18_t14_bank_val")
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op19_t16 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, T1
    LI T5, -1
    AND T0, T0, T5
    STORE T0, S1, S2
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op20_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, T7
; Spill t8 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T2, SB, SC
    ADDI T2, T7, 1
; Spill load_f0_op12_t7_bank_val to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T4, SB, SC
    LOAD T4, SB, T2
    ADD T2, T5, R0
; GEP: Setting bank info for t19 to NamedValue("load_f0_op22_t18_bank_val")
; Load instruction: t20 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op23_t20 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T5, FP, R0
    ADDI T5, T5, 2
    LOAD T3, SB, T5
; Spill t11 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE S0, SB, SC
    ADDI S0, T5, 1
; Spill load_f0_op15_t10_bank_val to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE S3, SB, SC
    LOAD S3, SB, S0
    ADD S0, T3, R0
; GEP: Setting bank info for t21 to NamedValue("load_f0_op25_t20_bank_val")
; Load instruction: t22 = load FatPtr(FatPointer { addr: Temp(21), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(21), bank: Mixed })
; LOAD: Pointer t21 has bank info: NamedValue("load_f0_op25_t20_bank_val")
; LOAD: Using bank register S3 for load
    LOAD T3, S3, S0
; Load instruction: t23 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op26_t23 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t13 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE T6, SB, SC
; Recompute alloca t5 at FP+4
    ADD T6, FP, R0
    ADDI T6, T6, 4
    LOAD T1, SB, T6
; Spill t17 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T0, SB, SC
    ADDI T0, T6, 1
; Spill t15 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE S2, SB, SC
    LOAD S2, SB, T0
    ADD T0, T1, R0
; GEP: Setting bank info for t24 to NamedValue("load_f0_op28_t23_bank_val")
; Load instruction: t25 = load FatPtr(FatPointer { addr: Temp(24), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(24), bank: Mixed })
; LOAD: Pointer t24 has bank info: NamedValue("load_f0_op28_t23_bank_val")
; LOAD: Using bank register S2 for load
    LOAD T1, S2, T0
    ADD T3, T3, T1
; Load instruction: t27 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op29_t27 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+6
    ADD T1, FP, R0
    ADDI T1, T1, 6
; Spill load_f0_op18_t14_bank_val to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE S1, SB, SC
    LOAD S1, SB, T1
    LI T7, 16
    SRL S1, S1, T7
    ADD T3, T3, S1
    STORE T3, T4, T2
; Jump to epilogue
    BEQ R0, R0, L_q_add_99999
L_q_add_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
q_sub:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 14 slots for locals
    ADDI SP, SP, 14
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 1 bank from A3
; Load param 2 from FP-7
    ADDI SC, FP, -7
    LOAD S1, SB, SC
; Load param 2 bank from FP-8
    ADDI SC, FP, -8
    LOAD S0, SB, SC
L_q_sub_1:
    ADD T7, FP, R0
    STORE S3, SB, T7
    ADDI T6, T7, 1
    STORE A1, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 2
    STORE S2, SB, T5
    ADDI T4, T5, 1
    STORE A3, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    STORE S1, SB, T3
    ADDI T2, T3, 1
    STORE S0, SB, T2
; Load instruction: t6 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op10_t6 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, T5
    ADDI T0, T5, 1
    LOAD T6, SB, T0
    ADDI T4, T1, 1
; GEP: Setting bank info for t7 to NamedValue("load_f2_op12_t6_bank_val")
; Load instruction: t8 = load FatPtr(FatPointer { addr: Temp(7), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Mixed })
; LOAD: Pointer t7 has bank info: NamedValue("load_f2_op12_t6_bank_val")
; LOAD: Using bank register T6 for load
    LOAD T2, T6, T4
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op13_t9 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, T3
    ADDI T1, T3, 1
; Spill param_bank_f2_op5_2 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S0, SB, SC
    LOAD S0, SB, T1
    ADDI T1, T0, 1
; GEP: Setting bank info for t10 to NamedValue("load_f2_op15_t9_bank_val")
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(10), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Mixed })
; LOAD: Pointer t10 has bank info: NamedValue("load_f2_op15_t9_bank_val")
; LOAD: Using bank register S0 for load
    LOAD T0, S0, T1
; Spill t0 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S3, SB, SC
    SLT S3, T2, T0
    LI T7, 1
    SUB T2, T7, S3
    BEQ T2, R0, L_q_sub_3
; Branch to L_q_sub_3 if condition is false
    BEQ R0, R0, L_q_sub_2
; Unconditional branch to L_q_sub_2 (condition was true)
; Invalidated 2 alloca bindings
L_q_sub_2:
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op18_t13 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+0
    ADD S3, FP, R0
    LOAD T7, SB, S3
    ADDI T0, S3, 1
    LOAD T2, SB, T0
    ADDI T3, T7, 1
; GEP: Setting bank info for t14 to NamedValue("load_f2_op20_t13_bank_val")
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op21_t15 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T5, FP, R0
    ADDI T5, T5, 2
    LOAD T0, SB, T5
    ADDI T7, T5, 1
; Spill t1 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S2, SB, SC
    LOAD S2, SB, T7
    ADDI T7, T0, 1
; GEP: Setting bank info for t16 to NamedValue("load_f2_op23_t15_bank_val")
; Load instruction: t17 = load FatPtr(FatPointer { addr: Temp(16), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(16), bank: Mixed })
; LOAD: Pointer t16 has bank info: NamedValue("load_f2_op23_t15_bank_val")
; LOAD: Using bank register S2 for load
    LOAD T0, S2, T7
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op24_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t2 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S1, SB, SC
; Recompute alloca t5 at FP+4
    ADD S1, FP, R0
    ADDI S1, S1, 4
; Spill t7 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T4, SB, SC
    LOAD T4, SB, S1
; Spill load_f2_op12_t6_bank_val to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T6, SB, SC
    ADDI T6, S1, 1
; Spill t10 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T1, SB, SC
    LOAD T1, SB, T6
    ADDI T6, T4, 1
; GEP: Setting bank info for t19 to NamedValue("load_f2_op26_t18_bank_val")
; Load instruction: t20 = load FatPtr(FatPointer { addr: Temp(19), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(19), bank: Mixed })
; LOAD: Pointer t19 has bank info: NamedValue("load_f2_op26_t18_bank_val")
; LOAD: Using bank register T1 for load
    LOAD T4, T1, T6
    SUB T0, T0, T4
    STORE T0, T2, T3
; Load instruction: t22 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op27_t22 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, S3
; Spill load_f2_op15_t9_bank_val to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE S0, SB, SC
    ADDI S0, S3, 1
    LOAD T5, SB, S0
    ADD S0, T4, R0
; GEP: Setting bank info for t23 to NamedValue("load_f2_op29_t22_bank_val")
; Load instruction: t24 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op30_t24 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T4, FP, R0
    ADDI T4, T4, 2
; Spill t16 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T7, SB, SC
    LOAD T7, SB, T4
; Spill load_f2_op23_t15_bank_val to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S2, SB, SC
    ADDI S2, T4, 1
    LOAD S1, SB, S2
    ADD S2, T7, R0
; GEP: Setting bank info for t25 to NamedValue("load_f2_op32_t24_bank_val")
; Load instruction: t26 = load FatPtr(FatPointer { addr: Temp(25), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(25), bank: Mixed })
; LOAD: Pointer t25 has bank info: NamedValue("load_f2_op32_t24_bank_val")
; LOAD: Using bank register S1 for load
    LOAD T7, S1, S2
; Load instruction: t27 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op33_t27 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t19 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T6, SB, SC
; Recompute alloca t5 at FP+4
    ADD T6, FP, R0
    ADDI T6, T6, 4
; Spill load_f2_op26_t18_bank_val to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T1, SB, SC
    LOAD T1, SB, T6
; Spill t21 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T0, SB, SC
    ADDI T0, T6, 1
; Spill t14 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T3, SB, SC
    LOAD T3, SB, T0
    ADD T0, T1, R0
; GEP: Setting bank info for t28 to NamedValue("load_f2_op35_t27_bank_val")
; Load instruction: t29 = load FatPtr(FatPointer { addr: Temp(28), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(28), bank: Mixed })
; LOAD: Pointer t28 has bank info: NamedValue("load_f2_op35_t27_bank_val")
; LOAD: Using bank register T3 for load
    LOAD T1, T3, T0
    SUB T7, T7, T1
    STORE T7, T5, S0
    BEQ R0, R0, L_q_sub_4
; Unconditional branch to L_q_sub_4
; Invalidated 3 alloca bindings
L_q_sub_3:
; Load instruction: t31 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op36_t31 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+0
    ADD T1, FP, R0
    LOAD T4, SB, T1
    ADDI T6, T1, 1
    LOAD S3, SB, T6
    ADDI T6, T4, 1
; GEP: Setting bank info for t32 to NamedValue("load_f2_op38_t31_bank_val")
; Load instruction: t33 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op39_t33 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T4, FP, R0
    ADDI T4, T4, 2
; Spill load_f2_op20_t13_bank_val to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T2, SB, SC
    LOAD T2, SB, T4
; Spill t25 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE S2, SB, SC
    ADDI S2, T4, 1
; Spill load_f2_op32_t24_bank_val to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE S1, SB, SC
    LOAD S1, SB, S2
    ADDI S2, T2, 1
; GEP: Setting bank info for t34 to NamedValue("load_f2_op41_t33_bank_val")
; Load instruction: t35 = load FatPtr(FatPointer { addr: Temp(34), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(34), bank: Mixed })
; LOAD: Pointer t34 has bank info: NamedValue("load_f2_op41_t33_bank_val")
; LOAD: Using bank register S1 for load
    LOAD T2, S1, S2
; Spill t28 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 31
    STORE T0, SB, SC
    LI T0, 0
    ADD T0, T0, T2
; Load instruction: t37 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op42_t37 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+4
    ADD T2, FP, R0
    ADDI T2, T2, 4
; Spill load_f2_op35_t27_bank_val to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 32
    STORE T3, SB, SC
    LOAD T3, SB, T2
; Spill t30 to slot 19
    ADD SC, FP, R0
    ADDI SC, SC, 33
    STORE T7, SB, SC
    ADDI T7, T2, 1
; Spill t23 to slot 20
    ADD SC, FP, R0
    ADDI SC, SC, 34
    STORE S0, SB, SC
    LOAD S0, SB, T7
    ADDI T7, T3, 1
; GEP: Setting bank info for t38 to NamedValue("load_f2_op44_t37_bank_val")
; Load instruction: t39 = load FatPtr(FatPointer { addr: Temp(38), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(38), bank: Mixed })
; LOAD: Pointer t38 has bank info: NamedValue("load_f2_op44_t37_bank_val")
; LOAD: Using bank register S0 for load
    LOAD T3, S0, T7
    SUB T0, T0, T3
    STORE T0, S3, T6
; Load instruction: t41 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op45_t41 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T3, SB, T1
; Spill load_f2_op29_t22_bank_val to slot 21
    ADD SC, FP, R0
    ADDI SC, SC, 35
    STORE T5, SB, SC
    ADDI T5, T1, 1
    LOAD T4, SB, T5
    ADD T5, T3, R0
; GEP: Setting bank info for t42 to NamedValue("load_f2_op47_t41_bank_val")
; Load instruction: t43 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op48_t43 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T3, FP, R0
    ADDI T3, T3, 2
; Spill t34 to slot 22
    ADD SC, FP, R0
    ADDI SC, SC, 36
    STORE S2, SB, SC
    LOAD S2, SB, T3
; Spill load_f2_op41_t33_bank_val to slot 23
    ADD SC, FP, R0
    ADDI SC, SC, 37
    STORE S1, SB, SC
    ADDI S1, T3, 1
    LOAD T2, SB, S1
    ADD S1, S2, R0
; GEP: Setting bank info for t44 to NamedValue("load_f2_op50_t43_bank_val")
; Load instruction: t45 = load FatPtr(FatPointer { addr: Temp(44), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(44), bank: Mixed })
; LOAD: Pointer t44 has bank info: NamedValue("load_f2_op50_t43_bank_val")
; LOAD: Using bank register T2 for load
    LOAD S2, T2, S1
; Load instruction: t46 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op51_t46 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t38 to slot 24
    ADD SC, FP, R0
    ADDI SC, SC, 38
    STORE T7, SB, SC
; Recompute alloca t5 at FP+4
    ADD T7, FP, R0
    ADDI T7, T7, 4
; Spill load_f2_op44_t37_bank_val to slot 25
    ADD SC, FP, R0
    ADDI SC, SC, 39
    STORE S0, SB, SC
    LOAD S0, SB, T7
; Spill t40 to slot 26
    ADD SC, FP, R0
    ADDI SC, SC, 40
    STORE T0, SB, SC
    ADDI T0, T7, 1
; Spill t32 to slot 27
    ADD SC, FP, R0
    ADDI SC, SC, 41
    STORE T6, SB, SC
    LOAD T6, SB, T0
    ADD T0, S0, R0
; GEP: Setting bank info for t47 to NamedValue("load_f2_op53_t46_bank_val")
; Load instruction: t48 = load FatPtr(FatPointer { addr: Temp(47), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(47), bank: Mixed })
; LOAD: Pointer t47 has bank info: NamedValue("load_f2_op53_t46_bank_val")
; LOAD: Using bank register T6 for load
    LOAD S0, T6, T0
    SUB S2, S2, S0
    LI S0, 1
    SUB S2, S2, S0
    STORE S2, T4, T5
    BEQ R0, R0, L_q_sub_4
; Unconditional branch to L_q_sub_4
; Invalidated 3 alloca bindings
L_q_sub_4:
; Jump to epilogue
    BEQ R0, R0, L_q_sub_99999
L_q_sub_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
q_mul:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 21 slots for locals
    ADDI SP, SP, 21
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 1 bank from A3
; Load param 2 from FP-7
    ADDI SC, FP, -7
    LOAD S1, SB, SC
; Load param 2 bank from FP-8
    ADDI SC, FP, -8
    LOAD S0, SB, SC
L_q_mul_5:
    ADD T7, FP, R0
    STORE S3, SB, T7
    ADDI T6, T7, 1
    STORE A1, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 2
    STORE S2, SB, T5
    ADDI T4, T5, 1
    STORE A3, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    STORE S1, SB, T3
    ADDI T2, T3, 1
    STORE S0, SB, T2
    ADD T1, FP, R0
    ADDI T1, T1, 6
    LI T0, 1
    STORE T0, SB, T1
    ADD T6, FP, R0
    ADDI T6, T6, 7
; Load instruction: t8 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op11_t8 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, T5
    ADDI T2, T5, 1
    LOAD T0, SB, T2
    ADD T2, T4, R0
; GEP: Setting bank info for t9 to NamedValue("load_f4_op13_t8_bank_val")
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(9), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(9), bank: Mixed })
; LOAD: Pointer t9 has bank info: NamedValue("load_f4_op13_t8_bank_val")
; LOAD: Using bank register T0 for load
    LOAD T4, T0, T2
    STORE T4, SB, T6
; Spill param_bank_f4_op5_2 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE S0, SB, SC
    ADD S0, FP, R0
    ADDI S0, S0, 8
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op14_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t0 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE S3, SB, SC
    LOAD S3, SB, T3
    ADDI T7, T3, 1
; Spill t1 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S2, SB, SC
    LOAD S2, SB, T7
    ADD T7, S3, R0
; GEP: Setting bank info for t13 to NamedValue("load_f4_op16_t12_bank_val")
; Load instruction: t14 = load FatPtr(FatPointer { addr: Temp(13), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(13), bank: Mixed })
; LOAD: Pointer t13 has bank info: NamedValue("load_f4_op16_t12_bank_val")
; LOAD: Using bank register S2 for load
    LOAD S3, S2, T7
    STORE S3, SB, S0
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op17_t15 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t2 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE S1, SB, SC
    LOAD S1, SB, T5
    ADDI T1, T5, 1
; Spill t9 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T2, SB, SC
    LOAD T2, SB, T1
    ADD T1, S1, R0
; GEP: Setting bank info for t16 to NamedValue("load_f4_op19_t15_bank_val")
; Load instruction: t17 = load FatPtr(FatPointer { addr: Temp(16), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(16), bank: Mixed })
; LOAD: Pointer t16 has bank info: NamedValue("load_f4_op19_t15_bank_val")
; LOAD: Using bank register T2 for load
    LOAD S1, T2, T1
; Spill load_f4_op13_t8_bank_val to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T0, SB, SC
    LI T0, 0
    SLT S1, S1, T0
    BEQ S1, R0, L_q_mul_8
; Branch to L_q_mul_8 if condition is false
    BEQ R0, R0, L_q_mul_6
; Unconditional branch to L_q_mul_6 (condition was true)
; Invalidated 4 alloca bindings
L_q_mul_6:
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op20_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+6
    ADD T0, FP, R0
    ADDI T0, T0, 6
    LOAD S1, SB, T0
    LI T3, 0
    SUB T3, T3, S1
    STORE T3, SB, T0
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op21_t21 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T5, FP, R0
    ADDI T5, T5, 2
    LOAD T6, SB, T5
    ADDI S0, T5, 1
    LOAD S1, SB, S0
    ADD S0, T6, R0
; GEP: Setting bank info for t22 to NamedValue("load_f4_op23_t21_bank_val")
; Load instruction: t23 = load FatPtr(FatPointer { addr: Temp(22), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(22), bank: Mixed })
; LOAD: Pointer t22 has bank info: NamedValue("load_f4_op23_t21_bank_val")
; LOAD: Using bank register S1 for load
    LOAD T6, S1, S0
; Spill t10 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T4, SB, SC
    LI T4, 0
    SUB T4, T4, T6
; Recompute alloca t7 at FP+7
    ADD T6, FP, R0
    ADDI T6, T6, 7
    STORE T4, SB, T6
    BEQ R0, R0, L_q_mul_8
; Unconditional branch to L_q_mul_8
; Invalidated 3 alloca bindings
L_q_mul_8:
; Load instruction: t25 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op24_t25 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+4
    ADD T0, FP, R0
    ADDI T0, T0, 4
    LOAD T5, SB, T0
    ADDI T6, T0, 1
; Spill t13 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T7, SB, SC
    LOAD T7, SB, T6
    ADD T6, T5, R0
; GEP: Setting bank info for t26 to NamedValue("load_f4_op26_t25_bank_val")
; Load instruction: t27 = load FatPtr(FatPointer { addr: Temp(26), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(26), bank: Mixed })
; LOAD: Pointer t26 has bank info: NamedValue("load_f4_op26_t25_bank_val")
; LOAD: Using bank register T7 for load
    LOAD T5, T7, T6
; Spill load_f4_op16_t12_bank_val to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE S2, SB, SC
    LI S2, 0
    SLT T5, T5, S2
    BEQ T5, R0, L_q_mul_11
; Branch to L_q_mul_11 if condition is false
    BEQ R0, R0, L_q_mul_9
; Unconditional branch to L_q_mul_9 (condition was true)
; Invalidated 1 alloca bindings
L_q_mul_9:
; Load instruction: t29 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op27_t29 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+6
    ADD S2, FP, R0
    ADDI S2, S2, 6
    LOAD T5, SB, S2
    LI T0, 0
    SUB T0, T0, T5
    STORE T0, SB, S2
; Load instruction: t31 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op28_t31 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+4
    ADD T5, FP, R0
    ADDI T5, T5, 4
; Spill t14 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE S3, SB, SC
    LOAD S3, SB, T5
; Spill t16 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 31
    STORE T1, SB, SC
    ADDI T1, T5, 1
; Spill load_f4_op19_t15_bank_val to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 32
    STORE T2, SB, SC
    LOAD T2, SB, T1
    ADD T1, S3, R0
; GEP: Setting bank info for t32 to NamedValue("load_f4_op30_t31_bank_val")
; Load instruction: t33 = load FatPtr(FatPointer { addr: Temp(32), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(32), bank: Mixed })
; LOAD: Pointer t32 has bank info: NamedValue("load_f4_op30_t31_bank_val")
; LOAD: Using bank register T2 for load
    LOAD S3, T2, T1
; Spill t20 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 33
    STORE T3, SB, SC
    LI T3, 0
    SUB T3, T3, S3
; Recompute alloca t11 at FP+8
    ADD S3, FP, R0
    ADDI S3, S3, 8
    STORE T3, SB, S3
    BEQ R0, R0, L_q_mul_11
; Unconditional branch to L_q_mul_11
; Invalidated 3 alloca bindings
L_q_mul_11:
    ADD T5, FP, R0
    ADDI T5, T5, 9
; Load instruction: t36 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op31_t36 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+7
    ADD S2, FP, R0
    ADDI S2, S2, 7
    LOAD S3, SB, S2
; Load instruction: t37 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op32_t37 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t22 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 34
    STORE S0, SB, SC
; Recompute alloca t11 at FP+8
    ADD S0, FP, R0
    ADDI S0, S0, 8
; Spill load_f4_op23_t21_bank_val to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 35
    STORE S1, SB, SC
    LOAD S1, SB, S0
    MUL S3, S3, S1
    STORE S3, SB, T5
    ADD S1, FP, R0
    ADDI S1, S1, 10
; Spill t24 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 36
    STORE T4, SB, SC
    LI T4, 0
    STORE T4, SB, S1
    ADD T4, FP, R0
    ADDI T4, T4, 11
; Spill t26 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 37
    STORE T6, SB, SC
    LI T6, 0
    STORE T6, SB, T4
; Load instruction: t41 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op35_t41 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T6, SB, S0
; Spill load_f4_op26_t25_bank_val to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 38
    STORE T7, SB, SC
    LI T7, 0
    SLT T6, T7, T6
; Load instruction: t43 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op36_t43 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T7, FP, R0
    ADDI T7, T7, 2
; Spill t30 to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 39
    STORE T0, SB, SC
    LOAD T0, SB, T7
; Spill t32 to slot 19
    ADD SC, FP, R0
    ADDI SC, SC, 40
    STORE T1, SB, SC
    ADDI T1, T7, 1
; Spill load_f4_op30_t31_bank_val to slot 20
    ADD SC, FP, R0
    ADDI SC, SC, 41
    STORE T2, SB, SC
    LOAD T2, SB, T1
    ADDI T1, T0, 1
; GEP: Setting bank info for t44 to NamedValue("load_f4_op38_t43_bank_val")
; Load instruction: t45 = load FatPtr(FatPointer { addr: Temp(44), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(44), bank: Mixed })
; LOAD: Pointer t44 has bank info: NamedValue("load_f4_op38_t43_bank_val")
; LOAD: Using bank register T2 for load
    LOAD T0, T2, T1
; Spill t34 to slot 21
    ADD SC, FP, R0
    ADDI SC, SC, 42
    STORE T3, SB, SC
    LI T3, 0
    SLT T0, T3, T0
    AND T6, T6, T0
    BEQ T6, R0, L_q_mul_14
; Branch to L_q_mul_14 if condition is false
    BEQ R0, R0, L_q_mul_12
; Unconditional branch to L_q_mul_12 (condition was true)
; Invalidated 6 alloca bindings
L_q_mul_12:
; Load instruction: t48 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op39_t48 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t11 at FP+8
    ADD T3, FP, R0
    ADDI T3, T3, 8
    LOAD T0, SB, T3
    LI T6, 2
    XOR T4, T0, T6
    LI T5, 1
    SLTU T0, T4, T5
; Load instruction: t50 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op42_t50 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T7, FP, R0
    ADDI T7, T7, 2
    LOAD S0, SB, T7
    ADDI S1, T7, 1
    LOAD S2, SB, S1
    ADDI T4, S0, 1
; GEP: Setting bank info for t51 to NamedValue("load_f4_op44_t50_bank_val")
; Load instruction: t52 = load FatPtr(FatPointer { addr: Temp(51), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(51), bank: Mixed })
; LOAD: Pointer t51 has bank info: NamedValue("load_f4_op44_t50_bank_val")
; LOAD: Using bank register S2 for load
    LOAD T5, S2, T4
    LI T6, -32768
    XOR S1, T5, T6
    LI S0, 1
    SLTU T5, S1, S0
    AND T0, T0, T5
    BEQ T0, R0, L_q_mul_16
; Branch to L_q_mul_16 if condition is false
    BEQ R0, R0, L_q_mul_15
; Unconditional branch to L_q_mul_15 (condition was true)
; Invalidated 2 alloca bindings
L_q_mul_15:
    LI S1, 1
; Recompute alloca t39 at FP+10
    ADD S0, FP, R0
    ADDI S0, S0, 10
    STORE S1, SB, S0
    LI T6, 0
; Recompute alloca t40 at FP+11
    ADD T5, FP, R0
    ADDI T5, T5, 11
    STORE T6, SB, T5
    BEQ R0, R0, L_q_mul_17
; Unconditional branch to L_q_mul_17
; Invalidated 2 alloca bindings
L_q_mul_16:
; Load instruction: t55 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op49_t55 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t11 at FP+8
    ADD T0, FP, R0
    ADDI T0, T0, 8
    LOAD T3, SB, T0
    LI T7, 1
    XOR S1, T3, T7
    LI T6, 1
    SLTU T3, S1, T6
    BEQ T3, R0, L_q_mul_19
; Branch to L_q_mul_19 if condition is false
    BEQ R0, R0, L_q_mul_18
; Unconditional branch to L_q_mul_18 (condition was true)
; Invalidated 1 alloca bindings
L_q_mul_18:
; Load instruction: t57 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op52_t57 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T5, FP, R0
    ADDI T5, T5, 2
    LOAD S0, SB, T5
    ADDI S1, T5, 1
    LOAD T6, SB, S1
    ADDI T7, S0, 1
; GEP: Setting bank info for t58 to NamedValue("load_f4_op54_t57_bank_val")
; Load instruction: t59 = load FatPtr(FatPointer { addr: Temp(58), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(58), bank: Mixed })
; LOAD: Pointer t58 has bank info: NamedValue("load_f4_op54_t57_bank_val")
; LOAD: Using bank register T6 for load
    LOAD T3, T6, T7
; Recompute alloca t40 at FP+11
    ADD T0, FP, R0
    ADDI T0, T0, 11
    STORE T3, SB, T0
    BEQ R0, R0, L_q_mul_20
; Unconditional branch to L_q_mul_20
; Invalidated 2 alloca bindings
L_q_mul_19:
; Load instruction: t60 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op55_t60 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t11 at FP+8
    ADD S1, FP, R0
    ADDI S1, S1, 8
    LOAD S0, SB, S1
; Load instruction: t61 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op56_t61 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T0, FP, R0
    ADDI T0, T0, 2
    LOAD T5, SB, T0
; Spill t38 to slot 22
    ADD SC, FP, R0
    ADDI SC, SC, 43
    STORE S3, SB, SC
    ADDI S3, T0, 1
; Spill t44 to slot 23
    ADD SC, FP, R0
    ADDI SC, SC, 44
    STORE T1, SB, SC
    LOAD T1, SB, S3
    ADDI S3, T5, 1
; GEP: Setting bank info for t62 to NamedValue("load_f4_op58_t61_bank_val")
; Load instruction: t63 = load FatPtr(FatPointer { addr: Temp(62), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(62), bank: Mixed })
; LOAD: Pointer t62 has bank info: NamedValue("load_f4_op58_t61_bank_val")
; LOAD: Using bank register T1 for load
    LOAD T5, T1, S3
; Spill load_f4_op38_t43_bank_val to slot 24
    ADD SC, FP, R0
    ADDI SC, SC, 45
    STORE T2, SB, SC
    LI T2, 1
    SRL T5, T5, T2
    MUL S0, S0, T5
; Recompute alloca t40 at FP+11
    ADD T2, FP, R0
    ADDI T2, T2, 11
    STORE S0, SB, T2
; Load instruction: t66 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op59_t66 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, T0
; Spill t51 to slot 25
    ADD SC, FP, R0
    ADDI SC, SC, 46
    STORE T4, SB, SC
    ADDI T4, T0, 1
; Spill load_f4_op44_t50_bank_val to slot 26
    ADD SC, FP, R0
    ADDI SC, SC, 47
    STORE S2, SB, SC
    LOAD S2, SB, T4
    ADDI T4, T5, 1
; GEP: Setting bank info for t67 to NamedValue("load_f4_op61_t66_bank_val")
; Load instruction: t68 = load FatPtr(FatPointer { addr: Temp(67), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(67), bank: Mixed })
; LOAD: Pointer t67 has bank info: NamedValue("load_f4_op61_t66_bank_val")
; LOAD: Using bank register S2 for load
    LOAD T5, S2, T4
; Spill t58 to slot 27
    ADD SC, FP, R0
    ADDI SC, SC, 48
    STORE T7, SB, SC
    LI T7, 1
    AND T5, T5, T7
    BEQ T5, R0, L_q_mul_23
; Branch to L_q_mul_23 if condition is false
    BEQ R0, R0, L_q_mul_21
; Unconditional branch to L_q_mul_21 (condition was true)
; Invalidated 3 alloca bindings
L_q_mul_21:
; Load instruction: t70 = load FatPtr(FatPointer { addr: Temp(40), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(40), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op62_t70 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t40 at FP+11
    ADD T7, FP, R0
    ADDI T7, T7, 11
    LOAD T5, SB, T7
; Load instruction: t71 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op63_t71 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t11 at FP+8
    ADD T0, FP, R0
    ADDI T0, T0, 8
    LOAD T2, SB, T0
    LI S1, 1
    SRL T2, T2, S1
    ADD T5, T5, T2
    STORE T5, SB, T7
    BEQ R0, R0, L_q_mul_23
; Unconditional branch to L_q_mul_23
; Invalidated 2 alloca bindings
L_q_mul_23:
    BEQ R0, R0, L_q_mul_20
; Unconditional branch to L_q_mul_20
L_q_mul_20:
    BEQ R0, R0, L_q_mul_17
; Unconditional branch to L_q_mul_17
L_q_mul_17:
    BEQ R0, R0, L_q_mul_14
; Unconditional branch to L_q_mul_14
L_q_mul_14:
; Load instruction: t74 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op64_t74 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+7
    ADD S1, FP, R0
    ADDI S1, S1, 7
    LOAD T2, SB, S1
    LI T0, 0
    SLT T2, T0, T2
; Load instruction: t76 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op65_t76 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+4
    ADD T7, FP, R0
    ADDI T7, T7, 4
    LOAD T0, SB, T7
; Spill load_f4_op54_t57_bank_val to slot 28
    ADD SC, FP, R0
    ADDI SC, SC, 49
    STORE T6, SB, SC
    ADDI T6, T7, 1
; Spill t59 to slot 29
    ADD SC, FP, R0
    ADDI SC, SC, 50
    STORE T3, SB, SC
    LOAD T3, SB, T6
    ADDI T6, T0, 1
; GEP: Setting bank info for t77 to NamedValue("load_f4_op67_t76_bank_val")
; Load instruction: t78 = load FatPtr(FatPointer { addr: Temp(77), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(77), bank: Mixed })
; LOAD: Pointer t77 has bank info: NamedValue("load_f4_op67_t76_bank_val")
; LOAD: Using bank register T3 for load
    LOAD T0, T3, T6
; Spill t62 to slot 30
    ADD SC, FP, R0
    ADDI SC, SC, 51
    STORE S3, SB, SC
    LI S3, 0
    SLT T0, S3, T0
    AND T2, T2, T0
    BEQ T2, R0, L_q_mul_26
; Branch to L_q_mul_26 if condition is false
    BEQ R0, R0, L_q_mul_24
; Unconditional branch to L_q_mul_24 (condition was true)
; Invalidated 2 alloca bindings
L_q_mul_24:
    ADD S3, FP, R0
    ADDI S3, S3, 12
; Load instruction: t82 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op68_t82 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+7
    ADD T0, FP, R0
    ADDI T0, T0, 7
    LOAD T2, SB, T0
; Load instruction: t83 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op69_t83 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+4
    ADD T7, FP, R0
    ADDI T7, T7, 4
    LOAD S1, SB, T7
; Spill load_f4_op58_t61_bank_val to slot 31
    ADD SC, FP, R0
    ADDI SC, SC, 52
    STORE T1, SB, SC
    ADDI T1, T7, 1
; Spill t65 to slot 32
    ADD SC, FP, R0
    ADDI SC, SC, 53
    STORE S0, SB, SC
    LOAD S0, SB, T1
    ADDI T1, S1, 1
; GEP: Setting bank info for t84 to NamedValue("load_f4_op71_t83_bank_val")
; Load instruction: t85 = load FatPtr(FatPointer { addr: Temp(84), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(84), bank: Mixed })
; LOAD: Pointer t84 has bank info: NamedValue("load_f4_op71_t83_bank_val")
; LOAD: Using bank register S0 for load
    LOAD S1, S0, T1
; Spill t67 to slot 33
    ADD SC, FP, R0
    ADDI SC, SC, 54
    STORE T4, SB, SC
    LI T4, 1
    SRL S1, S1, T4
    MUL T2, T2, S1
    STORE T2, SB, S3
; Load instruction: t88 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op72_t88 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, T7
    ADDI S1, T7, 1
; Spill load_f4_op61_t66_bank_val to slot 34
    ADD SC, FP, R0
    ADDI SC, SC, 55
    STORE S2, SB, SC
    LOAD S2, SB, S1
    ADDI S1, T4, 1
; GEP: Setting bank info for t89 to NamedValue("load_f4_op74_t88_bank_val")
; Load instruction: t90 = load FatPtr(FatPointer { addr: Temp(89), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(89), bank: Mixed })
; LOAD: Pointer t89 has bank info: NamedValue("load_f4_op74_t88_bank_val")
; LOAD: Using bank register S2 for load
    LOAD T4, S2, S1
; Spill t73 to slot 35
    ADD SC, FP, R0
    ADDI SC, SC, 56
    STORE T5, SB, SC
    LI T5, 1
    AND T4, T4, T5
    BEQ T4, R0, L_q_mul_29
; Branch to L_q_mul_29 if condition is false
    BEQ R0, R0, L_q_mul_27
; Unconditional branch to L_q_mul_27 (condition was true)
; Invalidated 3 alloca bindings
L_q_mul_27:
; Load instruction: t92 = load FatPtr(FatPointer { addr: Temp(81), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(81), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op75_t92 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t81 at FP+12
    ADD T5, FP, R0
    ADDI T5, T5, 12
    LOAD T4, SB, T5
; Load instruction: t93 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op76_t93 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+7
    ADD T0, FP, R0
    ADDI T0, T0, 7
    LOAD T7, SB, T0
    LI S3, 1
    SRL T7, T7, S3
    ADD T4, T4, T7
    STORE T4, SB, T5
    BEQ R0, R0, L_q_mul_29
; Unconditional branch to L_q_mul_29
; Invalidated 2 alloca bindings
L_q_mul_29:
; Load instruction: t96 = load FatPtr(FatPointer { addr: Temp(40), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(40), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op77_t96 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t40 at FP+11
    ADD S3, FP, R0
    ADDI S3, S3, 11
    LOAD T7, SB, S3
; Load instruction: t97 = load FatPtr(FatPointer { addr: Temp(81), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(81), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op78_t97 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t81 at FP+12
    ADD T0, FP, R0
    ADDI T0, T0, 12
    LOAD T5, SB, T0
    ADD T7, T7, T5
    STORE T7, SB, S3
    BEQ R0, R0, L_q_mul_26
; Unconditional branch to L_q_mul_26
; Invalidated 2 alloca bindings
L_q_mul_26:
; Load instruction: t99 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op79_t99 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+0
    ADD T5, FP, R0
    LOAD T0, SB, T5
    ADDI S3, T5, 1
; Spill t77 to slot 36
    ADD SC, FP, R0
    ADDI SC, SC, 57
    STORE T6, SB, SC
    LOAD T6, SB, S3
    ADD S3, T0, R0
; GEP: Setting bank info for t100 to NamedValue("load_f4_op81_t99_bank_val")
; Load instruction: t101 = load FatPtr(FatPointer { addr: Temp(35), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(35), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op82_t101 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t35 at FP+9
    ADD T0, FP, R0
    ADDI T0, T0, 9
; Spill load_f4_op67_t76_bank_val to slot 37
    ADD SC, FP, R0
    ADDI SC, SC, 58
    STORE T3, SB, SC
    LOAD T3, SB, T0
; Load instruction: t102 = load FatPtr(FatPointer { addr: Temp(39), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(39), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op83_t102 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t84 to slot 38
    ADD SC, FP, R0
    ADDI SC, SC, 59
    STORE T1, SB, SC
; Recompute alloca t39 at FP+10
    ADD T1, FP, R0
    ADDI T1, T1, 10
; Spill load_f4_op71_t83_bank_val to slot 39
    ADD SC, FP, R0
    ADDI SC, SC, 60
    STORE S0, SB, SC
    LOAD S0, SB, T1
    ADD T3, T3, S0
    STORE T3, T6, S3
; Load instruction: t104 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op84_t104 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, T5
; Spill t87 to slot 40
    ADD SC, FP, R0
    ADDI SC, SC, 61
    STORE T2, SB, SC
    ADDI T2, T5, 1
; Spill t89 to slot 41
    ADD SC, FP, R0
    ADDI SC, SC, 62
    STORE S1, SB, SC
    LOAD S1, SB, T2
    ADDI T2, S0, 1
; GEP: Setting bank info for t105 to NamedValue("load_f4_op86_t104_bank_val")
; Load instruction: t106 = load FatPtr(FatPointer { addr: Temp(40), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(40), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op87_t106 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t40 at FP+11
    ADD S0, FP, R0
    ADDI S0, S0, 11
; Spill load_f4_op74_t88_bank_val to slot 42
    ADD SC, FP, R0
    ADDI SC, SC, 63
    STORE S2, SB, SC
    LOAD S2, SB, S0
    STORE S2, S1, T2
; Load instruction: t107 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op88_t107 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t95 to slot 43
    ADD SC, FP, R0
    ADDI SC, SC, 64
    STORE T4, SB, SC
; Recompute alloca t6 at FP+6
    ADD T4, FP, R0
    ADDI T4, T4, 6
; Spill t98 to slot 44
    ADD SC, FP, R0
    ADDI SC, SC, 65
    STORE T7, SB, SC
    LOAD T7, SB, T4
    LI T0, 0
    SLT T7, T7, T0
    BEQ T7, R0, L_q_mul_32
; Branch to L_q_mul_32 if condition is false
    BEQ R0, R0, L_q_mul_30
; Unconditional branch to L_q_mul_30 (condition was true)
; Invalidated 4 alloca bindings
L_q_mul_30:
; Load instruction: t109 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op89_t109 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+0
    ADD T0, FP, R0
    LOAD T7, SB, T0
    ADDI T1, T0, 1
    LOAD T4, SB, T1
    ADD T5, T7, R0
; GEP: Setting bank info for t110 to NamedValue("load_f4_op91_t109_bank_val")
; Load instruction: t111 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op92_t111 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, T0
    ADDI T1, T0, 1
    LOAD T7, SB, T1
    ADD T1, S0, R0
; GEP: Setting bank info for t112 to NamedValue("load_f4_op94_t111_bank_val")
; Load instruction: t113 = load FatPtr(FatPointer { addr: Temp(112), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(112), bank: Mixed })
; LOAD: Pointer t112 has bank info: NamedValue("load_f4_op94_t111_bank_val")
; LOAD: Using bank register T7 for load
    LOAD S0, T7, T1
; Spill t103 to slot 45
    ADD SC, FP, R0
    ADDI SC, SC, 66
    STORE T3, SB, SC
    LI T3, 0
    SUB T3, T3, S0
    STORE T3, T4, T5
; Load instruction: t115 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op95_t115 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, T0
; Spill t100 to slot 46
    ADD SC, FP, R0
    ADDI SC, SC, 67
    STORE S3, SB, SC
    ADDI S3, T0, 1
; Spill load_f4_op81_t99_bank_val to slot 47
    ADD SC, FP, R0
    ADDI SC, SC, 68
    STORE T6, SB, SC
    LOAD T6, SB, S3
    ADDI S3, S0, 1
; GEP: Setting bank info for t116 to NamedValue("load_f4_op97_t115_bank_val")
; Load instruction: t117 = load FatPtr(FatPointer { addr: Temp(116), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(116), bank: Mixed })
; LOAD: Pointer t116 has bank info: NamedValue("load_f4_op97_t115_bank_val")
; LOAD: Using bank register T6 for load
    LOAD S0, T6, S3
; Spill t106 to slot 48
    ADD SC, FP, R0
    ADDI SC, SC, 69
    STORE S2, SB, SC
    LI S2, 0
    SLT S0, S2, S0
    BEQ S0, R0, L_q_mul_35
; Branch to L_q_mul_35 if condition is false
    BEQ R0, R0, L_q_mul_33
; Unconditional branch to L_q_mul_33 (condition was true)
; Invalidated 1 alloca bindings
L_q_mul_33:
; Load instruction: t119 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op98_t119 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+0
    ADD S2, FP, R0
    LOAD S0, SB, S2
    ADDI T0, S2, 1
; Spill t105 to slot 49
    ADD SC, FP, R0
    ADDI SC, SC, 70
    STORE T2, SB, SC
    LOAD T2, SB, T0
    ADD T0, S0, R0
; GEP: Setting bank info for t120 to NamedValue("load_f4_op100_t119_bank_val")
; Load instruction: t121 = load FatPtr(FatPointer { addr: Temp(120), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(120), bank: Mixed })
; LOAD: Pointer t120 has bank info: NamedValue("load_f4_op100_t119_bank_val")
; LOAD: Using bank register T2 for load
    LOAD S0, T2, T0
; Spill load_f4_op86_t104_bank_val to slot 50
    ADD SC, FP, R0
    ADDI SC, SC, 71
    STORE S1, SB, SC
    LI S1, 0
    ADD S0, S0, S1
; Load instruction: t123 = load FatPtr(FatPointer { addr: Temp(120), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(120), bank: Mixed })
; LOAD: Pointer t120 has bank info: NamedValue("load_f4_op100_t119_bank_val")
; LOAD: Using bank register T2 for load
    LOAD S1, T2, T0
; Spill t112 to slot 51
    ADD SC, FP, R0
    ADDI SC, SC, 72
    STORE T1, SB, SC
    LI T1, 1
    SUB S1, S1, T1
    STORE S1, T2, T0
; Load instruction: t125 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op101_t125 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, S2
; Spill load_f4_op94_t111_bank_val to slot 52
    ADD SC, FP, R0
    ADDI SC, SC, 73
    STORE T7, SB, SC
    ADDI T7, S2, 1
; Spill t114 to slot 53
    ADD SC, FP, R0
    ADDI SC, SC, 74
    STORE T3, SB, SC
    LOAD T3, SB, T7
    ADDI T7, T1, 1
; GEP: Setting bank info for t126 to NamedValue("load_f4_op103_t125_bank_val")
; Load instruction: t127 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op104_t127 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, S2
; Spill t110 to slot 54
    ADD SC, FP, R0
    ADDI SC, SC, 75
    STORE T5, SB, SC
    ADDI T5, S2, 1
; Spill load_f4_op91_t109_bank_val to slot 55
    ADD SC, FP, R0
    ADDI SC, SC, 76
    STORE T4, SB, SC
    LOAD T4, SB, T5
    ADDI T5, T1, 1
; GEP: Setting bank info for t128 to NamedValue("load_f4_op106_t127_bank_val")
; Load instruction: t129 = load FatPtr(FatPointer { addr: Temp(128), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(128), bank: Mixed })
; LOAD: Pointer t128 has bank info: NamedValue("load_f4_op106_t127_bank_val")
; LOAD: Using bank register T4 for load
    LOAD T1, T4, T5
; Spill t116 to slot 56
    ADD SC, FP, R0
    ADDI SC, SC, 77
    STORE S3, SB, SC
    LI S3, 0
    SUB S3, S3, T1
    STORE S3, T3, T7
    BEQ R0, R0, L_q_mul_35
; Unconditional branch to L_q_mul_35
; Invalidated 1 alloca bindings
L_q_mul_35:
    BEQ R0, R0, L_q_mul_32
; Unconditional branch to L_q_mul_32
L_q_mul_32:
; Jump to epilogue
    BEQ R0, R0, L_q_mul_99999
L_q_mul_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
q_div:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 14 slots for locals
    ADDI SP, SP, 14
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 1 bank from A3
; Load param 2 from FP-7
    ADDI SC, FP, -7
    LOAD S1, SB, SC
; Load param 2 bank from FP-8
    ADDI SC, FP, -8
    LOAD S0, SB, SC
L_q_div_36:
    ADD T7, FP, R0
    STORE S3, SB, T7
    ADDI T6, T7, 1
    STORE A1, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 2
    STORE S2, SB, T5
    ADDI T4, T5, 1
    STORE A3, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    STORE S1, SB, T3
    ADDI T2, T3, 1
    STORE S0, SB, T2
; Load instruction: t6 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op10_t6 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, T3
    ADDI T0, T3, 1
    LOAD T6, SB, T0
    ADD T4, T1, R0
; GEP: Setting bank info for t7 to NamedValue("load_f6_op12_t6_bank_val")
; Load instruction: t8 = load FatPtr(FatPointer { addr: Temp(7), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Mixed })
; LOAD: Pointer t7 has bank info: NamedValue("load_f6_op12_t6_bank_val")
; LOAD: Using bank register T6 for load
    LOAD T2, T6, T4
    LI T0, 0
    XOR T1, T2, T0
; Spill param_bank_f6_op5_2 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S0, SB, SC
    LI S0, 1
    SLTU T2, T1, S0
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op15_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, T3
    ADDI S0, T3, 1
    LOAD T0, SB, S0
    ADDI S0, T1, 1
; GEP: Setting bank info for t11 to NamedValue("load_f6_op17_t10_bank_val")
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(11), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Mixed })
; LOAD: Pointer t11 has bank info: NamedValue("load_f6_op17_t10_bank_val")
; LOAD: Using bank register T0 for load
    LOAD T1, T0, S0
; Spill t0 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S3, SB, SC
    LI S3, 0
    XOR T7, T1, S3
; Spill t1 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S2, SB, SC
    LI S2, 1
    SLTU T1, T7, S2
    AND T2, T2, T1
    BEQ T2, R0, L_q_div_39
; Branch to L_q_div_39 if condition is false
    BEQ R0, R0, L_q_div_37
; Unconditional branch to L_q_div_37 (condition was true)
; Invalidated 2 alloca bindings
L_q_div_37:
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op20_t15 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+0
    ADD T7, FP, R0
    LOAD S2, SB, T7
    ADDI S3, T7, 1
    LOAD T1, SB, S3
    ADD T2, S2, R0
; GEP: Setting bank info for t16 to NamedValue("load_f6_op22_t15_bank_val")
    LI T3, 32767
    STORE T3, T1, T2
; Load instruction: t17 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op24_t17 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, T7
    ADDI S3, T7, 1
    LOAD S2, SB, S3
    ADDI T3, T5, 1
; GEP: Setting bank info for t18 to NamedValue("load_f6_op26_t17_bank_val")
    LI S3, -1
    STORE S3, S2, T3
; Jump to epilogue
    BEQ R0, R0, L_q_div_99999
    BEQ R0, R0, L_q_div_39
; Unconditional branch to L_q_div_39
; Invalidated 1 alloca bindings
L_q_div_39:
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op28_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+4
    ADD T5, FP, R0
    ADDI T5, T5, 4
    LOAD S3, SB, T5
    ADDI T7, T5, 1
; Spill t2 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S1, SB, SC
    LOAD S1, SB, T7
    ADD T7, S3, R0
; GEP: Setting bank info for t20 to NamedValue("load_f6_op30_t19_bank_val")
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(20), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(20), bank: Mixed })
; LOAD: Pointer t20 has bank info: NamedValue("load_f6_op30_t19_bank_val")
; LOAD: Using bank register S1 for load
    LOAD S3, S1, T7
; Spill t7 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T4, SB, SC
    LI T4, 0
; Spill load_f6_op12_t6_bank_val to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T6, SB, SC
    XOR T6, S3, T4
; Spill t11 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE S0, SB, SC
    LI S0, 0
    SLTU S3, S0, T6
    BEQ S3, R0, L_q_div_41
; Branch to L_q_div_41 if condition is false
    BEQ R0, R0, L_q_div_40
; Unconditional branch to L_q_div_40 (condition was true)
; Invalidated 1 alloca bindings
L_q_div_40:
; Load instruction: t23 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op33_t23 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+0
    ADD T6, FP, R0
    LOAD S0, SB, T6
    ADDI T4, T6, 1
    LOAD S3, SB, T4
    ADD T5, S0, R0
; GEP: Setting bank info for t24 to NamedValue("load_f6_op35_t23_bank_val")
; Load instruction: t25 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op36_t25 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+2
    ADD T4, FP, R0
    ADDI T4, T4, 2
    LOAD S0, SB, T4
; Spill load_f6_op17_t10_bank_val to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T0, SB, SC
    ADDI T0, T4, 1
; Spill t16 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T2, SB, SC
    LOAD T2, SB, T0
    ADD T0, S0, R0
; GEP: Setting bank info for t26 to NamedValue("load_f6_op38_t25_bank_val")
; Load instruction: t27 = load FatPtr(FatPointer { addr: Temp(26), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(26), bank: Mixed })
; LOAD: Pointer t26 has bank info: NamedValue("load_f6_op38_t25_bank_val")
; LOAD: Using bank register T2 for load
    LOAD S0, T2, T0
; Load instruction: t28 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op39_t28 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill load_f6_op22_t15_bank_val to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE T1, SB, SC
; Recompute alloca t5 at FP+4
    ADD T1, FP, R0
    ADDI T1, T1, 4
; Spill t18 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T3, SB, SC
    LOAD T3, SB, T1
; Spill load_f6_op26_t17_bank_val to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE S2, SB, SC
    ADDI S2, T1, 1
; Spill t20 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T7, SB, SC
    LOAD T7, SB, S2
    ADD S2, T3, R0
; GEP: Setting bank info for t29 to NamedValue("load_f6_op41_t28_bank_val")
; Load instruction: t30 = load FatPtr(FatPointer { addr: Temp(29), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(29), bank: Mixed })
; LOAD: Pointer t29 has bank info: NamedValue("load_f6_op41_t28_bank_val")
; LOAD: Using bank register T7 for load
    LOAD T3, T7, S2
    DIV S0, S0, T3
    STORE S0, S3, T5
; Load instruction: t32 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op42_t32 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T3, SB, T6
; Spill load_f6_op30_t19_bank_val to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE S1, SB, SC
    ADDI S1, T6, 1
    LOAD T4, SB, S1
    ADDI S1, T3, 1
; GEP: Setting bank info for t33 to NamedValue("load_f6_op44_t32_bank_val")
    LI T3, 0
    STORE T3, T4, S1
    BEQ R0, R0, L_q_div_42
; Unconditional branch to L_q_div_42
; Invalidated 2 alloca bindings
L_q_div_41:
; Load instruction: t34 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op46_t34 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+0
    ADD T3, FP, R0
    LOAD T1, SB, T3
    ADDI T6, T3, 1
; Spill t26 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T0, SB, SC
    LOAD T0, SB, T6
    ADD T6, T1, R0
; GEP: Setting bank info for t35 to NamedValue("load_f6_op48_t34_bank_val")
    LI T1, 0
    STORE T1, T0, T6
; Load instruction: t36 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op50_t36 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, T3
; Spill load_f6_op38_t25_bank_val to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE T2, SB, SC
    ADDI T2, T3, 1
; Spill t29 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE S2, SB, SC
    LOAD S2, SB, T2
    ADDI T2, T1, 1
; GEP: Setting bank info for t37 to NamedValue("load_f6_op52_t36_bank_val")
    LI T1, 0
    STORE T1, S2, T2
    BEQ R0, R0, L_q_div_42
; Unconditional branch to L_q_div_42
; Invalidated 1 alloca bindings
L_q_div_42:
; Jump to epilogue
    BEQ R0, R0, L_q_div_99999
L_q_div_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
q_from_int:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 11 slots for locals
    ADDI SP, SP, 11
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
L_q_from_int_43:
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADDI S0, S1, 1
    STORE A1, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 2
    STORE S2, SB, T7
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op4_t4 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T6, SB, S1
    ADDI T5, S1, 1
    LOAD T4, SB, T5
    ADD T3, T6, R0
; GEP: Setting bank info for t5 to NamedValue("load_f8_op6_t4_bank_val")
; Load instruction: t6 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op7_t6 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T2, SB, T7
    STORE T2, T4, T3
; Load instruction: t7 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op8_t7 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, S1
    ADDI T0, S1, 1
    LOAD S0, SB, T0
    ADDI T5, T1, 1
; GEP: Setting bank info for t8 to NamedValue("load_f8_op10_t7_bank_val")
    LI T6, 0
    STORE T6, S0, T5
; Jump to epilogue
    BEQ R0, R0, L_q_from_int_99999
L_q_from_int_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
q_to_int:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 10 slots for locals
    ADDI SP, SP, 10
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
L_q_to_int_44:
    ADD S2, FP, R0
    STORE S3, SB, S2
    ADDI S1, S2, 1
    STORE A1, SB, S1
; Load instruction: t2 = load FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; LOAD: Pointer load_src_ptr_f10_op3_t2 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, S2
    ADDI T7, S2, 1
    LOAD T6, SB, T7
    ADD T5, S0, R0
; GEP: Setting bank info for t3 to NamedValue("load_f10_op5_t2_bank_val")
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(3), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Mixed })
; LOAD: Pointer t3 has bank info: NamedValue("load_f10_op5_t2_bank_val")
; LOAD: Using bank register T6 for load
    LOAD T4, T6, T5
    MOVE RV0, T4
; Jump to epilogue
    BEQ R0, R0, L_q_to_int_99999
L_q_to_int_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
q_eq:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 12 slots for locals
    ADDI SP, SP, 12
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 1 bank from A3
L_q_eq_45:
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADDI S0, S1, 1
    STORE A1, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 2
    STORE S2, SB, T7
    ADDI T6, T7, 1
    STORE A3, SB, T6
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op6_t4 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, S1
    ADDI T4, S1, 1
    LOAD T3, SB, T4
    ADD T2, T5, R0
; GEP: Setting bank info for t5 to NamedValue("load_f12_op8_t4_bank_val")
; Load instruction: t6 = load FatPtr(FatPointer { addr: Temp(5), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Mixed })
; LOAD: Pointer t5 has bank info: NamedValue("load_f12_op8_t4_bank_val")
; LOAD: Using bank register T3 for load
    LOAD T1, T3, T2
; Load instruction: t7 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op9_t7 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, T7
    ADDI S0, T7, 1
    LOAD T6, SB, S0
    ADD T4, T0, R0
; GEP: Setting bank info for t8 to NamedValue("load_f12_op11_t7_bank_val")
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(8), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Mixed })
; LOAD: Pointer t8 has bank info: NamedValue("load_f12_op11_t7_bank_val")
; LOAD: Using bank register T6 for load
    LOAD T5, T6, T4
    XOR S0, T1, T5
    LI T0, 1
    SLTU T1, S0, T0
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op14_t11 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, S1
    ADDI T0, S1, 1
    LOAD T5, SB, T0
    ADDI T0, S0, 1
; GEP: Setting bank info for t12 to NamedValue("load_f12_op16_t11_bank_val")
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(12), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(12), bank: Mixed })
; LOAD: Pointer t12 has bank info: NamedValue("load_f12_op16_t11_bank_val")
; LOAD: Using bank register T5 for load
    LOAD S0, T5, T0
; Load instruction: t14 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op17_t14 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE S3, SB, SC
    LOAD S3, SB, T7
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S2, SB, SC
    ADDI S2, T7, 1
; Spill t5 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE T2, SB, SC
    LOAD T2, SB, S2
    ADDI S2, S3, 1
; GEP: Setting bank info for t15 to NamedValue("load_f12_op19_t14_bank_val")
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(15), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(15), bank: Mixed })
; LOAD: Pointer t15 has bank info: NamedValue("load_f12_op19_t14_bank_val")
; LOAD: Using bank register T2 for load
    LOAD S3, T2, S2
; Spill load_f12_op8_t4_bank_val to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE T3, SB, SC
    XOR T3, S0, S3
; Spill t8 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T4, SB, SC
    LI T4, 1
    SLTU S0, T3, T4
    AND T1, T1, S0
    MOVE RV0, T1
; Jump to epilogue
    BEQ R0, R0, L_q_eq_99999
L_q_eq_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
q_lt:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 12 slots for locals
    ADDI SP, SP, 12
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 1 bank from A3
L_q_lt_46:
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADDI S0, S1, 1
    STORE A1, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 2
    STORE S2, SB, T7
    ADDI T6, T7, 1
    STORE A3, SB, T6
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op6_t4 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, S1
    ADDI T4, S1, 1
    LOAD T3, SB, T4
    ADD T2, T5, R0
; GEP: Setting bank info for t5 to NamedValue("load_f14_op8_t4_bank_val")
; Load instruction: t6 = load FatPtr(FatPointer { addr: Temp(5), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Mixed })
; LOAD: Pointer t5 has bank info: NamedValue("load_f14_op8_t4_bank_val")
; LOAD: Using bank register T3 for load
    LOAD T1, T3, T2
; Load instruction: t7 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op9_t7 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, T7
    ADDI S0, T7, 1
    LOAD T6, SB, S0
    ADD T4, T0, R0
; GEP: Setting bank info for t8 to NamedValue("load_f14_op11_t7_bank_val")
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(8), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Mixed })
; LOAD: Pointer t8 has bank info: NamedValue("load_f14_op11_t7_bank_val")
; LOAD: Using bank register T6 for load
    LOAD T5, T6, T4
    SLT T1, T1, T5
    BEQ T1, R0, L_q_lt_49
; Branch to L_q_lt_49 if condition is false
    BEQ R0, R0, L_q_lt_47
; Unconditional branch to L_q_lt_47 (condition was true)
; Invalidated 2 alloca bindings
L_q_lt_47:
    LI RV0, 1
; Jump to epilogue
    BEQ R0, R0, L_q_lt_99999
    BEQ R0, R0, L_q_lt_49
; Unconditional branch to L_q_lt_49
L_q_lt_49:
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op12_t11 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD S0, FP, R0
    LOAD T0, SB, S0
    ADDI T5, S0, 1
    LOAD T1, SB, T5
    ADD T7, T0, R0
; GEP: Setting bank info for t12 to NamedValue("load_f14_op14_t11_bank_val")
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(12), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(12), bank: Mixed })
; LOAD: Pointer t12 has bank info: NamedValue("load_f14_op14_t11_bank_val")
; LOAD: Using bank register T1 for load
    LOAD S1, T1, T7
; Load instruction: t14 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op15_t14 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+2
    ADD T5, FP, R0
    ADDI T5, T5, 2
    LOAD T0, SB, T5
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE S3, SB, SC
    ADDI S3, T5, 1
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S2, SB, SC
    LOAD S2, SB, S3
    ADD S3, T0, R0
; GEP: Setting bank info for t15 to NamedValue("load_f14_op17_t14_bank_val")
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(15), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(15), bank: Mixed })
; LOAD: Pointer t15 has bank info: NamedValue("load_f14_op17_t14_bank_val")
; LOAD: Using bank register S2 for load
    LOAD T0, S2, S3
    SLT S1, T0, S1
    BEQ S1, R0, L_q_lt_52
; Branch to L_q_lt_52 if condition is false
    BEQ R0, R0, L_q_lt_50
; Unconditional branch to L_q_lt_50 (condition was true)
; Invalidated 2 alloca bindings
L_q_lt_50:
    LI RV0, 0
; Jump to epilogue
    BEQ R0, R0, L_q_lt_99999
    BEQ R0, R0, L_q_lt_52
; Unconditional branch to L_q_lt_52
L_q_lt_52:
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op18_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T0, FP, R0
    LOAD S1, SB, T0
    ADDI T5, T0, 1
    LOAD S0, SB, T5
    ADDI T5, S1, 1
; GEP: Setting bank info for t19 to NamedValue("load_f14_op20_t18_bank_val")
; Load instruction: t20 = load FatPtr(FatPointer { addr: Temp(19), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(19), bank: Mixed })
; LOAD: Pointer t19 has bank info: NamedValue("load_f14_op20_t18_bank_val")
; LOAD: Using bank register S0 for load
    LOAD S1, S0, T5
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op21_t21 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t5 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE T2, SB, SC
; Recompute alloca t3 at FP+2
    ADD T2, FP, R0
    ADDI T2, T2, 2
; Spill load_f14_op8_t4_bank_val to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE T3, SB, SC
    LOAD T3, SB, T2
; Spill t8 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T4, SB, SC
    ADDI T4, T2, 1
; Spill load_f14_op11_t7_bank_val to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T6, SB, SC
    LOAD T6, SB, T4
    ADDI T4, T3, 1
; GEP: Setting bank info for t22 to NamedValue("load_f14_op23_t21_bank_val")
; Load instruction: t23 = load FatPtr(FatPointer { addr: Temp(22), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(22), bank: Mixed })
; LOAD: Pointer t22 has bank info: NamedValue("load_f14_op23_t21_bank_val")
; LOAD: Using bank register T6 for load
    LOAD T3, T6, T4
    SLT S1, S1, T3
    MOVE RV0, S1
; Jump to epilogue
    BEQ R0, R0, L_q_lt_99999
L_q_lt_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
q_gt:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 12 slots for locals
    ADDI SP, SP, 12
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 1 bank from A3
L_q_gt_53:
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADDI S0, S1, 1
    STORE A1, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 2
    STORE S2, SB, T7
    ADDI T6, T7, 1
    STORE A3, SB, T6
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op6_t4 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, T7
    ADDI T4, T7, 1
    LOAD T3, SB, T4
; Load instruction: t5 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op9_t5 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T2, SB, S1
    ADDI T1, S1, 1
    LOAD T0, SB, T1
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE S3, SB, SC
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S2, SB, SC
; Spill t4 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE T5, SB, SC
; Spill load_f16_op8_t4_bank_val to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE T3, SB, SC
; Spill t5 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T2, SB, SC
; Spill load_f16_op11_t5_bank_val to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T0, SB, SC
; Setting up 2 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T5, R0
    ADD A1, T3, R0
; Arg 1 (fat ptr) to A2,A3
    ADD A2, T2, R0
    ADD A3, T0, R0
; Call function q_lt
    CALL q_lt
; Scalar return value for t6
; Jump to epilogue
    BEQ R0, R0, L_q_gt_99999
L_q_gt_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
q_sin:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 14 slots for locals
    ADDI SP, SP, 14
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 1 bank from A3
L_q_sin_54:
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADDI S0, S1, 1
    STORE A1, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 2
    STORE S2, SB, T7
    ADDI T6, T7, 1
    STORE A3, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 4
    LI T4, 0
    STORE T4, SB, T5
    ADD T3, FP, R0
    ADDI T3, T3, 5
; Load instruction: t6 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op7_t6 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T2, SB, T7
    ADDI T1, T7, 1
    LOAD T0, SB, T1
    ADD S0, T2, R0
; GEP: Setting bank info for t7 to NamedValue("load_f18_op9_t6_bank_val")
; Load instruction: t8 = load FatPtr(FatPointer { addr: Temp(7), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Mixed })
; LOAD: Pointer t7 has bank info: NamedValue("load_f18_op9_t6_bank_val")
; LOAD: Using bank register T0 for load
    LOAD T6, T0, S0
    STORE T6, SB, T3
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op10_t9 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, T3
    LI T1, 0
    SLT T4, T4, T1
    BEQ T4, R0, L_q_sin_57
; Branch to L_q_sin_57 if condition is false
    BEQ R0, R0, L_q_sin_55
; Unconditional branch to L_q_sin_55 (condition was true)
; Invalidated 4 alloca bindings
L_q_sin_55:
    LI T2, 1
; Recompute alloca t4 at FP+4
    ADD T1, FP, R0
    ADDI T1, T1, 4
    STORE T2, SB, T1
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op12_t11 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+5
    ADD T4, FP, R0
    ADDI T4, T4, 5
    LOAD T3, SB, T4
    LI T5, 0
    SUB T5, T5, T3
    STORE T5, SB, T4
    BEQ R0, R0, L_q_sin_57
; Unconditional branch to L_q_sin_57
; Invalidated 2 alloca bindings
L_q_sin_57:
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op13_t13 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+5
    ADD T7, FP, R0
    ADDI T7, T7, 5
    LOAD S1, SB, T7
    LI T2, 0
    XOR T3, S1, T2
    LI T1, 1
    SLTU S1, T3, T1
    BEQ S1, R0, L_q_sin_59
; Branch to L_q_sin_59 if condition is false
    BEQ R0, R0, L_q_sin_58
; Unconditional branch to L_q_sin_58 (condition was true)
; Invalidated 1 alloca bindings
L_q_sin_58:
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op16_t15 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T4, FP, R0
    LOAD T3, SB, T4
    ADDI T1, T4, 1
    LOAD T2, SB, T1
    ADD S1, T3, R0
; GEP: Setting bank info for t16 to NamedValue("load_f18_op18_t15_bank_val")
    LI T7, 0
    STORE T7, T2, S1
; Load instruction: t17 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op20_t17 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, T4
    ADDI T3, T4, 1
    LOAD T7, SB, T3
    ADDI T3, T1, 1
; GEP: Setting bank info for t18 to NamedValue("load_f18_op22_t17_bank_val")
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op23_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+2
    ADD T1, FP, R0
    ADDI T1, T1, 2
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S3, SB, SC
    LOAD S3, SB, T1
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S2, SB, SC
    ADDI S2, T1, 1
; Spill t7 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S0, SB, SC
    LOAD S0, SB, S2
    ADDI S2, S3, 1
; GEP: Setting bank info for t20 to NamedValue("load_f18_op25_t19_bank_val")
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(20), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(20), bank: Mixed })
; LOAD: Pointer t20 has bank info: NamedValue("load_f18_op25_t19_bank_val")
; LOAD: Using bank register S0 for load
    LOAD S3, S0, S2
    STORE S3, T7, T3
    BEQ R0, R0, L_q_sin_60
; Unconditional branch to L_q_sin_60
; Invalidated 2 alloca bindings
L_q_sin_59:
; Load instruction: t22 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op26_t22 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+5
    ADD T1, FP, R0
    ADDI T1, T1, 5
    LOAD T4, SB, T1
; Spill load_f18_op9_t6_bank_val to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T0, SB, SC
    LI T0, 1
; Spill t8 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T6, SB, SC
    XOR T6, T4, T0
; Spill t12 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T5, SB, SC
    LI T5, 1
    SLTU T4, T6, T5
    BEQ T4, R0, L_q_sin_62
; Branch to L_q_sin_62 if condition is false
    BEQ R0, R0, L_q_sin_61
; Unconditional branch to L_q_sin_61 (condition was true)
; Invalidated 1 alloca bindings
L_q_sin_61:
; Load instruction: t24 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op29_t24 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T6, FP, R0
    LOAD T5, SB, T6
    ADDI T0, T6, 1
    LOAD T4, SB, T0
    ADD T1, T5, R0
; GEP: Setting bank info for t25 to NamedValue("load_f18_op31_t24_bank_val")
    LI T0, 0
    STORE T0, T4, T1
; Load instruction: t26 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op33_t26 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, T6
    ADDI T0, T6, 1
; Spill t16 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE S1, SB, SC
    LOAD S1, SB, T0
    ADDI T0, T5, 1
; GEP: Setting bank info for t27 to NamedValue("load_f18_op35_t26_bank_val")
    LI T5, -10557
    STORE T5, S1, T0
    BEQ R0, R0, L_q_sin_63
; Unconditional branch to L_q_sin_63
; Invalidated 1 alloca bindings
L_q_sin_62:
; Load instruction: t28 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op37_t28 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+5
    ADD T5, FP, R0
    ADDI T5, T5, 5
    LOAD T6, SB, T5
; Spill load_f18_op18_t15_bank_val to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T2, SB, SC
    LI T2, 2
; Spill t20 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE S2, SB, SC
    XOR S2, T6, T2
; Spill load_f18_op25_t19_bank_val to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S0, SB, SC
    LI S0, 1
    SLTU T6, S2, S0
    BEQ T6, R0, L_q_sin_65
; Branch to L_q_sin_65 if condition is false
    BEQ R0, R0, L_q_sin_64
; Unconditional branch to L_q_sin_64 (condition was true)
; Invalidated 1 alloca bindings
L_q_sin_64:
; Load instruction: t30 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op40_t30 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD S2, FP, R0
    LOAD S0, SB, S2
    ADDI T2, S2, 1
    LOAD T6, SB, T2
    ADD T5, S0, R0
; GEP: Setting bank info for t31 to NamedValue("load_f18_op42_t30_bank_val")
    LI T2, 0
    STORE T2, T6, T5
; Load instruction: t32 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op44_t32 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, S2
    ADDI T2, S2, 1
; Spill t21 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE S3, SB, SC
    LOAD S3, SB, T2
    ADDI T2, S0, 1
; GEP: Setting bank info for t33 to NamedValue("load_f18_op46_t32_bank_val")
    LI S0, -5958
    STORE S0, S3, T2
    BEQ R0, R0, L_q_sin_66
; Unconditional branch to L_q_sin_66
; Invalidated 1 alloca bindings
L_q_sin_65:
; Load instruction: t34 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op48_t34 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+5
    ADD S0, FP, R0
    ADDI S0, S0, 5
    LOAD S2, SB, S0
; Spill t18 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T3, SB, SC
    LI T3, 3
; Spill load_f18_op22_t17_bank_val to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T7, SB, SC
    SLT T7, S2, T3
; Spill t25 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T1, SB, SC
    LI T1, 1
    SUB S2, T1, T7
    BEQ S2, R0, L_q_sin_68
; Branch to L_q_sin_68 if condition is false
    BEQ R0, R0, L_q_sin_67
; Unconditional branch to L_q_sin_67 (condition was true)
; Invalidated 1 alloca bindings
L_q_sin_67:
; Load instruction: t36 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op51_t36 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T7, FP, R0
    LOAD T1, SB, T7
    ADDI T3, T7, 1
    LOAD S2, SB, T3
    ADD S0, T1, R0
; GEP: Setting bank info for t37 to NamedValue("load_f18_op53_t36_bank_val")
    LI T3, 0
    STORE T3, S2, S0
; Load instruction: t38 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op55_t38 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, T7
    ADDI T3, T7, 1
; Spill load_f18_op31_t24_bank_val to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T4, SB, SC
    LOAD T4, SB, T3
    ADDI T3, T1, 1
; GEP: Setting bank info for t39 to NamedValue("load_f18_op57_t38_bank_val")
    LI T1, 0
    STORE T1, T4, T3
    BEQ R0, R0, L_q_sin_69
; Unconditional branch to L_q_sin_69
; Invalidated 1 alloca bindings
L_q_sin_68:
; Load instruction: t40 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op59_t40 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T1, FP, R0
    LOAD T7, SB, T1
; Spill t27 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE T0, SB, SC
    ADDI T0, T1, 1
; Spill load_f18_op35_t26_bank_val to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE S1, SB, SC
    LOAD S1, SB, T0
    ADD T0, T7, R0
; GEP: Setting bank info for t41 to NamedValue("load_f18_op61_t40_bank_val")
    LI T7, 0
    STORE T7, S1, T0
; Load instruction: t42 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op63_t42 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T7, SB, T1
; Spill t31 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 31
    STORE T5, SB, SC
    ADDI T5, T1, 1
; Spill load_f18_op42_t30_bank_val to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 32
    STORE T6, SB, SC
    LOAD T6, SB, T5
    ADDI T5, T7, 1
; GEP: Setting bank info for t43 to NamedValue("load_f18_op65_t42_bank_val")
    LI T7, -32768
    STORE T7, T6, T5
    BEQ R0, R0, L_q_sin_69
; Unconditional branch to L_q_sin_69
; Invalidated 1 alloca bindings
L_q_sin_69:
    BEQ R0, R0, L_q_sin_66
; Unconditional branch to L_q_sin_66
L_q_sin_66:
    BEQ R0, R0, L_q_sin_63
; Unconditional branch to L_q_sin_63
L_q_sin_63:
    BEQ R0, R0, L_q_sin_60
; Unconditional branch to L_q_sin_60
L_q_sin_60:
; Load instruction: t44 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op67_t44 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+4
    ADD T7, FP, R0
    ADDI T7, T7, 4
    LOAD T1, SB, T7
    BEQ T1, R0, L_q_sin_72
; Branch to L_q_sin_72 if condition is false
    BEQ R0, R0, L_q_sin_70
; Unconditional branch to L_q_sin_70 (condition was true)
; Invalidated 1 alloca bindings
L_q_sin_70:
; Load instruction: t45 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op68_t45 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T1, FP, R0
    LOAD T7, SB, T1
; Spill t33 to slot 19
    ADD SC, FP, R0
    ADDI SC, SC, 33
    STORE T2, SB, SC
    ADDI T2, T1, 1
; Spill load_f18_op46_t32_bank_val to slot 20
    ADD SC, FP, R0
    ADDI SC, SC, 34
    STORE S3, SB, SC
    LOAD S3, SB, T2
    ADDI T2, T7, 1
; GEP: Setting bank info for t46 to NamedValue("load_f18_op70_t45_bank_val")
; Load instruction: t47 = load FatPtr(FatPointer { addr: Temp(46), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(46), bank: Mixed })
; LOAD: Pointer t46 has bank info: NamedValue("load_f18_op70_t45_bank_val")
; LOAD: Using bank register S3 for load
    LOAD T7, S3, T2
; Spill t37 to slot 21
    ADD SC, FP, R0
    ADDI SC, SC, 35
    STORE S0, SB, SC
    LI S0, 0
    SLT T7, S0, T7
    BEQ T7, R0, L_q_sin_75
; Branch to L_q_sin_75 if condition is false
    BEQ R0, R0, L_q_sin_73
; Unconditional branch to L_q_sin_73 (condition was true)
; Invalidated 1 alloca bindings
L_q_sin_73:
; Load instruction: t49 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op71_t49 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD S0, FP, R0
    LOAD T7, SB, S0
    ADDI T1, S0, 1
; Spill load_f18_op53_t36_bank_val to slot 22
    ADD SC, FP, R0
    ADDI SC, SC, 36
    STORE S2, SB, SC
    LOAD S2, SB, T1
    ADD T1, T7, R0
; GEP: Setting bank info for t50 to NamedValue("load_f18_op73_t49_bank_val")
    LI T7, 0
; Spill t39 to slot 23
    ADD SC, FP, R0
    ADDI SC, SC, 37
    STORE T3, SB, SC
    LI T3, 1
    SUB T7, T7, T3
    STORE T7, S2, T1
; Load instruction: t52 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op74_t52 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T3, SB, S0
; Spill load_f18_op57_t38_bank_val to slot 24
    ADD SC, FP, R0
    ADDI SC, SC, 38
    STORE T4, SB, SC
    ADDI T4, S0, 1
; Spill t41 to slot 25
    ADD SC, FP, R0
    ADDI SC, SC, 39
    STORE T0, SB, SC
    LOAD T0, SB, T4
    ADDI T4, T3, 1
; GEP: Setting bank info for t53 to NamedValue("load_f18_op76_t52_bank_val")
; Load instruction: t54 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op77_t54 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T3, SB, S0
; Spill load_f18_op61_t40_bank_val to slot 26
    ADD SC, FP, R0
    ADDI SC, SC, 40
    STORE S1, SB, SC
    ADDI S1, S0, 1
; Spill t43 to slot 27
    ADD SC, FP, R0
    ADDI SC, SC, 41
    STORE T5, SB, SC
    LOAD T5, SB, S1
    ADDI S1, T3, 1
; GEP: Setting bank info for t55 to NamedValue("load_f18_op79_t54_bank_val")
; Load instruction: t56 = load FatPtr(FatPointer { addr: Temp(55), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(55), bank: Mixed })
; LOAD: Pointer t55 has bank info: NamedValue("load_f18_op79_t54_bank_val")
; LOAD: Using bank register T5 for load
    LOAD T3, T5, S1
; Spill load_f18_op65_t42_bank_val to slot 28
    ADD SC, FP, R0
    ADDI SC, SC, 42
    STORE T6, SB, SC
    LI T6, 0
    SUB T6, T6, T3
    STORE T6, T0, T4
    BEQ R0, R0, L_q_sin_75
; Unconditional branch to L_q_sin_75
; Invalidated 1 alloca bindings
L_q_sin_75:
    BEQ R0, R0, L_q_sin_72
; Unconditional branch to L_q_sin_72
L_q_sin_72:
; Jump to epilogue
    BEQ R0, R0, L_q_sin_99999
L_q_sin_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
q_cos:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 13 slots for locals
    ADDI SP, SP, 13
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 1 bank from A3
L_q_cos_76:
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADDI S0, S1, 1
    STORE A1, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 2
    STORE S2, SB, T7
    ADDI T6, T7, 1
    STORE A3, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 4
; Load instruction: t5 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op6_t5 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, T7
    ADDI T3, T7, 1
    LOAD T2, SB, T3
    ADD T1, T4, R0
; GEP: Setting bank info for t6 to NamedValue("load_f20_op8_t5_bank_val")
; Load instruction: t7 = load FatPtr(FatPointer { addr: Temp(6), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Mixed })
; LOAD: Pointer t6 has bank info: NamedValue("load_f20_op8_t5_bank_val")
; LOAD: Using bank register T2 for load
    LOAD T0, T2, T1
    STORE T0, SB, T5
; Load instruction: t8 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op9_t8 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, T5
    LI T6, 0
    SLT S0, S0, T6
    BEQ S0, R0, L_q_cos_79
; Branch to L_q_cos_79 if condition is false
    BEQ R0, R0, L_q_cos_77
; Unconditional branch to L_q_cos_77 (condition was true)
; Invalidated 3 alloca bindings
L_q_cos_77:
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op10_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    LOAD T4, SB, T3
    LI T6, 0
    SUB T6, T6, T4
    STORE T6, SB, T3
    BEQ R0, R0, L_q_cos_79
; Unconditional branch to L_q_cos_79
; Invalidated 1 alloca bindings
L_q_cos_79:
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op11_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+4
    ADD S0, FP, R0
    ADDI S0, S0, 4
    LOAD T5, SB, S0
    LI T7, 0
    XOR S1, T5, T7
    LI T4, 1
    SLTU T5, S1, T4
    BEQ T5, R0, L_q_cos_81
; Branch to L_q_cos_81 if condition is false
    BEQ R0, R0, L_q_cos_80
; Unconditional branch to L_q_cos_80 (condition was true)
; Invalidated 1 alloca bindings
L_q_cos_80:
; Load instruction: t14 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op14_t14 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T3, FP, R0
    LOAD S1, SB, T3
    ADDI T4, T3, 1
    LOAD T7, SB, T4
    ADD T5, S1, R0
; GEP: Setting bank info for t15 to NamedValue("load_f20_op16_t14_bank_val")
    LI S0, 1
    STORE S0, T7, T5
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op18_t16 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, T3
    ADDI S1, T3, 1
    LOAD S0, SB, S1
    ADDI S1, T4, 1
; GEP: Setting bank info for t17 to NamedValue("load_f20_op20_t16_bank_val")
    LI T4, 0
    STORE T4, S0, S1
    BEQ R0, R0, L_q_cos_82
; Unconditional branch to L_q_cos_82
; Invalidated 1 alloca bindings
L_q_cos_81:
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op22_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+4
    ADD T4, FP, R0
    ADDI T4, T4, 4
    LOAD T3, SB, T4
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S3, SB, SC
    LI S3, 1
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S2, SB, SC
    XOR S2, T3, S3
; Spill t6 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE T1, SB, SC
    LI T1, 1
    SLTU T3, S2, T1
    BEQ T3, R0, L_q_cos_84
; Branch to L_q_cos_84 if condition is false
    BEQ R0, R0, L_q_cos_83
; Unconditional branch to L_q_cos_83 (condition was true)
; Invalidated 1 alloca bindings
L_q_cos_83:
; Load instruction: t20 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op25_t20 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD S2, FP, R0
    LOAD T1, SB, S2
    ADDI S3, S2, 1
    LOAD T3, SB, S3
    ADD T4, T1, R0
; GEP: Setting bank info for t21 to NamedValue("load_f20_op27_t20_bank_val")
    LI S3, 0
    STORE S3, T3, T4
; Load instruction: t22 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op29_t22 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, S2
    ADDI S3, S2, 1
; Spill load_f20_op8_t5_bank_val to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T2, SB, SC
    LOAD T2, SB, S3
    ADDI S3, T1, 1
; GEP: Setting bank info for t23 to NamedValue("load_f20_op31_t22_bank_val")
    LI T1, -30126
    STORE T1, T2, S3
    BEQ R0, R0, L_q_cos_85
; Unconditional branch to L_q_cos_85
; Invalidated 1 alloca bindings
L_q_cos_84:
; Load instruction: t24 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op33_t24 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+4
    ADD T1, FP, R0
    ADDI T1, T1, 4
    LOAD S2, SB, T1
; Spill t7 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T0, SB, SC
    LI T0, 2
; Spill t11 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T6, SB, SC
    XOR T6, S2, T0
; Spill t15 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T5, SB, SC
    LI T5, 1
    SLTU S2, T6, T5
    BEQ S2, R0, L_q_cos_87
; Branch to L_q_cos_87 if condition is false
    BEQ R0, R0, L_q_cos_86
; Unconditional branch to L_q_cos_86 (condition was true)
; Invalidated 1 alloca bindings
L_q_cos_86:
; Load instruction: t26 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op36_t26 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T6, FP, R0
    LOAD T5, SB, T6
    ADDI T0, T6, 1
    LOAD S2, SB, T0
    ADD T1, T5, R0
; GEP: Setting bank info for t27 to NamedValue("load_f20_op38_t26_bank_val")
    LI T0, 0
    LI T5, 1
    SUB T0, T0, T5
    STORE T0, S2, T1
; Load instruction: t29 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op39_t29 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, T6
; Spill load_f20_op16_t14_bank_val to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T7, SB, SC
    ADDI T7, T6, 1
; Spill t17 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE S1, SB, SC
    LOAD S1, SB, T7
    ADDI T7, T5, 1
; GEP: Setting bank info for t30 to NamedValue("load_f20_op41_t29_bank_val")
    LI T5, 27197
    STORE T5, S1, T7
    BEQ R0, R0, L_q_cos_88
; Unconditional branch to L_q_cos_88
; Invalidated 1 alloca bindings
L_q_cos_87:
; Load instruction: t31 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op43_t31 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+4
    ADD T5, FP, R0
    ADDI T5, T5, 4
    LOAD T6, SB, T5
; Spill load_f20_op20_t16_bank_val to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE S0, SB, SC
    LI S0, 3
; Spill t21 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE T4, SB, SC
    SLT T4, T6, S0
; Spill load_f20_op27_t20_bank_val to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T3, SB, SC
    LI T3, 1
    SUB T6, T3, T4
    BEQ T6, R0, L_q_cos_90
; Branch to L_q_cos_90 if condition is false
    BEQ R0, R0, L_q_cos_89
; Unconditional branch to L_q_cos_89 (condition was true)
; Invalidated 1 alloca bindings
L_q_cos_89:
; Load instruction: t33 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op46_t33 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T4, FP, R0
    LOAD T3, SB, T4
    ADDI S0, T4, 1
    LOAD T6, SB, S0
    ADD T5, T3, R0
; GEP: Setting bank info for t34 to NamedValue("load_f20_op48_t33_bank_val")
    LI S0, 0
    LI T3, 1
    SUB S0, S0, T3
    STORE S0, T6, T5
; Load instruction: t36 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op49_t36 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T3, SB, T4
; Spill t23 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE S3, SB, SC
    ADDI S3, T4, 1
; Spill load_f20_op31_t22_bank_val to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T2, SB, SC
    LOAD T2, SB, S3
    ADDI S3, T3, 1
; GEP: Setting bank info for t37 to NamedValue("load_f20_op51_t36_bank_val")
    LI T3, 0
    STORE T3, T2, S3
    BEQ R0, R0, L_q_cos_91
; Unconditional branch to L_q_cos_91
; Invalidated 1 alloca bindings
L_q_cos_90:
; Load instruction: t38 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op53_t38 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T3, FP, R0
    LOAD T4, SB, T3
; Spill t28 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T0, SB, SC
    ADDI T0, T3, 1
; Spill t27 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T1, SB, SC
    LOAD T1, SB, T0
    ADD T0, T4, R0
; GEP: Setting bank info for t39 to NamedValue("load_f20_op55_t38_bank_val")
    LI T4, 0
    STORE T4, T1, T0
; Load instruction: t40 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op57_t40 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, T3
; Spill load_f20_op38_t26_bank_val to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE S2, SB, SC
    ADDI S2, T3, 1
; Spill t30 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE T7, SB, SC
    LOAD T7, SB, S2
    ADDI S2, T4, 1
; GEP: Setting bank info for t41 to NamedValue("load_f20_op59_t40_bank_val")
    LI T4, 16384
    STORE T4, T7, S2
    BEQ R0, R0, L_q_cos_91
; Unconditional branch to L_q_cos_91
; Invalidated 1 alloca bindings
L_q_cos_91:
    BEQ R0, R0, L_q_cos_88
; Unconditional branch to L_q_cos_88
L_q_cos_88:
    BEQ R0, R0, L_q_cos_85
; Unconditional branch to L_q_cos_85
L_q_cos_85:
    BEQ R0, R0, L_q_cos_82
; Unconditional branch to L_q_cos_82
L_q_cos_82:
; Jump to epilogue
    BEQ R0, R0, L_q_cos_99999
L_q_cos_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
