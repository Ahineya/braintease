; Generated by Ripple C99 Compiler (rcc)

memcpy:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 16 slots for locals
    ADDI SP, SP, 16
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 0 bank from A1
; Load param 1 from A2
    ADD S2, A2, R0
; Load param 2 from FP-7
    ADDI SC, FP, -7
    LOAD S1, SB, SC
; Load param 2 bank from FP-8
    ADDI SC, FP, -8
    LOAD S0, SB, SC
; Load param 3 from FP-9
    ADDI SC, FP, -9
    LOAD T7, SB, SC
; Load param 4 from FP-10
    ADDI SC, FP, -10
    LOAD T6, SB, SC
    ADD T5, FP, R0
    STORE S3, SB, T5
    ADDI T4, T5, 1
    STORE A1, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 2
    STORE S2, SB, T3
    ADD T2, FP, R0
    ADDI T2, T2, 3
    STORE S1, SB, T2
    ADDI T1, T2, 1
    STORE S0, SB, T1
    ADD T0, FP, R0
    ADDI T0, T0, 5
    STORE T7, SB, T0
    ADD T4, FP, R0
    ADDI T4, T4, 6
    STORE T6, SB, T4
    ADD T1, FP, R0
    ADDI T1, T1, 7
; Spill param_bank_f0_op4_2 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S0, SB, SC
    LI S0, 0
    STORE S0, SB, T1
    BEQ R0, R0, L_memcpy_1
; Unconditional branch to L_memcpy_1
L_memcpy_1:
; Recompute alloca t10 at FP+7
    ADD S0, FP, R0
    ADDI S0, S0, 7
    LOAD T0, SB, S0
; Recompute alloca t9 at FP+6
    ADD T1, FP, R0
    ADDI T1, T1, 6
    LOAD T2, SB, T1
    SLT T0, T0, T2
    BEQ T0, R0, L_memcpy_4
; Branch to L_memcpy_4 if condition is false
    BEQ R0, R0, L_memcpy_2
; Unconditional branch to L_memcpy_2 (condition was true)
L_memcpy_2:
; Recompute alloca t5 at FP+0
    ADD T3, FP, R0
    LOAD T4, SB, T3
    ADDI T5, T3, 1
    LOAD T2, SB, T5
; Recompute alloca t10 at FP+7
    ADD T0, FP, R0
    ADDI T0, T0, 7
    LOAD T1, SB, T0
    ADD T5, T1, R0
    ADD S0, T4, T5
; Runtime bank overflow calculation for dynamic GEP
; Spill t0 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S3, SB, SC
; Spill bank for t0 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE A1, SB, SC
; Spill t1 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE S2, SB, SC
    LI S2, 4096
    DIV S3, S0, S2
; Spill t2 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE S1, SB, SC
; Spill bank for t2 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE S0, SB, SC
    MOD S1, S0, S2
; Spill t3 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T7, SB, SC
    ADD T7, T2, S3
    ADD S0, S1, R0
; Recompute alloca t7 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD S3, SB, T5
    ADDI S2, T5, 1
    LOAD S1, SB, S2
    LOAD T4, SB, T0
; Spill t4 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE T6, SB, SC
    ADD T6, T4, R0
    ADD S2, S3, T6
; Runtime bank overflow calculation for dynamic GEP
; Spill t15 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T1, SB, SC
    LI T1, 4096
    DIV T3, S2, T1
; Spill load_f0_op15_t14_bank_val to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T2, SB, SC
    MOD T2, S2, T1
; Spill gep_new_bank_f0_op21_t16 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T7, SB, SC
    ADD T7, S1, T3
    ADD S2, T2, R0
    LOAD T6, T7, S2
    STORE T6, T7, S0
    BEQ R0, R0, L_memcpy_3
; Unconditional branch to L_memcpy_3
L_memcpy_3:
; Recompute alloca t10 at FP+7
    ADD T3, FP, R0
    ADDI T3, T3, 7
    LOAD T1, SB, T3
    LI T2, 1
    ADD T1, T1, T2
    STORE T1, SB, T3
    BEQ R0, R0, L_memcpy_1
; Unconditional branch to L_memcpy_1
L_memcpy_4:
; Jump to epilogue
    BEQ R0, R0, L_memcpy_99999
L_memcpy_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
