; Generated by Ripple C99 Compiler (rcc)

memcpy:
; === Function Prologue ===
; Initialize SB as stack bank (1)
    LI SB, 1
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 9 slots for locals
    ADDI SP, SP, 9
    ADDI SP, SP, -1
    MOVE S3, SP
    LI S2, 0
    STORE S2, SB, S3
    BEQ R0, R0, L_memcpy_1
; Unconditional branch to L_memcpy_1
L_memcpy_1:
    LOAD S1, SB, S3
    SLT S1, S1, S0
    BEQ S1, R0, L_memcpy_4
; Branch to L_memcpy_4 if condition is false
    BEQ R0, R0, L_memcpy_2
; Unconditional branch to L_memcpy_2 (condition was true)
L_memcpy_2:
    LOAD T7, SB, S3
    ADD T4, T7, R0
    ADD T5, T6, T4
; Runtime bank overflow calculation for dynamic GEP
    LI T2, 4096
    DIV T3, T5, T2
    MOD T1, T5, T2
    ADD T0, SB, T3
    ADD T5, T1, R0
    LOAD S2, SB, T5
    LOAD S0, SB, S3
    ADD T3, S0, R0
    ADD T4, S1, T3
; Runtime bank overflow calculation for dynamic GEP
    LI T1, 4096
    DIV T2, T4, T1
    MOD T6, T4, T1
; Initialize SB as stack bank (1)
    LI SB, 1
; Spill t10 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T7, SB, SC
    ADD T7, SB, T2
    ADD T4, T6, R0
    STORE S2, SB, T4
    BEQ R0, R0, L_memcpy_3
; Unconditional branch to L_memcpy_3
L_memcpy_3:
    LOAD T3, SB, S3
    LI T2, 1
    ADD T3, T3, T2
    STORE T3, SB, S3
    BEQ R0, R0, L_memcpy_1
; Unconditional branch to L_memcpy_1
L_memcpy_4:
; Jump to epilogue
    BEQ R0, R0, L_memcpy_99999
L_memcpy_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
