; Generated by Ripple C99 Compiler (rcc)

; Global 'rand_initialized' at address 0
srand:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 10 slots for locals
    ADDI SP, SP, 10
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
    ADD S2, FP, R0
    STORE S3, SB, S2
    ADD S1, FP, R0
    ADDI S1, S1, 1
    LOAD S0, SB, S2
    LI T7, -1
    AND S0, S0, T7
    STORE S0, SB, S1
    LOAD T6, SB, S1
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 10
    STORE S3, SB, SC
; Spill t4 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 11
    STORE S0, SB, SC
; Spill t5 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function rng_set_seed
    CALL rng_set_seed
    LI T5, 1
    LI T4, 0
    STORE T5, GP, T4
; Jump to epilogue
    BEQ R0, R0, L_srand_99999
L_srand_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
rand:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 9 slots for locals
    ADDI SP, SP, 9
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
L_rand_1:
    LI S3, 0
    LOAD S2, GP, S3
    LI S1, 0
    XOR S0, S2, S1
    LI T7, 1
    SLTU S2, S0, T7
    BEQ S2, R0, L_rand_4
; Branch to L_rand_4 if condition is false
    BEQ R0, R0, L_rand_2
; Unconditional branch to L_rand_2 (condition was true)
L_rand_2:
    LI T6, 1
; Spill live registers before call
; Spill load_f2_op0_t0_addr to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 9
    STORE S3, SB, SC
; Spill const_f2_op4_1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 10
    STORE T6, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function srand
    CALL srand
    BEQ R0, R0, L_rand_4
; Unconditional branch to L_rand_4
L_rand_4:
    ADD T5, FP, R0
; Spill live registers before call
; Call function rng_get
    CALL rng_get
; Scalar return value for t3
; Recompute alloca t2 at FP+0
    ADD T4, FP, R0
    STORE RV0, SB, T4
    LOAD T3, SB, T4
    LI T2, 32767
    AND T3, T3, T2
    MOVE RV0, T3
; Jump to epilogue
    BEQ R0, R0, L_rand_99999
L_rand_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
