; Generated by Ripple C99 Compiler (rcc)

; Global 'display_width' at address 0
; Global 'display_height' at address 1
; Global 'sin_table' at address 2
rgb565:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 11 slots for locals
    ADDI SP, SP, 11
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
    ADD S0, FP, R0
    STORE S3, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 1
    STORE S2, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 2
    STORE S1, SB, T6
; Load instruction: t6 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op6_t6 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, S0
    LI T4, 248
    AND T5, T5, T4
    LI T3, 8
    SLL T5, T5, T3
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op8_t9 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T2, SB, T7
    LI T1, 252
    AND T2, T2, T1
    LI T0, 3
    SLL T2, T2, T0
    OR T5, T5, T2
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f0_op10_t13 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, T6
    LI T3, 3
    SRL T4, T4, T3
    OR T5, T5, T4
    MOVE RV0, T5
; Jump to epilogue
    BEQ R0, R0, L_rgb565_99999
L_rgb565_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
graphics_init:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 11 slots for locals
    ADDI SP, SP, 11
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
L_graphics_init_1:
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADD S0, FP, R0
    ADDI S0, S0, 1
    STORE S2, SB, S0
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op4_t4 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T7, SB, S1
    LI T6, 0
    STORE T7, GP, T6
; Load instruction: t5 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op8_t5 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, S0
    LI T4, 1
    STORE T5, GP, T4
    ADD T3, FP, R0
    ADDI T3, T3, 2
; Load instruction: t7 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op12_t7 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T2, SB, S1
    LI T1, 8
    SLL T2, T2, T1
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op14_t9 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, S0
    OR T2, T2, T0
    STORE T2, SB, T3
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f2_op17_t11 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T6, SB, T3
    LI T4, 16
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 11
    STORE S3, SB, SC
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE S2, SB, SC
; Spill t4 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE T7, SB, SC
; Spill t5 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE T5, SB, SC
; Spill t10 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE T2, SB, SC
; Spill const_f2_op19_16 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T4, SB, SC
; Spill t11 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T6, SB, SC
; Setting up 2 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Arg 1 (scalar) to A1
    ADD A1, T6, R0
; Call function mmio_write
    CALL mmio_write
    LI T1, 6
    LI T0, 3
; Spill live registers before call
; Spill const_f2_op20_6 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T1, SB, SC
; Spill const_f2_op21_3 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T0, SB, SC
; Setting up 2 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Arg 1 (scalar) to A1
    ADD A1, T0, R0
; Call function mmio_write
    CALL mmio_write
; Jump to epilogue
    BEQ R0, R0, L_graphics_init_99999
L_graphics_init_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
set_pixel:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 14 slots for locals
    ADDI SP, SP, 14
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
L_set_pixel_2:
    ADD S0, FP, R0
    STORE S3, SB, S0
    ADD T7, FP, R0
    ADDI T7, T7, 1
    STORE S2, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 2
    STORE S1, SB, T6
; Load instruction: t6 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op6_t6 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T5, SB, S0
; Load instruction: t7 = load Global("display_width")
; Canonicalizing global variable: display_width
    LI T4, 0
; LOAD: Pointer load_src_ptr_f4_op9_t7 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T3, GP, T4
    SLT T2, T5, T3
    LI T1, 1
    SUB T5, T1, T2
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op13_t9 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, T7
; Load instruction: t10 = load Global("display_height")
; Canonicalizing global variable: display_height
    LI T2, 1
; LOAD: Pointer load_src_ptr_f4_op16_t10 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T1, GP, T2
    SLT T3, T0, T1
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S3, SB, SC
    LI S3, 1
    SUB T0, S3, T3
    OR T5, T5, T0
    BEQ T5, R0, L_set_pixel_5
; Branch to L_set_pixel_5 if condition is false
    BEQ R0, R0, L_set_pixel_3
; Unconditional branch to L_set_pixel_3 (condition was true)
; Invalidated 3 alloca bindings
L_set_pixel_3:
; Jump to epilogue
    BEQ R0, R0, L_set_pixel_99999
    BEQ R0, R0, L_set_pixel_5
; Unconditional branch to L_set_pixel_5
L_set_pixel_5:
    ADD T3, FP, R0
    ADDI T3, T3, 3
; Load instruction: t14 = load Global("display_width")
; Canonicalizing global variable: display_width
    LI S3, 0
; LOAD: Pointer load_src_ptr_f4_op21_t14 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T1, GP, S3
; Load instruction: t15 = load Global("display_height")
; Canonicalizing global variable: display_height
    LI T0, 1
; LOAD: Pointer load_src_ptr_f4_op24_t15 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T5, GP, T0
    MUL T1, T1, T5
    STORE T1, SB, T3
    ADD T6, FP, R0
    ADDI T6, T6, 4
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(13), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(13), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op27_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T7, SB, T3
    LI S0, 32
    ADD S0, S0, T7
    STORE S0, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 5
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(17), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(17), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op30_t21 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T7, SB, T6
; Load instruction: t22 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op32_t22 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S2, SB, SC
; Recompute alloca t4 at FP+1
    ADD S2, FP, R0
    ADDI S2, S2, 1
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S1, SB, SC
    LOAD S1, SB, S2
; Load instruction: t23 = load Global("display_width")
; Canonicalizing global variable: display_width
    LI T4, 0
; LOAD: Pointer load_src_ptr_f4_op35_t23 has bank info: Global
; LOAD: Using bank register Gp for load
; Spill load_f4_op8_t7_addr to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T4, SB, SC
; Spill load_f4_op15_t10_addr to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T2, SB, SC
    LOAD T2, GP, T4
    MUL S1, S1, T2
    ADD T7, T7, S1
; Load instruction: t26 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op37_t26 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t3 at FP+0
    ADD T2, FP, R0
    LOAD S1, SB, T2
    ADD T7, T7, S1
    STORE T7, SB, T5
; Load instruction: t28 = load FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op40_t28 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S1, SB, T5
; Load instruction: t29 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f4_op42_t29 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill load_f4_op20_t14_addr to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE S3, SB, SC
; Recompute alloca t5 at FP+2
    ADD S3, FP, R0
    ADDI S3, S3, 2
; Spill load_f4_op23_t15_addr to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T0, SB, SC
    LOAD T0, SB, S3
; Spill live registers before call
; Spill t16 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T1, SB, SC
; Spill t19 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE S0, SB, SC
; Spill load_f4_op34_t23_addr to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE T4, SB, SC
; Spill t27 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T7, SB, SC
; Spill t28 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE S1, SB, SC
; Spill t29 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T0, SB, SC
; Setting up 2 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Arg 1 (scalar) to A1
    ADD A1, T0, R0
; Call function mmio_write
    CALL mmio_write
; Jump to epilogue
    BEQ R0, R0, L_set_pixel_99999
L_set_pixel_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
get_pixel:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 13 slots for locals
    ADDI SP, SP, 13
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
L_get_pixel_6:
    ADD S1, FP, R0
    STORE S3, SB, S1
    ADD S0, FP, R0
    ADDI S0, S0, 1
    STORE S2, SB, S0
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op4_t4 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T7, SB, S1
; Load instruction: t5 = load Global("display_width")
; Canonicalizing global variable: display_width
    LI T6, 0
; LOAD: Pointer load_src_ptr_f6_op7_t5 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T5, GP, T6
    SLT T4, T7, T5
    LI T3, 1
    SUB T7, T3, T4
; Load instruction: t7 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op11_t7 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T2, SB, S0
; Load instruction: t8 = load Global("display_height")
; Canonicalizing global variable: display_height
    LI T1, 1
; LOAD: Pointer load_src_ptr_f6_op14_t8 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T0, GP, T1
    SLT T4, T2, T0
    LI T3, 1
    SUB T2, T3, T4
    OR T7, T7, T2
    BEQ T7, R0, L_get_pixel_9
; Branch to L_get_pixel_9 if condition is false
    BEQ R0, R0, L_get_pixel_7
; Unconditional branch to L_get_pixel_7 (condition was true)
; Invalidated 2 alloca bindings
L_get_pixel_7:
    LI RV0, 0
; Jump to epilogue
    BEQ R0, R0, L_get_pixel_99999
    BEQ R0, R0, L_get_pixel_9
; Unconditional branch to L_get_pixel_9
L_get_pixel_9:
    ADD T5, FP, R0
    ADDI T5, T5, 2
; Load instruction: t12 = load Global("display_width")
; Canonicalizing global variable: display_width
    LI T4, 0
; LOAD: Pointer load_src_ptr_f6_op19_t12 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T3, GP, T4
; Load instruction: t13 = load Global("display_height")
; Canonicalizing global variable: display_height
    LI T0, 1
; LOAD: Pointer load_src_ptr_f6_op22_t13 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T2, GP, T0
    MUL T3, T3, T2
    STORE T3, SB, T5
    ADD T7, FP, R0
    ADDI T7, T7, 3
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op25_t16 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, T5
    LI S1, 32
    ADD S1, S1, S0
    STORE S1, SB, T7
    ADD T2, FP, R0
    ADDI T2, T2, 4
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(15), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(15), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op28_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, T7
; Load instruction: t20 = load FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op30_t20 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S3, SB, SC
; Recompute alloca t3 at FP+1
    ADD S3, FP, R0
    ADDI S3, S3, 1
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S2, SB, SC
    LOAD S2, SB, S3
; Load instruction: t21 = load Global("display_width")
; Canonicalizing global variable: display_width
    LI T6, 0
; LOAD: Pointer load_src_ptr_f6_op33_t21 has bank info: Global
; LOAD: Using bank register Gp for load
; Spill load_f6_op6_t5_addr to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE T6, SB, SC
; Spill load_f6_op13_t8_addr to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T1, SB, SC
    LOAD T1, GP, T6
    MUL S2, S2, T1
    ADD S0, S0, S2
; Load instruction: t24 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op35_t24 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+0
    ADD T1, FP, R0
    LOAD S2, SB, T1
    ADD S0, S0, S2
    STORE S0, SB, T2
; Load instruction: t26 = load FatPtr(FatPointer { addr: Temp(18), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(18), bank: Stack })
; LOAD: Pointer load_src_ptr_f6_op38_t26 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S2, SB, T2
; Spill live registers before call
; Spill load_f6_op18_t12_addr to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T4, SB, SC
; Spill load_f6_op21_t13_addr to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T0, SB, SC
; Spill t14 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T3, SB, SC
; Spill t17 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE S1, SB, SC
; Spill load_f6_op32_t21_addr to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T6, SB, SC
; Spill t25 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE S0, SB, SC
; Spill t26 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S2, SB, SC
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Call function mmio_read
    CALL mmio_read
; Scalar return value for t27
; Jump to epilogue
    BEQ R0, R0, L_get_pixel_99999
L_get_pixel_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
clear_screen:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 11 slots for locals
    ADDI SP, SP, 11
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
L_clear_screen_10:
    ADD S2, FP, R0
    STORE S3, SB, S2
    ADD S1, FP, R0
    ADDI S1, S1, 1
    LI S0, 0
    STORE S0, SB, S1
    BEQ R0, R0, L_clear_screen_11
; Unconditional branch to L_clear_screen_11
; Invalidated 2 alloca bindings
L_clear_screen_11:
; Load instruction: t3 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op4_t3 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+1
    ADD T7, FP, R0
    ADDI T7, T7, 1
    LOAD T6, SB, T7
; Load instruction: t4 = load Global("display_height")
; Canonicalizing global variable: display_height
    LI T5, 1
; LOAD: Pointer load_src_ptr_f8_op7_t4 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T4, GP, T5
    SLT T6, T6, T4
    BEQ T6, R0, L_clear_screen_14
; Branch to L_clear_screen_14 if condition is false
    BEQ R0, R0, L_clear_screen_12
; Unconditional branch to L_clear_screen_12 (condition was true)
; Invalidated 1 alloca bindings
L_clear_screen_12:
    ADD T3, FP, R0
    ADDI T3, T3, 2
    LI T2, 0
    STORE T2, SB, T3
    BEQ R0, R0, L_clear_screen_15
; Unconditional branch to L_clear_screen_15
; Invalidated 1 alloca bindings
L_clear_screen_15:
; Load instruction: t7 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op11_t7 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+2
    ADD T1, FP, R0
    ADDI T1, T1, 2
    LOAD T0, SB, T1
; Load instruction: t8 = load Global("display_width")
; Canonicalizing global variable: display_width
    LI S0, 0
; LOAD: Pointer load_src_ptr_f8_op14_t8 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD S1, GP, S0
    SLT T0, T0, S1
    BEQ T0, R0, L_clear_screen_18
; Branch to L_clear_screen_18 if condition is false
    BEQ R0, R0, L_clear_screen_16
; Unconditional branch to L_clear_screen_16 (condition was true)
; Invalidated 1 alloca bindings
L_clear_screen_16:
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op16_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+2
    ADD S2, FP, R0
    ADDI S2, S2, 2
    LOAD T4, SB, S2
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op18_t11 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+1
    ADD T6, FP, R0
    ADDI T6, T6, 1
    LOAD T7, SB, T6
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op20_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t1 at FP+0
    ADD T2, FP, R0
    LOAD T3, SB, T2
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 11
    STORE S3, SB, SC
; Spill load_f8_op6_t4_addr to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE T5, SB, SC
; Spill load_f8_op13_t8_addr to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S0, SB, SC
; Spill t10 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE T4, SB, SC
; Spill t11 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE T7, SB, SC
; Spill t12 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T3, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T4, R0
; Arg 1 (scalar) to A1
    ADD A1, T7, R0
; Arg 2 (scalar) to A2
    ADD A2, T3, R0
; Call function set_pixel
    CALL set_pixel
    BEQ R0, R0, L_clear_screen_17
; Unconditional branch to L_clear_screen_17
L_clear_screen_17:
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op22_t13 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+2
    ADD S1, FP, R0
    ADDI S1, S1, 2
    LOAD T0, SB, S1
    LI T1, 0
    ADD T0, T0, T1
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op24_t15 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S3, SB, S1
    LI T5, 1
    ADD S3, S3, T5
    STORE S3, SB, S1
    BEQ R0, R0, L_clear_screen_15
; Unconditional branch to L_clear_screen_15
; Invalidated 1 alloca bindings
L_clear_screen_18:
    BEQ R0, R0, L_clear_screen_13
; Unconditional branch to L_clear_screen_13
L_clear_screen_13:
; Load instruction: t17 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op27_t17 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t2 at FP+1
    ADD S0, FP, R0
    ADDI S0, S0, 1
    LOAD S2, SB, S0
    LI T6, 0
    ADD S2, S2, T6
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(2), bank: Stack })
; LOAD: Pointer load_src_ptr_f8_op29_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T2, SB, S0
    LI T4, 1
    ADD T2, T2, T4
    STORE T2, SB, S0
    BEQ R0, R0, L_clear_screen_11
; Unconditional branch to L_clear_screen_11
; Invalidated 1 alloca bindings
L_clear_screen_14:
; Jump to epilogue
    BEQ R0, R0, L_clear_screen_99999
L_clear_screen_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
graphics_flush:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 8 slots for locals
    ADDI SP, SP, 8
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
L_graphics_flush_19:
    LI S3, 9
    LI S2, 1
; Spill live registers before call
; Spill const_f10_op0_9 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 8
    STORE S3, SB, SC
; Spill const_f10_op1_1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 9
    STORE S2, SB, SC
; Setting up 2 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Arg 1 (scalar) to A1
    ADD A1, S2, R0
; Call function mmio_write
    CALL mmio_write
; Jump to epilogue
    BEQ R0, R0, L_graphics_flush_99999
L_graphics_flush_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
draw_hline:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 13 slots for locals
    ADDI SP, SP, 13
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
; Load param 3 from A3
    ADD S0, A3, R0
L_draw_hline_20:
    ADD T7, FP, R0
    STORE S3, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 1
    STORE S2, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 2
    STORE S1, SB, T5
    ADD T4, FP, R0
    ADDI T4, T4, 3
    STORE S0, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    LI T2, 0
    STORE T2, SB, T3
    BEQ R0, R0, L_draw_hline_21
; Unconditional branch to L_draw_hline_21
; Invalidated 5 alloca bindings
L_draw_hline_21:
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op10_t9 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T1, FP, R0
    ADDI T1, T1, 4
    LOAD T0, SB, T1
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op12_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+2
    ADD T2, FP, R0
    ADDI T2, T2, 2
    LOAD T3, SB, T2
    SLT T0, T0, T3
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op14_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T4, FP, R0
    LOAD T5, SB, T4
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op16_t13 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T6, SB, T1
    ADD T5, T5, T6
; Load instruction: t15 = load Global("display_width")
; Canonicalizing global variable: display_width
    LI T7, 0
; LOAD: Pointer load_src_ptr_f12_op19_t15 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T3, GP, T7
    SLT T5, T5, T3
    AND T0, T0, T5
    BEQ T0, R0, L_draw_hline_24
; Branch to L_draw_hline_24 if condition is false
    BEQ R0, R0, L_draw_hline_22
; Unconditional branch to L_draw_hline_22 (condition was true)
; Invalidated 3 alloca bindings
L_draw_hline_22:
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op21_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T6, FP, R0
    LOAD T3, SB, T6
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op23_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T5, FP, R0
    ADDI T5, T5, 4
    LOAD T0, SB, T5
    ADD T3, T3, T0
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op25_t21 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T1, FP, R0
    ADDI T1, T1, 1
    LOAD T2, SB, T1
; Load instruction: t22 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op27_t22 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T4, FP, R0
    ADDI T4, T4, 3
    LOAD T0, SB, T4
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S3, SB, SC
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S2, SB, SC
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S1, SB, SC
; Spill t3 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S0, SB, SC
; Spill load_f12_op18_t15_addr to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T7, SB, SC
; Spill t20 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T3, SB, SC
; Spill t21 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T2, SB, SC
; Spill t22 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T0, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Arg 1 (scalar) to A1
    ADD A1, T2, R0
; Arg 2 (scalar) to A2
    ADD A2, T0, R0
; Call function set_pixel
    CALL set_pixel
    BEQ R0, R0, L_draw_hline_23
; Unconditional branch to L_draw_hline_23
L_draw_hline_23:
; Load instruction: t23 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op29_t23 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD S3, FP, R0
    ADDI S3, S3, 4
    LOAD S2, SB, S3
    LI S1, 0
    ADD S2, S2, S1
; Load instruction: t25 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f12_op31_t25 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, S3
    LI T7, 1
    ADD S0, S0, T7
    STORE S0, SB, S3
    BEQ R0, R0, L_draw_hline_21
; Unconditional branch to L_draw_hline_21
; Invalidated 1 alloca bindings
L_draw_hline_24:
; Jump to epilogue
    BEQ R0, R0, L_draw_hline_99999
L_draw_hline_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
draw_vline:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 13 slots for locals
    ADDI SP, SP, 13
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
; Load param 3 from A3
    ADD S0, A3, R0
L_draw_vline_25:
    ADD T7, FP, R0
    STORE S3, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 1
    STORE S2, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 2
    STORE S1, SB, T5
    ADD T4, FP, R0
    ADDI T4, T4, 3
    STORE S0, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    LI T2, 0
    STORE T2, SB, T3
    BEQ R0, R0, L_draw_vline_26
; Unconditional branch to L_draw_vline_26
; Invalidated 5 alloca bindings
L_draw_vline_26:
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op10_t9 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T1, FP, R0
    ADDI T1, T1, 4
    LOAD T0, SB, T1
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op12_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+2
    ADD T2, FP, R0
    ADDI T2, T2, 2
    LOAD T3, SB, T2
    SLT T0, T0, T3
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op14_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T4, FP, R0
    ADDI T4, T4, 1
    LOAD T5, SB, T4
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op16_t13 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T6, SB, T1
    ADD T5, T5, T6
; Load instruction: t15 = load Global("display_height")
; Canonicalizing global variable: display_height
    LI T7, 1
; LOAD: Pointer load_src_ptr_f14_op19_t15 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T3, GP, T7
    SLT T5, T5, T3
    AND T0, T0, T5
    BEQ T0, R0, L_draw_vline_29
; Branch to L_draw_vline_29 if condition is false
    BEQ R0, R0, L_draw_vline_27
; Unconditional branch to L_draw_vline_27 (condition was true)
; Invalidated 3 alloca bindings
L_draw_vline_27:
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op21_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T6, FP, R0
    LOAD T3, SB, T6
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op23_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T5, FP, R0
    ADDI T5, T5, 1
    LOAD T0, SB, T5
; Load instruction: t20 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op25_t20 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T1, FP, R0
    ADDI T1, T1, 4
    LOAD T2, SB, T1
    ADD T0, T0, T2
; Load instruction: t22 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op27_t22 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T4, FP, R0
    ADDI T4, T4, 3
    LOAD T2, SB, T4
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S3, SB, SC
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S2, SB, SC
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S1, SB, SC
; Spill t3 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S0, SB, SC
; Spill load_f14_op18_t15_addr to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T7, SB, SC
; Spill t18 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T3, SB, SC
; Spill t21 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T0, SB, SC
; Spill t22 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T2, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T3, R0
; Arg 1 (scalar) to A1
    ADD A1, T0, R0
; Arg 2 (scalar) to A2
    ADD A2, T2, R0
; Call function set_pixel
    CALL set_pixel
    BEQ R0, R0, L_draw_vline_28
; Unconditional branch to L_draw_vline_28
L_draw_vline_28:
; Load instruction: t23 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op29_t23 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD S3, FP, R0
    ADDI S3, S3, 4
    LOAD S2, SB, S3
    LI S1, 0
    ADD S2, S2, S1
; Load instruction: t25 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f14_op31_t25 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, S3
    LI T7, 1
    ADD S0, S0, T7
    STORE S0, SB, S3
    BEQ R0, R0, L_draw_vline_26
; Unconditional branch to L_draw_vline_26
; Invalidated 1 alloca bindings
L_draw_vline_29:
; Jump to epilogue
    BEQ R0, R0, L_draw_vline_99999
L_draw_vline_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
draw_line:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 23 slots for locals
    ADDI SP, SP, 23
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
; Load param 3 from A3
    ADD S0, A3, R0
; Load param 4 from FP-7
    ADDI SC, FP, -7
    LOAD T7, SB, SC
L_draw_line_30:
    ADD T6, FP, R0
    STORE S3, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 1
    STORE S2, SB, T5
    ADD T4, FP, R0
    ADDI T4, T4, 2
    STORE S1, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 3
    STORE S0, SB, T3
    ADD T2, FP, R0
    ADDI T2, T2, 4
    STORE T7, SB, T2
    ADD T1, FP, R0
    ADDI T1, T1, 5
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op10_t11 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, T4
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op12_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S3, SB, SC
    LOAD S3, SB, T6
    SLT T0, S3, T0
    ADD S3, FP, R0
    ADDI S3, S3, 6
    BEQ T0, R0, L_draw_line_32
; Branch to L_draw_line_32 if condition is false
    BEQ R0, R0, L_draw_line_31
; Unconditional branch to L_draw_line_31 (condition was true)
; Invalidated 7 alloca bindings
L_draw_line_31:
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op14_t15 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+2
    ADD T0, FP, R0
    ADDI T0, T0, 2
    LOAD T1, SB, T0
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op16_t16 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD T2, FP, R0
    LOAD T3, SB, T2
    SUB T1, T1, T3
; Recompute alloca t14 at FP+6
    ADD T4, FP, R0
    ADDI T4, T4, 6
    STORE T1, SB, T4
    BEQ R0, R0, L_draw_line_33
; Unconditional branch to L_draw_line_33
; Invalidated 3 alloca bindings
L_draw_line_32:
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op19_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD T5, FP, R0
    LOAD T6, SB, T5
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op21_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+2
    ADD S3, FP, R0
    ADDI S3, S3, 2
    LOAD T3, SB, S3
    SUB T6, T6, T3
; Recompute alloca t14 at FP+6
    ADD T0, FP, R0
    ADDI T0, T0, 6
    STORE T6, SB, T0
    BEQ R0, R0, L_draw_line_33
; Unconditional branch to L_draw_line_33
; Invalidated 3 alloca bindings
L_draw_line_33:
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(14), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(14), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op24_t21 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t14 at FP+6
    ADD T2, FP, R0
    ADDI T2, T2, 6
    LOAD T4, SB, T2
; Recompute alloca t10 at FP+5
    ADD T3, FP, R0
    ADDI T3, T3, 5
    STORE T4, SB, T3
    ADD T0, FP, R0
    ADDI T0, T0, 7
; Load instruction: t23 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op27_t23 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD S3, SB, T5
; Load instruction: t24 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op29_t24 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE S2, SB, SC
; Recompute alloca t6 at FP+1
    ADD S2, FP, R0
    ADDI S2, S2, 1
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE S1, SB, SC
    LOAD S1, SB, S2
    SLT S3, S1, S3
    ADD S1, FP, R0
    ADDI S1, S1, 8
    BEQ S3, R0, L_draw_line_35
; Branch to L_draw_line_35 if condition is false
    BEQ R0, R0, L_draw_line_34
; Unconditional branch to L_draw_line_34 (condition was true)
; Invalidated 6 alloca bindings
L_draw_line_34:
; Load instruction: t27 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op31_t27 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+3
    ADD S3, FP, R0
    ADDI S3, S3, 3
    LOAD T0, SB, S3
; Load instruction: t28 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op33_t28 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD T2, FP, R0
    ADDI T2, T2, 1
    LOAD T3, SB, T2
    SUB T0, T0, T3
; Recompute alloca t26 at FP+8
    ADD T5, FP, R0
    ADDI T5, T5, 8
    STORE T0, SB, T5
    BEQ R0, R0, L_draw_line_36
; Unconditional branch to L_draw_line_36
; Invalidated 3 alloca bindings
L_draw_line_35:
; Load instruction: t30 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op36_t30 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD S1, FP, R0
    ADDI S1, S1, 1
    LOAD S2, SB, S1
; Load instruction: t31 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op38_t31 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+3
    ADD T3, FP, R0
    ADDI T3, T3, 3
    LOAD T2, SB, T3
    SUB S2, S2, T2
; Recompute alloca t26 at FP+8
    ADD T5, FP, R0
    ADDI T5, T5, 8
    STORE S2, SB, T5
    BEQ R0, R0, L_draw_line_36
; Unconditional branch to L_draw_line_36
; Invalidated 3 alloca bindings
L_draw_line_36:
; Load instruction: t33 = load FatPtr(FatPointer { addr: Temp(26), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(26), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op41_t33 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t26 at FP+8
    ADD S3, FP, R0
    ADDI S3, S3, 8
    LOAD T2, SB, S3
; Recompute alloca t22 at FP+7
    ADD T3, FP, R0
    ADDI T3, T3, 7
    STORE T2, SB, T3
    ADD T5, FP, R0
    ADDI T5, T5, 9
; Load instruction: t35 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op44_t35 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD S1, FP, R0
; Spill t3 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE S0, SB, SC
    LOAD S0, SB, S1
; Load instruction: t36 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op46_t36 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t4 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T7, SB, SC
; Recompute alloca t7 at FP+2
    ADD T7, FP, R0
    ADDI T7, T7, 2
; Spill t17 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T1, SB, SC
    LOAD T1, SB, T7
    SLT S0, S0, T1
    ADD T1, FP, R0
    ADDI T1, T1, 10
    BEQ S0, R0, L_draw_line_38
; Branch to L_draw_line_38 if condition is false
    BEQ R0, R0, L_draw_line_37
; Unconditional branch to L_draw_line_37 (condition was true)
; Invalidated 6 alloca bindings
L_draw_line_37:
    LI S0, 1
; Recompute alloca t38 at FP+10
    ADD T1, FP, R0
    ADDI T1, T1, 10
    STORE S0, SB, T1
    BEQ R0, R0, L_draw_line_39
; Unconditional branch to L_draw_line_39
; Invalidated 1 alloca bindings
L_draw_line_38:
    LI T3, 0
    LI T5, 1
    SUB T3, T3, T5
; Recompute alloca t38 at FP+10
    ADD T7, FP, R0
    ADDI T7, T7, 10
    STORE T3, SB, T7
    BEQ R0, R0, L_draw_line_39
; Unconditional branch to L_draw_line_39
; Invalidated 1 alloca bindings
L_draw_line_39:
; Load instruction: t40 = load FatPtr(FatPointer { addr: Temp(38), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(38), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op51_t40 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t38 at FP+10
    ADD S1, FP, R0
    ADDI S1, S1, 10
    LOAD S3, SB, S1
; Recompute alloca t34 at FP+9
    ADD S0, FP, R0
    ADDI S0, S0, 9
    STORE S3, SB, S0
    ADD T1, FP, R0
    ADDI T1, T1, 11
; Load instruction: t42 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op54_t42 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD T5, FP, R0
    ADDI T5, T5, 1
    LOAD T7, SB, T5
; Load instruction: t43 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op56_t43 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t20 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE T6, SB, SC
; Recompute alloca t8 at FP+3
    ADD T6, FP, R0
    ADDI T6, T6, 3
; Spill t21 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE T4, SB, SC
    LOAD T4, SB, T6
    SLT T7, T7, T4
    ADD T4, FP, R0
    ADDI T4, T4, 12
    BEQ T7, R0, L_draw_line_41
; Branch to L_draw_line_41 if condition is false
    BEQ R0, R0, L_draw_line_40
; Unconditional branch to L_draw_line_40 (condition was true)
; Invalidated 6 alloca bindings
L_draw_line_40:
    LI T7, 1
; Recompute alloca t45 at FP+12
    ADD T1, FP, R0
    ADDI T1, T1, 12
    STORE T7, SB, T1
    BEQ R0, R0, L_draw_line_42
; Unconditional branch to L_draw_line_42
; Invalidated 1 alloca bindings
L_draw_line_41:
    LI T4, 0
    LI T5, 1
    SUB T4, T4, T5
; Recompute alloca t45 at FP+12
    ADD T6, FP, R0
    ADDI T6, T6, 12
    STORE T4, SB, T6
    BEQ R0, R0, L_draw_line_42
; Unconditional branch to L_draw_line_42
; Invalidated 1 alloca bindings
L_draw_line_42:
; Load instruction: t47 = load FatPtr(FatPointer { addr: Temp(45), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(45), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op61_t47 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t45 at FP+12
    ADD S0, FP, R0
    ADDI S0, S0, 12
    LOAD S1, SB, S0
; Recompute alloca t41 at FP+11
    ADD T7, FP, R0
    ADDI T7, T7, 11
    STORE S1, SB, T7
    ADD T1, FP, R0
    ADDI T1, T1, 13
; Load instruction: t49 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op64_t49 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T5, FP, R0
    ADDI T5, T5, 5
    LOAD T6, SB, T5
; Load instruction: t50 = load FatPtr(FatPointer { addr: Temp(22), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(22), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op66_t50 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t29 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 31
    STORE T0, SB, SC
; Recompute alloca t22 at FP+7
    ADD T0, FP, R0
    ADDI T0, T0, 7
; Spill t32 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 32
    STORE S2, SB, SC
    LOAD S2, SB, T0
    SUB T6, T6, S2
    STORE T6, SB, T1
    BEQ R0, R0, L_draw_line_43
; Unconditional branch to L_draw_line_43
; Invalidated 5 alloca bindings
L_draw_line_43:
    LI S2, 1
    BEQ S2, R0, L_draw_line_45
; Branch to L_draw_line_45 if condition is false
    BEQ R0, R0, L_draw_line_44
; Unconditional branch to L_draw_line_44 (condition was true)
L_draw_line_44:
; Load instruction: t52 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op69_t52 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD T0, FP, R0
    LOAD T1, SB, T0
; Load instruction: t53 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op71_t53 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD T5, FP, R0
    ADDI T5, T5, 1
    LOAD T7, SB, T5
; Load instruction: t54 = load FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op73_t54 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t9 at FP+4
    ADD S0, FP, R0
    ADDI S0, S0, 4
    LOAD S2, SB, S0
; Spill live registers before call
; Spill t33 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 33
    STORE T2, SB, SC
; Spill t39 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 34
    STORE T3, SB, SC
; Spill t40 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 35
    STORE S3, SB, SC
; Spill t46 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 36
    STORE T4, SB, SC
; Spill t47 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 37
    STORE S1, SB, SC
; Spill t51 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 38
    STORE T6, SB, SC
; Spill t52 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 39
    STORE T1, SB, SC
; Spill t53 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 40
    STORE T7, SB, SC
; Spill t54 to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 41
    STORE S2, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Arg 1 (scalar) to A1
    ADD A1, T7, R0
; Arg 2 (scalar) to A2
    ADD A2, S2, R0
; Call function set_pixel
    CALL set_pixel
; Load instruction: t55 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op75_t55 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD T2, FP, R0
    LOAD T3, SB, T2
; Load instruction: t56 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op77_t56 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+2
    ADD S3, FP, R0
    ADDI S3, S3, 2
    LOAD T4, SB, S3
    XOR S1, T3, T4
    LI T6, 1
    SLTU T3, S1, T6
; Load instruction: t58 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op81_t58 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD T0, FP, R0
    ADDI T0, T0, 1
    LOAD T5, SB, T0
; Load instruction: t59 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op83_t59 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+3
    ADD S0, FP, R0
    ADDI S0, S0, 3
    LOAD T1, SB, S0
    XOR T7, T5, T1
    LI S2, 1
    SLTU T5, T7, S2
    AND T3, T3, T5
    BEQ T3, R0, L_draw_line_48
; Branch to L_draw_line_48 if condition is false
    BEQ R0, R0, L_draw_line_46
; Unconditional branch to L_draw_line_46 (condition was true)
; Invalidated 4 alloca bindings
L_draw_line_46:
    BEQ R0, R0, L_draw_line_45
; Unconditional branch to L_draw_line_45
    BEQ R0, R0, L_draw_line_48
; Unconditional branch to L_draw_line_48
L_draw_line_48:
    ADD S1, FP, R0
    ADDI S1, S1, 14
; Load instruction: t63 = load FatPtr(FatPointer { addr: Temp(48), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(48), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op87_t63 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t48 at FP+13
    ADD T6, FP, R0
    ADDI T6, T6, 13
    LOAD T4, SB, T6
    LI T7, 2
    MUL T7, T7, T4
    STORE T7, SB, S1
; Load instruction: t65 = load FatPtr(FatPointer { addr: Temp(62), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(62), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op90_t65 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S2, SB, S1
; Load instruction: t66 = load FatPtr(FatPointer { addr: Temp(22), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(22), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op92_t66 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t22 at FP+7
    ADD T1, FP, R0
    ADDI T1, T1, 7
    LOAD T5, SB, T1
    LI T3, 0
    SUB T3, T3, T5
    SLT S2, T3, S2
    BEQ S2, R0, L_draw_line_51
; Branch to L_draw_line_51 if condition is false
    BEQ R0, R0, L_draw_line_49
; Unconditional branch to L_draw_line_49 (condition was true)
; Invalidated 3 alloca bindings
L_draw_line_49:
; Load instruction: t69 = load FatPtr(FatPointer { addr: Temp(48), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(48), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op94_t69 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t48 at FP+13
    ADD T0, FP, R0
    ADDI T0, T0, 13
    LOAD T2, SB, T0
; Load instruction: t70 = load FatPtr(FatPointer { addr: Temp(22), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(22), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op96_t70 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t22 at FP+7
    ADD S0, FP, R0
    ADDI S0, S0, 7
    LOAD S3, SB, S0
    SUB T2, T2, S3
    STORE T2, SB, T0
; Load instruction: t72 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op99_t72 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD T4, FP, R0
    LOAD T5, SB, T4
; Load instruction: t73 = load FatPtr(FatPointer { addr: Temp(34), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(34), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op101_t73 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t34 at FP+9
    ADD T3, FP, R0
    ADDI T3, T3, 9
    LOAD S2, SB, T3
    ADD T5, T5, S2
    STORE T5, SB, T4
    BEQ R0, R0, L_draw_line_51
; Unconditional branch to L_draw_line_51
; Invalidated 4 alloca bindings
L_draw_line_51:
; Load instruction: t75 = load FatPtr(FatPointer { addr: Temp(62), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(62), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op104_t75 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t62 at FP+14
    ADD T1, FP, R0
    ADDI T1, T1, 14
    LOAD T6, SB, T1
; Load instruction: t76 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op106_t76 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD S1, FP, R0
    ADDI S1, S1, 5
    LOAD S3, SB, S1
    SLT T6, T6, S3
    BEQ T6, R0, L_draw_line_54
; Branch to L_draw_line_54 if condition is false
    BEQ R0, R0, L_draw_line_52
; Unconditional branch to L_draw_line_52 (condition was true)
; Invalidated 2 alloca bindings
L_draw_line_52:
; Load instruction: t78 = load FatPtr(FatPointer { addr: Temp(48), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(48), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op108_t78 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t48 at FP+13
    ADD S2, FP, R0
    ADDI S2, S2, 13
    LOAD T0, SB, S2
; Load instruction: t79 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op110_t79 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T3, FP, R0
    ADDI T3, T3, 5
    LOAD T4, SB, T3
    ADD T0, T0, T4
    STORE T0, SB, S2
; Load instruction: t81 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op113_t81 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD S0, FP, R0
    ADDI S0, S0, 1
    LOAD S3, SB, S0
; Load instruction: t82 = load FatPtr(FatPointer { addr: Temp(41), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(41), bank: Stack })
; LOAD: Pointer load_src_ptr_f16_op115_t82 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t41 at FP+11
    ADD T6, FP, R0
    ADDI T6, T6, 11
    LOAD T1, SB, T6
    ADD S3, S3, T1
    STORE S3, SB, S0
    BEQ R0, R0, L_draw_line_54
; Unconditional branch to L_draw_line_54
; Invalidated 4 alloca bindings
L_draw_line_54:
    BEQ R0, R0, L_draw_line_43
; Unconditional branch to L_draw_line_43
L_draw_line_45:
; Jump to epilogue
    BEQ R0, R0, L_draw_line_99999
L_draw_line_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
draw_rect:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 13 slots for locals
    ADDI SP, SP, 13
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
; Load param 3 from A3
    ADD S0, A3, R0
; Load param 4 from FP-7
    ADDI SC, FP, -7
    LOAD T7, SB, SC
L_draw_rect_55:
    ADD T6, FP, R0
    STORE S3, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 1
    STORE S2, SB, T5
    ADD T4, FP, R0
    ADDI T4, T4, 2
    STORE S1, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 3
    STORE S0, SB, T3
    ADD T2, FP, R0
    ADDI T2, T2, 4
    STORE T7, SB, T2
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op10_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, T4
    LI T0, 0
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S3, SB, SC
    XOR S3, T1, T0
    LI T6, 1
    SLTU T1, S3, T6
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op14_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S3, SB, T3
    LI T6, 0
    XOR T0, S3, T6
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S2, SB, SC
    LI S2, 1
    SLTU S3, T0, S2
    OR T1, T1, S3
    BEQ T1, R0, L_draw_rect_58
; Branch to L_draw_rect_58 if condition is false
    BEQ R0, R0, L_draw_rect_56
; Unconditional branch to L_draw_rect_56 (condition was true)
; Invalidated 4 alloca bindings
L_draw_rect_56:
; Jump to epilogue
    BEQ R0, R0, L_draw_rect_99999
    BEQ R0, R0, L_draw_rect_58
; Unconditional branch to L_draw_rect_58
L_draw_rect_58:
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op18_t15 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD T0, FP, R0
    LOAD S2, SB, T0
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op20_t16 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD T6, FP, R0
    ADDI T6, T6, 1
    LOAD S3, SB, T6
; Load instruction: t17 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op22_t17 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+2
    ADD T1, FP, R0
    ADDI T1, T1, 2
    LOAD T2, SB, T1
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op24_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t9 at FP+4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    LOAD T4, SB, T3
; Spill live registers before call
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S1, SB, SC
; Spill t3 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S0, SB, SC
; Spill t4 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T7, SB, SC
; Spill t15 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE S2, SB, SC
; Spill t16 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE S3, SB, SC
; Spill t17 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T2, SB, SC
; Spill t18 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T4, SB, SC
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S2, R0
; Arg 1 (scalar) to A1
    ADD A1, S3, R0
; Arg 2 (scalar) to A2
    ADD A2, T2, R0
; Arg 3 (scalar) to A3
    ADD A3, T4, R0
; Call function draw_hline
    CALL draw_hline
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op26_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD S1, SB, T5
    LI S0, 1
    SLT S1, S0, S1
    BEQ S1, R0, L_draw_rect_61
; Branch to L_draw_rect_61 if condition is false
    BEQ R0, R0, L_draw_rect_59
; Unconditional branch to L_draw_rect_59 (condition was true)
; Invalidated 1 alloca bindings
L_draw_rect_59:
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op28_t21 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD T7, FP, R0
    LOAD T0, SB, T7
; Load instruction: t22 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op30_t22 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD T6, FP, R0
    ADDI T6, T6, 1
    LOAD T1, SB, T6
; Load instruction: t23 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op32_t23 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+3
    ADD T3, FP, R0
    ADDI T3, T3, 3
    LOAD S2, SB, T3
    ADD T1, T1, S2
    LI S3, 1
    SUB T1, T1, S3
; Load instruction: t26 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op34_t26 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+2
    ADD T2, FP, R0
    ADDI T2, T2, 2
    LOAD T4, SB, T2
; Load instruction: t27 = load FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op36_t27 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t9 at FP+4
    ADD S0, FP, R0
    ADDI S0, S0, 4
    LOAD S1, SB, S0
; Spill live registers before call
; Spill t21 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T0, SB, SC
; Spill t25 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE T1, SB, SC
; Spill t26 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T4, SB, SC
; Spill t27 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE S1, SB, SC
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Arg 1 (scalar) to A1
    ADD A1, T1, R0
; Arg 2 (scalar) to A2
    ADD A2, T4, R0
; Arg 3 (scalar) to A3
    ADD A3, S1, R0
; Call function draw_hline
    CALL draw_hline
    BEQ R0, R0, L_draw_rect_61
; Unconditional branch to L_draw_rect_61
L_draw_rect_61:
; Load instruction: t28 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op38_t28 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD S2, SB, T5
    LI S3, 2
    SLT S2, S3, S2
    BEQ S2, R0, L_draw_rect_64
; Branch to L_draw_rect_64 if condition is false
    BEQ R0, R0, L_draw_rect_62
; Unconditional branch to L_draw_rect_62 (condition was true)
; Invalidated 1 alloca bindings
L_draw_rect_62:
; Load instruction: t30 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op40_t30 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD T7, FP, R0
    LOAD T6, SB, T7
; Load instruction: t31 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op42_t31 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD T3, FP, R0
    ADDI T3, T3, 1
    LOAD T2, SB, T3
    LI S0, 1
    ADD T2, T2, S0
; Load instruction: t33 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op44_t33 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+3
    ADD T0, FP, R0
    ADDI T0, T0, 3
    LOAD T1, SB, T0
    LI T4, 2
    SUB T1, T1, T4
; Load instruction: t35 = load FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op46_t35 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t9 at FP+4
    ADD S1, FP, R0
    ADDI S1, S1, 4
    LOAD S3, SB, S1
; Spill live registers before call
; Spill t30 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE T6, SB, SC
; Spill t32 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T2, SB, SC
; Spill t34 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T1, SB, SC
; Spill t35 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE S3, SB, SC
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Arg 1 (scalar) to A1
    ADD A1, T2, R0
; Arg 2 (scalar) to A2
    ADD A2, T1, R0
; Arg 3 (scalar) to A3
    ADD A3, S3, R0
; Call function draw_vline
    CALL draw_vline
; Load instruction: t36 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op48_t36 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+2
    ADD S2, FP, R0
    ADDI S2, S2, 2
    LOAD T5, SB, S2
    LI S0, 1
    SLT T5, S0, T5
    BEQ T5, R0, L_draw_rect_67
; Branch to L_draw_rect_67 if condition is false
    BEQ R0, R0, L_draw_rect_65
; Unconditional branch to L_draw_rect_65 (condition was true)
; Invalidated 1 alloca bindings
L_draw_rect_65:
; Load instruction: t38 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op50_t38 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD T4, FP, R0
    LOAD T7, SB, T4
; Load instruction: t39 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op52_t39 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+2
    ADD T3, FP, R0
    ADDI T3, T3, 2
    LOAD T0, SB, T3
    ADD T7, T7, T0
    LI S1, 1
    SUB T7, T7, S1
; Load instruction: t42 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op54_t42 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD T6, FP, R0
    ADDI T6, T6, 1
    LOAD T2, SB, T6
    LI T1, 1
    ADD T2, T2, T1
; Load instruction: t44 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op56_t44 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+3
    ADD S3, FP, R0
    ADDI S3, S3, 3
    LOAD S0, SB, S3
    LI T5, 2
    SUB S0, S0, T5
; Load instruction: t46 = load FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; LOAD: Pointer load_src_ptr_f18_op58_t46 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t9 at FP+4
    ADD S2, FP, R0
    ADDI S2, S2, 4
    LOAD T0, SB, S2
; Spill live registers before call
; Spill t41 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE T7, SB, SC
; Spill t43 to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 31
    STORE T2, SB, SC
; Spill t45 to slot 19
    ADD SC, FP, R0
    ADDI SC, SC, 32
    STORE S0, SB, SC
; Spill t46 to slot 20
    ADD SC, FP, R0
    ADDI SC, SC, 33
    STORE T0, SB, SC
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Arg 1 (scalar) to A1
    ADD A1, T2, R0
; Arg 2 (scalar) to A2
    ADD A2, S0, R0
; Arg 3 (scalar) to A3
    ADD A3, T0, R0
; Call function draw_vline
    CALL draw_vline
    BEQ R0, R0, L_draw_rect_67
; Unconditional branch to L_draw_rect_67
L_draw_rect_67:
    BEQ R0, R0, L_draw_rect_64
; Unconditional branch to L_draw_rect_64
L_draw_rect_64:
; Jump to epilogue
    BEQ R0, R0, L_draw_rect_99999
L_draw_rect_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
fill_rect:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 15 slots for locals
    ADDI SP, SP, 15
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
; Load param 3 from A3
    ADD S0, A3, R0
; Load param 4 from FP-7
    ADDI SC, FP, -7
    LOAD T7, SB, SC
L_fill_rect_68:
    ADD T6, FP, R0
    STORE S3, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 1
    STORE S2, SB, T5
    ADD T4, FP, R0
    ADDI T4, T4, 2
    STORE S1, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 3
    STORE S0, SB, T3
    ADD T2, FP, R0
    ADDI T2, T2, 4
    STORE T7, SB, T2
    ADD T1, FP, R0
    ADDI T1, T1, 5
    LI T0, 0
    STORE T0, SB, T1
    BEQ R0, R0, L_fill_rect_69
; Unconditional branch to L_fill_rect_69
; Invalidated 6 alloca bindings
L_fill_rect_69:
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op12_t11 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T0, FP, R0
    ADDI T0, T0, 5
    LOAD T1, SB, T0
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op14_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+3
    ADD T2, FP, R0
    ADDI T2, T2, 3
    LOAD T3, SB, T2
    SLT T1, T1, T3
; Load instruction: t14 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op16_t14 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD T4, FP, R0
    ADDI T4, T4, 1
    LOAD T5, SB, T4
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op18_t15 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T6, SB, T0
    ADD T5, T5, T6
; Load instruction: t17 = load Global("display_height")
; Canonicalizing global variable: display_height
    LI T3, 1
; LOAD: Pointer load_src_ptr_f20_op21_t17 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD T6, GP, T3
    SLT T5, T5, T6
    AND T1, T1, T5
    BEQ T1, R0, L_fill_rect_72
; Branch to L_fill_rect_72 if condition is false
    BEQ R0, R0, L_fill_rect_70
; Unconditional branch to L_fill_rect_70 (condition was true)
; Invalidated 3 alloca bindings
L_fill_rect_70:
    ADD T6, FP, R0
    ADDI T6, T6, 6
    LI T5, 0
    STORE T5, SB, T6
    BEQ R0, R0, L_fill_rect_73
; Unconditional branch to L_fill_rect_73
; Invalidated 1 alloca bindings
L_fill_rect_73:
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op25_t21 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t20 at FP+6
    ADD T1, FP, R0
    ADDI T1, T1, 6
    LOAD T0, SB, T1
; Load instruction: t22 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op27_t22 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+2
    ADD T2, FP, R0
    ADDI T2, T2, 2
    LOAD T4, SB, T2
    SLT T0, T0, T4
; Load instruction: t24 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op29_t24 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD T5, FP, R0
    LOAD T6, SB, T5
; Load instruction: t25 = load FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op31_t25 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, T1
    ADD T6, T6, T4
; Load instruction: t27 = load Global("display_width")
; Canonicalizing global variable: display_width
    LI T4, 0
; LOAD: Pointer load_src_ptr_f20_op34_t27 has bank info: Global
; LOAD: Using bank register Gp for load
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S3, SB, SC
    LOAD S3, GP, T4
    SLT T6, T6, S3
    AND T0, T0, T6
    BEQ T0, R0, L_fill_rect_76
; Branch to L_fill_rect_76 if condition is false
    BEQ R0, R0, L_fill_rect_74
; Unconditional branch to L_fill_rect_74 (condition was true)
; Invalidated 3 alloca bindings
L_fill_rect_74:
; Load instruction: t30 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op36_t30 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+0
    ADD S3, FP, R0
    LOAD T6, SB, S3
; Load instruction: t31 = load FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op38_t31 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t20 at FP+6
    ADD T0, FP, R0
    ADDI T0, T0, 6
    LOAD T1, SB, T0
    ADD T6, T6, T1
; Load instruction: t33 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op40_t33 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+1
    ADD T2, FP, R0
    ADDI T2, T2, 1
    LOAD T5, SB, T2
; Load instruction: t34 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op42_t34 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T1, FP, R0
    ADDI T1, T1, 5
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S2, SB, SC
    LOAD S2, SB, T1
    ADD T5, T5, S2
; Load instruction: t36 = load FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(9), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op44_t36 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t9 at FP+4
    ADD S2, FP, R0
    ADDI S2, S2, 4
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S1, SB, SC
    LOAD S1, SB, S2
; Spill live registers before call
; Spill t3 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE S0, SB, SC
; Spill t4 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T7, SB, SC
; Spill load_f20_op20_t17_addr to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T3, SB, SC
; Spill load_f20_op33_t27_addr to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T4, SB, SC
; Spill t32 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T6, SB, SC
; Spill t35 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE T5, SB, SC
; Spill t36 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE S1, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Arg 1 (scalar) to A1
    ADD A1, T5, R0
; Arg 2 (scalar) to A2
    ADD A2, S1, R0
; Call function set_pixel
    CALL set_pixel
    BEQ R0, R0, L_fill_rect_75
; Unconditional branch to L_fill_rect_75
L_fill_rect_75:
; Load instruction: t37 = load FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op46_t37 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t20 at FP+6
    ADD S0, FP, R0
    ADDI S0, S0, 6
    LOAD T7, SB, S0
    LI T3, 0
    ADD T7, T7, T3
; Load instruction: t39 = load FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(20), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op48_t39 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, S0
    LI S3, 1
    ADD T4, T4, S3
    STORE T4, SB, S0
    BEQ R0, R0, L_fill_rect_73
; Unconditional branch to L_fill_rect_73
; Invalidated 1 alloca bindings
L_fill_rect_76:
    BEQ R0, R0, L_fill_rect_71
; Unconditional branch to L_fill_rect_71
L_fill_rect_71:
; Load instruction: t41 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op51_t41 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T0, FP, R0
    ADDI T0, T0, 5
    LOAD T2, SB, T0
    LI T1, 0
    ADD T2, T2, T1
; Load instruction: t43 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f20_op53_t43 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S2, SB, T0
    LI T6, 1
    ADD S2, S2, T6
    STORE S2, SB, T0
    BEQ R0, R0, L_fill_rect_69
; Unconditional branch to L_fill_rect_69
; Invalidated 1 alloca bindings
L_fill_rect_72:
; Jump to epilogue
    BEQ R0, R0, L_fill_rect_99999
L_fill_rect_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
draw_circle:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 15 slots for locals
    ADDI SP, SP, 15
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
; Load param 3 from A3
    ADD S0, A3, R0
L_draw_circle_77:
    ADD T7, FP, R0
    STORE S3, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 1
    STORE S2, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 2
    STORE S1, SB, T5
    ADD T4, FP, R0
    ADDI T4, T4, 3
    STORE S0, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 4
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op8_t9 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T2, SB, T5
    STORE T2, SB, T3
    ADD T1, FP, R0
    ADDI T1, T1, 5
    LI T0, 0
    STORE T0, SB, T1
    ADD T0, FP, R0
    ADDI T0, T0, 6
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S3, SB, SC
    LI S3, 0
    STORE S3, SB, T0
    BEQ R0, R0, L_draw_circle_78
; Unconditional branch to L_draw_circle_78
; Invalidated 7 alloca bindings
L_draw_circle_78:
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op15_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD S3, FP, R0
    ADDI S3, S3, 4
    LOAD T0, SB, S3
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op17_t13 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T1, FP, R0
    ADDI T1, T1, 5
    LOAD T3, SB, T1
    SLT T4, T0, T3
    LI T5, 1
    SUB T0, T5, T4
    BEQ T0, R0, L_draw_circle_80
; Branch to L_draw_circle_80 if condition is false
    BEQ R0, R0, L_draw_circle_79
; Unconditional branch to L_draw_circle_79 (condition was true)
; Invalidated 2 alloca bindings
L_draw_circle_79:
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op21_t15 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T6, FP, R0
    LOAD T7, SB, T6
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op23_t16 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T4, FP, R0
    ADDI T4, T4, 4
    LOAD T5, SB, T4
    ADD T7, T7, T5
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op25_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T3, FP, R0
    ADDI T3, T3, 1
    LOAD T0, SB, T3
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op27_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T1, FP, R0
    ADDI T1, T1, 5
    LOAD S3, SB, T1
    ADD T0, T0, S3
; Load instruction: t21 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op29_t21 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD S3, SB, T5
; Spill live registers before call
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S2, SB, SC
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S1, SB, SC
; Spill t3 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE S0, SB, SC
; Spill t9 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T2, SB, SC
; Spill t17 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T7, SB, SC
; Spill t20 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T0, SB, SC
; Spill t21 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE S3, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Arg 1 (scalar) to A1
    ADD A1, T0, R0
; Arg 2 (scalar) to A2
    ADD A2, S3, R0
; Call function set_pixel
    CALL set_pixel
; Load instruction: t22 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op31_t22 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD S2, FP, R0
    LOAD S1, SB, S2
; Load instruction: t23 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op33_t23 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD S0, FP, R0
    ADDI S0, S0, 5
    LOAD T2, SB, S0
    ADD S1, S1, T2
; Load instruction: t25 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op35_t25 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T6, FP, R0
    ADDI T6, T6, 1
    LOAD T4, SB, T6
; Load instruction: t26 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op37_t26 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    LOAD T1, SB, T3
    ADD T4, T4, T1
; Load instruction: t28 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op39_t28 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD T7, SB, T5
; Spill live registers before call
; Spill t24 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S1, SB, SC
; Spill t27 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE T4, SB, SC
; Spill t28 to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE T7, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Arg 1 (scalar) to A1
    ADD A1, T4, R0
; Arg 2 (scalar) to A2
    ADD A2, T7, R0
; Call function set_pixel
    CALL set_pixel
; Load instruction: t29 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op41_t29 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T0, FP, R0
    LOAD S3, SB, T0
; Load instruction: t30 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op43_t30 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T2, FP, R0
    ADDI T2, T2, 5
    LOAD T1, SB, T2
    SUB S3, S3, T1
; Load instruction: t32 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op45_t32 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD S2, FP, R0
    ADDI S2, S2, 1
    LOAD S0, SB, S2
; Load instruction: t33 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op47_t33 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T6, FP, R0
    ADDI T6, T6, 4
    LOAD T3, SB, T6
    ADD S0, S0, T3
; Load instruction: t35 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op49_t35 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD S1, SB, T5
; Spill live registers before call
; Spill t31 to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE S3, SB, SC
; Spill t34 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE S0, SB, SC
; Spill t35 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE S1, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Arg 1 (scalar) to A1
    ADD A1, S0, R0
; Arg 2 (scalar) to A2
    ADD A2, S1, R0
; Call function set_pixel
    CALL set_pixel
; Load instruction: t36 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op51_t36 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T4, FP, R0
    LOAD T7, SB, T4
; Load instruction: t37 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op53_t37 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T1, FP, R0
    ADDI T1, T1, 4
    LOAD T3, SB, T1
    SUB T7, T7, T3
; Load instruction: t39 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op55_t39 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T0, FP, R0
    ADDI T0, T0, 1
    LOAD T2, SB, T0
; Load instruction: t40 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op57_t40 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD S2, FP, R0
    ADDI S2, S2, 5
    LOAD T6, SB, S2
    ADD T2, T2, T6
; Load instruction: t42 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op59_t42 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD S3, SB, T5
; Spill live registers before call
; Spill t38 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE T7, SB, SC
; Spill t41 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE T2, SB, SC
; Spill t42 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 31
    STORE S3, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Arg 1 (scalar) to A1
    ADD A1, T2, R0
; Arg 2 (scalar) to A2
    ADD A2, S3, R0
; Call function set_pixel
    CALL set_pixel
; Load instruction: t43 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op61_t43 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD S0, FP, R0
    LOAD S1, SB, S0
; Load instruction: t44 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op63_t44 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    LOAD T6, SB, T3
    SUB S1, S1, T6
; Load instruction: t46 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op65_t46 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T4, FP, R0
    ADDI T4, T4, 1
    LOAD T1, SB, T4
; Load instruction: t47 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op67_t47 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T0, FP, R0
    ADDI T0, T0, 5
    LOAD S2, SB, T0
    SUB T1, T1, S2
; Load instruction: t49 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op69_t49 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD T7, SB, T5
; Spill live registers before call
; Spill t45 to slot 17
    ADD SC, FP, R0
    ADDI SC, SC, 32
    STORE S1, SB, SC
; Spill t48 to slot 18
    ADD SC, FP, R0
    ADDI SC, SC, 33
    STORE T1, SB, SC
; Spill t49 to slot 19
    ADD SC, FP, R0
    ADDI SC, SC, 34
    STORE T7, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Arg 1 (scalar) to A1
    ADD A1, T1, R0
; Arg 2 (scalar) to A2
    ADD A2, T7, R0
; Call function set_pixel
    CALL set_pixel
; Load instruction: t50 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op71_t50 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T2, FP, R0
    LOAD S3, SB, T2
; Load instruction: t51 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op73_t51 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T6, FP, R0
    ADDI T6, T6, 5
    LOAD S2, SB, T6
    SUB S3, S3, S2
; Load instruction: t53 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op75_t53 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD S0, FP, R0
    ADDI S0, S0, 1
    LOAD T3, SB, S0
; Load instruction: t54 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op77_t54 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T4, FP, R0
    ADDI T4, T4, 4
    LOAD T0, SB, T4
    SUB T3, T3, T0
; Load instruction: t56 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op79_t56 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD S1, SB, T5
; Spill live registers before call
; Spill t52 to slot 20
    ADD SC, FP, R0
    ADDI SC, SC, 35
    STORE S3, SB, SC
; Spill t55 to slot 21
    ADD SC, FP, R0
    ADDI SC, SC, 36
    STORE T3, SB, SC
; Spill t56 to slot 22
    ADD SC, FP, R0
    ADDI SC, SC, 37
    STORE S1, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S3, R0
; Arg 1 (scalar) to A1
    ADD A1, T3, R0
; Arg 2 (scalar) to A2
    ADD A2, S1, R0
; Call function set_pixel
    CALL set_pixel
; Load instruction: t57 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op81_t57 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T1, FP, R0
    LOAD T7, SB, T1
; Load instruction: t58 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op83_t58 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD S2, FP, R0
    ADDI S2, S2, 5
    LOAD T0, SB, S2
    ADD T7, T7, T0
; Load instruction: t60 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op85_t60 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T2, FP, R0
    ADDI T2, T2, 1
    LOAD T6, SB, T2
; Load instruction: t61 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op87_t61 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD S0, FP, R0
    ADDI S0, S0, 4
    LOAD T4, SB, S0
    SUB T6, T6, T4
; Load instruction: t63 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op89_t63 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD S3, SB, T5
; Spill live registers before call
; Spill t59 to slot 23
    ADD SC, FP, R0
    ADDI SC, SC, 38
    STORE T7, SB, SC
; Spill t62 to slot 24
    ADD SC, FP, R0
    ADDI SC, SC, 39
    STORE T6, SB, SC
; Spill t63 to slot 25
    ADD SC, FP, R0
    ADDI SC, SC, 40
    STORE S3, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Arg 1 (scalar) to A1
    ADD A1, T6, R0
; Arg 2 (scalar) to A2
    ADD A2, S3, R0
; Call function set_pixel
    CALL set_pixel
; Load instruction: t64 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op91_t64 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T3, FP, R0
    LOAD S1, SB, T3
; Load instruction: t65 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op93_t65 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T0, FP, R0
    ADDI T0, T0, 4
    LOAD T4, SB, T0
    ADD S1, S1, T4
; Load instruction: t67 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op95_t67 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T1, FP, R0
    ADDI T1, T1, 1
    LOAD S2, SB, T1
; Load instruction: t68 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op97_t68 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T2, FP, R0
    ADDI T2, T2, 5
    LOAD S0, SB, T2
    SUB S2, S2, S0
; Load instruction: t70 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op99_t70 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T5, FP, R0
    ADDI T5, T5, 3
    LOAD T7, SB, T5
; Spill live registers before call
; Spill t66 to slot 26
    ADD SC, FP, R0
    ADDI SC, SC, 41
    STORE S1, SB, SC
; Spill t69 to slot 27
    ADD SC, FP, R0
    ADDI SC, SC, 42
    STORE S2, SB, SC
; Spill t70 to slot 28
    ADD SC, FP, R0
    ADDI SC, SC, 43
    STORE T7, SB, SC
; Setting up 3 register arguments
; Arg 0 (scalar) to A0
    ADD A0, S1, R0
; Arg 1 (scalar) to A1
    ADD A1, S2, R0
; Arg 2 (scalar) to A2
    ADD A2, T7, R0
; Call function set_pixel
    CALL set_pixel
; Load instruction: t71 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op101_t71 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t11 at FP+6
    ADD T6, FP, R0
    ADDI T6, T6, 6
    LOAD S3, SB, T6
    LI T4, 0
    SLT S0, T4, S3
    LI T3, 1
    SUB S3, T3, S0
    BEQ S3, R0, L_draw_circle_83
; Branch to L_draw_circle_83 if condition is false
    BEQ R0, R0, L_draw_circle_81
; Unconditional branch to L_draw_circle_81 (condition was true)
; Invalidated 1 alloca bindings
L_draw_circle_81:
; Load instruction: t73 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op105_t73 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t10 at FP+5
    ADD T0, FP, R0
    ADDI T0, T0, 5
    LOAD T1, SB, T0
    LI T2, 1
    ADD T1, T1, T2
    STORE T1, SB, T0
; Load instruction: t75 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op108_t75 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t11 at FP+6
    ADD T5, FP, R0
    ADDI T5, T5, 6
    LOAD S1, SB, T5
; Load instruction: t76 = load FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op110_t76 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S2, SB, T0
    LI T7, 2
    MUL T7, T7, S2
    LI S0, 1
    ADD T7, T7, S0
    ADD S1, S1, T7
    STORE S1, SB, T5
    BEQ R0, R0, L_draw_circle_83
; Unconditional branch to L_draw_circle_83
; Invalidated 2 alloca bindings
L_draw_circle_83:
; Load instruction: t80 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op113_t80 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t11 at FP+6
    ADD T3, FP, R0
    ADDI T3, T3, 6
    LOAD T4, SB, T3
    LI S3, 0
    SLT T4, S3, T4
    BEQ T4, R0, L_draw_circle_86
; Branch to L_draw_circle_86 if condition is false
    BEQ R0, R0, L_draw_circle_84
; Unconditional branch to L_draw_circle_84 (condition was true)
; Invalidated 1 alloca bindings
L_draw_circle_84:
; Load instruction: t82 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op115_t82 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T6, FP, R0
    ADDI T6, T6, 4
    LOAD T2, SB, T6
    LI S2, 1
    SUB T2, T2, S2
    STORE T2, SB, T6
; Load instruction: t84 = load FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(11), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op118_t84 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t11 at FP+6
    ADD S0, FP, R0
    ADDI S0, S0, 6
    LOAD T7, SB, S0
; Load instruction: t85 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f22_op120_t85 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T0, SB, T6
    LI T5, 2
    MUL T5, T5, T0
    LI S3, 1
    ADD T5, T5, S3
    SUB T7, T7, T5
    STORE T7, SB, S0
    BEQ R0, R0, L_draw_circle_86
; Unconditional branch to L_draw_circle_86
; Invalidated 2 alloca bindings
L_draw_circle_86:
    BEQ R0, R0, L_draw_circle_78
; Unconditional branch to L_draw_circle_78
L_draw_circle_80:
; Jump to epilogue
    BEQ R0, R0, L_draw_circle_99999
L_draw_circle_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
fill_circle:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 13 slots for locals
    ADDI SP, SP, 13
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
; Load param 3 from A3
    ADD S0, A3, R0
L_fill_circle_87:
    ADD T7, FP, R0
    STORE S3, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 1
    STORE S2, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 2
    STORE S1, SB, T5
    ADD T4, FP, R0
    ADDI T4, T4, 3
    STORE S0, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    LI T2, 0
    STORE T2, SB, T3
    BEQ R0, R0, L_fill_circle_88
; Unconditional branch to L_fill_circle_88
; Invalidated 5 alloca bindings
L_fill_circle_88:
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f24_op10_t9 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T1, FP, R0
    ADDI T1, T1, 4
    LOAD T0, SB, T1
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f24_op12_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+2
    ADD T2, FP, R0
    ADDI T2, T2, 2
    LOAD T3, SB, T2
    SLT T4, T3, T0
    LI T5, 1
    SUB T0, T5, T4
    BEQ T0, R0, L_fill_circle_91
; Branch to L_fill_circle_91 if condition is false
    BEQ R0, R0, L_fill_circle_89
; Unconditional branch to L_fill_circle_89 (condition was true)
; Invalidated 2 alloca bindings
L_fill_circle_89:
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f24_op16_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T6, FP, R0
    LOAD T7, SB, T6
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f24_op18_t13 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T4, FP, R0
    ADDI T4, T4, 1
    LOAD T5, SB, T4
; Load instruction: t14 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f24_op20_t14 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    LOAD T0, SB, T3
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f24_op22_t15 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T1, FP, R0
    ADDI T1, T1, 3
    LOAD T2, SB, T1
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S3, SB, SC
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S2, SB, SC
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S1, SB, SC
; Spill t3 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S0, SB, SC
; Spill t12 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T7, SB, SC
; Spill t13 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T5, SB, SC
; Spill t14 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T0, SB, SC
; Spill t15 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T2, SB, SC
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Arg 1 (scalar) to A1
    ADD A1, T5, R0
; Arg 2 (scalar) to A2
    ADD A2, T0, R0
; Arg 3 (scalar) to A3
    ADD A3, T2, R0
; Call function draw_circle
    CALL draw_circle
    BEQ R0, R0, L_fill_circle_90
; Unconditional branch to L_fill_circle_90
L_fill_circle_90:
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f24_op24_t16 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+4
    ADD S3, FP, R0
    ADDI S3, S3, 4
    LOAD S2, SB, S3
    LI S1, 0
    ADD S2, S2, S1
; Load instruction: t18 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f24_op26_t18 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S0, SB, S3
    LI T6, 1
    ADD S0, S0, T6
    STORE S0, SB, S3
    BEQ R0, R0, L_fill_circle_88
; Unconditional branch to L_fill_circle_88
; Invalidated 1 alloca bindings
L_fill_circle_91:
; Jump to epilogue
    BEQ R0, R0, L_fill_circle_99999
L_fill_circle_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
draw_char:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 12 slots for locals
    ADDI SP, SP, 12
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
; Load param 3 from A3
    ADD S0, A3, R0
L_draw_char_92:
    ADD T7, FP, R0
    STORE S3, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 1
    STORE S2, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 2
    STORE S1, SB, T5
    ADD T4, FP, R0
    ADDI T4, T4, 3
    STORE S0, SB, T4
; Load instruction: t8 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f26_op8_t8 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T3, SB, T5
    LI T2, 32
    XOR T1, T3, T2
    LI T0, 0
    SLTU T3, T0, T1
    BEQ T3, R0, L_draw_char_95
; Branch to L_draw_char_95 if condition is false
    BEQ R0, R0, L_draw_char_93
; Unconditional branch to L_draw_char_93 (condition was true)
; Invalidated 4 alloca bindings
L_draw_char_93:
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f26_op12_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t4 at FP+0
    ADD T1, FP, R0
    LOAD T0, SB, T1
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f26_op14_t11 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T2, FP, R0
    ADDI T2, T2, 1
    LOAD T3, SB, T2
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f26_op16_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+3
    ADD T4, FP, R0
    ADDI T4, T4, 3
    LOAD T5, SB, T4
    LI T6, 3
    LI T7, 5
; Spill live registers before call
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 12
    STORE S3, SB, SC
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 13
    STORE S2, SB, SC
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S1, SB, SC
; Spill t3 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S0, SB, SC
; Spill t10 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE T0, SB, SC
; Spill t11 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE T3, SB, SC
; Spill const_f26_op18_3 to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T6, SB, SC
; Spill const_f26_op19_5 to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T7, SB, SC
; Spill t12 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T5, SB, SC
; Pushing 1 arguments to stack
; Push arg 4 (scalar) to stack
    STORE T5, SB, SP
    ADDI SP, SP, 1
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T0, R0
; Arg 1 (scalar) to A1
    ADD A1, T3, R0
; Arg 2 (scalar) to A2
    ADD A2, T6, R0
; Arg 3 (scalar) to A3
    ADD A3, T7, R0
; Pushed 1 words to stack
; Call function fill_rect
    CALL fill_rect
; Clean up 1 words from stack
    ADDI SP, SP, -1
    BEQ R0, R0, L_draw_char_95
; Unconditional branch to L_draw_char_95
L_draw_char_95:
; Jump to epilogue
    BEQ R0, R0, L_draw_char_99999
L_draw_char_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
draw_string:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 14 slots for locals
    ADDI SP, SP, 14
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
; Load param 2 from A2
    ADD S1, A2, R0
; Load param 2 bank from A3
; Load param 3 from FP-7
    ADDI SC, FP, -7
    LOAD S0, SB, SC
L_draw_string_96:
    ADD T7, FP, R0
    STORE S3, SB, T7
    ADD T6, FP, R0
    ADDI T6, T6, 1
    STORE S2, SB, T6
    ADD T5, FP, R0
    ADDI T5, T5, 2
    STORE S1, SB, T5
    ADDI T4, T5, 1
    STORE A3, SB, T4
    ADD T3, FP, R0
    ADDI T3, T3, 4
    STORE S0, SB, T3
    ADD T2, FP, R0
    ADDI T2, T2, 5
; Load instruction: t9 = load FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(4), bank: Stack })
; LOAD: Pointer load_src_ptr_f28_op11_t9 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T1, SB, T7
    STORE T1, SB, T2
    BEQ R0, R0, L_draw_string_97
; Unconditional branch to L_draw_string_97
; Invalidated 5 alloca bindings
L_draw_string_97:
; Load instruction: t10 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f28_op14_t10 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+2
    ADD T0, FP, R0
    ADDI T0, T0, 2
    LOAD T4, SB, T0
    ADDI T2, T0, 1
    LOAD T3, SB, T2
; Bank value in T3 - tags: -1 = Global, -2 = Stack, positive = dynamic
; Load instruction: t11 = load FatPtr(FatPointer { addr: Temp(10), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(10), bank: Mixed })
; LOAD: Pointer t10 has bank info: Dynamic("load_f28_op17_t10_bank_val")
    LI T6, -1
    BEQ T3, T6, L_bc_457fb935_use_global
    LI T7, -2
    BEQ T3, T7, L_bc_457fb935_use_stack
    ADD T5, T3, R0
    BEQ R0, R0, L_bc_457fb935_done
L_bc_457fb935_use_global:
    ADD T5, GP, R0
    BEQ R0, R0, L_bc_457fb935_done
L_bc_457fb935_use_stack:
    ADD T5, SB, R0
L_bc_457fb935_done:
; LOAD: Using bank register T5 for load
    LOAD T2, T5, T4
    BEQ T2, R0, L_draw_string_99
; Branch to L_draw_string_99 if condition is false
    BEQ R0, R0, L_draw_string_98
; Unconditional branch to L_draw_string_98 (condition was true)
; Invalidated 1 alloca bindings
L_draw_string_98:
; Load instruction: t12 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f28_op22_t12 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+5
    ADD T6, FP, R0
    ADDI T6, T6, 5
    LOAD T7, SB, T6
; Load instruction: t13 = load FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(5), bank: Stack })
; LOAD: Pointer load_src_ptr_f28_op24_t13 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t5 at FP+1
    ADD T2, FP, R0
    ADDI T2, T2, 1
    LOAD T0, SB, T2
; Load instruction: t14 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f28_op26_t14 has bank info: Stack
; LOAD: Using bank register Sb for load
; Spill t0 to slot 0
    ADD SC, FP, R0
    ADDI SC, SC, 14
    STORE S3, SB, SC
; Recompute alloca t6 at FP+2
    ADD S3, FP, R0
    ADDI S3, S3, 2
; Spill t1 to slot 1
    ADD SC, FP, R0
    ADDI SC, SC, 15
    STORE S2, SB, SC
    LOAD S2, SB, S3
; Spill t2 to slot 2
    ADD SC, FP, R0
    ADDI SC, SC, 16
    STORE S1, SB, SC
    ADDI S1, S3, 1
; Spill t3 to slot 3
    ADD SC, FP, R0
    ADDI SC, SC, 17
    STORE S0, SB, SC
    LOAD S0, SB, S1
; Bank value in S0 - tags: -1 = Global, -2 = Stack, positive = dynamic
; Load instruction: t15 = load FatPtr(FatPointer { addr: Temp(14), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(14), bank: Mixed })
; LOAD: Pointer t14 has bank info: Dynamic("load_f28_op29_t14_bank_val")
; Spill t9 to slot 4
    ADD SC, FP, R0
    ADDI SC, SC, 18
    STORE T1, SB, SC
    LI T1, -1
    BEQ S0, T1, L_bc_a26d2144_use_global
; Spill t10 to slot 5
    ADD SC, FP, R0
    ADDI SC, SC, 19
    STORE T4, SB, SC
; Spill load_f28_op17_t10_bank_val to slot 6
    ADD SC, FP, R0
    ADDI SC, SC, 20
    STORE T3, SB, SC
    LI T4, -2
    BEQ S0, T4, L_bc_a26d2144_use_stack
    ADD S1, S0, R0
    BEQ R0, R0, L_bc_a26d2144_done
L_bc_a26d2144_use_global:
    ADD S1, GP, R0
    BEQ R0, R0, L_bc_a26d2144_done
L_bc_a26d2144_use_stack:
    ADD S1, SB, R0
L_bc_a26d2144_done:
; LOAD: Using bank register S1 for load
    LOAD T1, S1, S2
; Load instruction: t16 = load FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(7), bank: Stack })
; LOAD: Pointer load_src_ptr_f28_op34_t16 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t7 at FP+4
    ADD T4, FP, R0
    ADDI T4, T4, 4
; Spill load_f28_op17_t10_bank_val to slot 7
    ADD SC, FP, R0
    ADDI SC, SC, 21
    STORE T3, SB, SC
    LOAD T3, SB, T4
; Spill live registers before call
; Spill load_f28_op18_t11_resolved_bank_28_f28_op19 to slot 8
    ADD SC, FP, R0
    ADDI SC, SC, 22
    STORE T5, SB, SC
; Spill t14 to slot 9
    ADD SC, FP, R0
    ADDI SC, SC, 23
    STORE S2, SB, SC
; Spill load_f28_op29_t14_bank_val to slot 10
    ADD SC, FP, R0
    ADDI SC, SC, 24
    STORE S0, SB, SC
; Spill load_f28_op29_t14_bank_val to slot 11
    ADD SC, FP, R0
    ADDI SC, SC, 25
    STORE S0, SB, SC
; Spill load_f28_op30_t15_resolved_bank_28_f28_op31 to slot 12
    ADD SC, FP, R0
    ADDI SC, SC, 26
    STORE S1, SB, SC
; Spill t12 to slot 13
    ADD SC, FP, R0
    ADDI SC, SC, 27
    STORE T7, SB, SC
; Spill t13 to slot 14
    ADD SC, FP, R0
    ADDI SC, SC, 28
    STORE T0, SB, SC
; Spill t15 to slot 15
    ADD SC, FP, R0
    ADDI SC, SC, 29
    STORE T1, SB, SC
; Spill t16 to slot 16
    ADD SC, FP, R0
    ADDI SC, SC, 30
    STORE T3, SB, SC
; Setting up 4 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T7, R0
; Arg 1 (scalar) to A1
    ADD A1, T0, R0
; Arg 2 (scalar) to A2
    ADD A2, T1, R0
; Arg 3 (scalar) to A3
    ADD A3, T3, R0
; Call function draw_char
    CALL draw_char
; Load instruction: t17 = load FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(8), bank: Stack })
; LOAD: Pointer load_src_ptr_f28_op36_t17 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t8 at FP+5
    ADD T5, FP, R0
    ADDI T5, T5, 5
    LOAD T6, SB, T5
    LI T2, 6
    ADD T6, T6, T2
    STORE T6, SB, T5
; Load instruction: t19 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f28_op39_t19 has bank info: Stack
; LOAD: Using bank register Sb for load
; Recompute alloca t6 at FP+2
    ADD S3, FP, R0
    ADDI S3, S3, 2
    LOAD S2, SB, S3
    ADDI S0, S3, 1
    LOAD S1, SB, S0
; Bank value in S1 - tags: -1 = Global, -2 = Stack, positive = dynamic
; Load instruction: t20 = load FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(6), bank: Stack })
; LOAD: Pointer load_src_ptr_f28_op43_t20 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD T4, SB, S3
    ADDI T7, S3, 1
    LOAD T0, SB, T7
; Bank value in T0 - tags: -1 = Global, -2 = Stack, positive = dynamic
    ADDI T1, T4, 1
; WARNING: Static bank overflow - offset 1 crosses 0 banks
; GEP: Setting bank info for t21 to Stack
    LI T3, -2
    STORE T1, SB, S3
    ADDI T2, S3, 1
    STORE T3, SB, T2
    BEQ R0, R0, L_draw_string_97
; Unconditional branch to L_draw_string_97
; Invalidated 2 alloca bindings
L_draw_string_99:
; Jump to epilogue
    BEQ R0, R0, L_draw_string_99999
L_draw_string_99999:
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
graphics_width:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 8 slots for locals
    ADDI SP, SP, 8
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
L_graphics_width_100:
; Load instruction: t0 = load Global("display_width")
; Canonicalizing global variable: display_width
    LI S3, 0
; LOAD: Pointer load_src_ptr_f30_op1_t0 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD S2, GP, S3
    MOVE RV0, S2
; Jump to epilogue
    BEQ R0, R0, L_graphics_width_99999
L_graphics_width_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
graphics_height:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 8 slots for locals
    ADDI SP, SP, 8
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
L_graphics_height_101:
; Load instruction: t0 = load Global("display_height")
; Canonicalizing global variable: display_height
    LI S3, 1
; LOAD: Pointer load_src_ptr_f32_op1_t0 has bank info: Global
; LOAD: Using bank register Gp for load
    LOAD S2, GP, S3
    MOVE RV0, S2
; Jump to epilogue
    BEQ R0, R0, L_graphics_height_99999
L_graphics_height_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
fast_sin:
; === Function Prologue ===
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 9 slots for locals
    ADDI SP, SP, 9
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
L_fast_sin_102:
    ADD S2, FP, R0
    STORE S3, SB, S2
; Load instruction: t2 = load FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(1), bank: Stack })
; LOAD: Pointer load_src_ptr_f34_op2_t2 has bank info: Stack
; LOAD: Using bank register Sb for load
    LOAD S1, SB, S2
    LI S0, 2
    ADD T6, S1, R0
    ADD T7, S0, T6
; Runtime bank overflow calculation for dynamic GEP
    LI T4, -1536
    DIV T5, T7, T4
    MOD T3, T7, T4
; Base bank info: Global
; Clearing binding for 'gep_new_bank_f34_op9_t3'
; Computing new bank gep_new_bank_f34_op9_t3 = GP + bank_delta
    ADD T2, GP, T5
; Result bank tracked as Dynamic(gep_new_bank_f34_op9_t3)
    ADD T7, T3, R0
; GEP: Setting bank info for t3 to Dynamic("gep_new_bank_f34_op9_t3")
; Load instruction: t4 = load FatPtr(FatPointer { addr: Temp(3), bank: Mixed })
; Canonicalizing fat pointer: FatPtr(FatPointer { addr: Temp(3), bank: Mixed })
; LOAD: Pointer t3 has bank info: Dynamic("gep_new_bank_f34_op9_t3")
    LI T0, -1
    BEQ T2, T0, L_bc_fe5f674a_use_global
    LI T6, -2
    BEQ T2, T6, L_bc_fe5f674a_use_stack
    ADD T1, T2, R0
    BEQ R0, R0, L_bc_fe5f674a_done
L_bc_fe5f674a_use_global:
    ADD T1, GP, R0
    BEQ R0, R0, L_bc_fe5f674a_done
L_bc_fe5f674a_use_stack:
    ADD T1, SB, R0
L_bc_fe5f674a_done:
; LOAD: Using bank register T1 for load
    LOAD T5, T1, T7
    MOVE RV0, T5
; Jump to epilogue
    BEQ R0, R0, L_fast_sin_99999
L_fast_sin_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
