; Generated by Ripple C99 Compiler (rcc)

; Function: puts
puts:
    STORE RA, R13, R14
    ADDI R14, R14, 1
    STORE R15, R13, R14
    ADDI R14, R14, 1
    ADD R15, R14, R0
; === Processing Binary t2 ===
; Binary: need(lhs)=1, need(rhs)=1
; Getting register for temp t0
; t0 already in register
;   t0 is now in R3
; get_reg for 'const_0_0'
;   Allocated free register for const_0_0
    LI R6, 0
; Reusing R3 for result t2
; === ModuleLowerer::get_reg for 'eq_temp1_1' ===
; get_reg for 'eq_temp1_1'
;   Allocated free register for eq_temp1_1
; === ModuleLowerer::get_reg for 'eq_temp2_1' ===
; get_reg for 'eq_temp2_1'
;   Allocated free register for eq_temp2_1
    SLTU R7, R3, R6
    SLTU R8, R6, R3
    OR R3, R7, R8
; === ModuleLowerer::get_reg for 'eq_inv_2' ===
; get_reg for 'eq_inv_2'
;   Allocated free register for eq_inv_2
    LI R8, 1
    SUB R3, R8, R3
; Freeing right operand register R6
; Getting register for temp t2
; t2 already in register
;   t2 is now in R3
    BNE R3, R0, puts_L1
    BEQ R0, R0, puts_L3
puts_L1:
; === Processing Binary t3 ===
; Binary: need(lhs)=1, need(rhs)=1
; get_reg for 'const_0_3'
;   Allocated free register for const_0_3
    LI R5, 0
; get_reg for 'const_1_4'
;   Allocated free register for const_1_4
    LI R6, 1
; Reusing R5 for result t3
    SUB R5, R5, R6
; Freeing right operand register R6
; Getting register for temp t3
; t3 already in register
;   t3 is now in R5
    ADD R3, R5, R0
    ADD R14, R15, R0
    ADDI R14, R14, -1
    LOAD R15, R13, R14
    ADDI R14, R14, -1
    LOAD RA, R13, R14
    RET
    BEQ R0, R0, puts_L3
puts_L3:
    BEQ R0, R0, puts_L4
puts_L4:
; Load from [t0] to t4
; === ModuleLowerer::get_reg for 't4' ===
; get_reg for 't4'
;   Allocated free register for t4
; Getting register for temp t0
; t0 not found, allocating new register
; get_reg for 't0'
;   Allocated free register for t0
;   t0 is now in R6
; === ModuleLowerer::get_reg for 'bank_select_5' ===
; get_reg for 'bank_select_5'
;   Allocated free register for bank_select_5
; Select bank register based on tag
    LI R7, 1
    BEQ R4, R7, bank_stack_6
    ADD R7, R0, R0
    BEQ R0, R0, bank_done_6
bank_stack_6:
    ADD R7, R13, R0
bank_done_6:
    LOAD R5, R7, R6
; Getting register for temp t4
; t4 already in register
;   t4 is now in R5
    BNE R5, R0, puts_L5
    BEQ R0, R0, puts_L6
puts_L5:
; Load from [t0] to t5
; === ModuleLowerer::get_reg for 't5' ===
; get_reg for 't5'
;   Allocated free register for t5
; Getting register for temp t0
; t0 not found, allocating new register
; get_reg for 't0'
;   Allocated free register for t0
;   t0 is now in R6
; === ModuleLowerer::get_reg for 'bank_select_7' ===
; get_reg for 'bank_select_7'
;   Allocated free register for bank_select_7
; Select bank register based on tag
    LI R7, 1
    BEQ R4, R7, bank_stack_8
    ADD R7, R0, R0
    BEQ R0, R0, bank_done_8
bank_stack_8:
    ADD R7, R13, R0
bank_done_8:
    LOAD R5, R7, R6
; Getting register for temp t5
; t5 already in register
;   t5 is now in R5
    ADD R3, R5, R0
    CALL putchar
; === Processing Binary t6 ===
; Binary: need(lhs)=1, need(rhs)=1
; Getting register for temp t0
; t0 not found, allocating new register
; get_reg for 't0'
;   Allocated free register for t0
;   t0 is now in R5
; get_reg for 'const_1_9'
;   Allocated free register for const_1_9
    LI R6, 1
; Reusing R5 for result t6
    ADD R5, R5, R6
; Freeing right operand register R6
; Getting register for temp t0
; t0 not found, allocating new register
; get_reg for 't0'
;   Allocated free register for t0
;   t0 is now in R6
; === ModuleLowerer::get_reg for 'bank_select_10' ===
; get_reg for 'bank_select_10'
;   Allocated free register for bank_select_10
; Select bank register based on tag
    LI R7, 1
    BEQ R4, R7, bank_stack_11
    ADD R7, R0, R0
    BEQ R0, R0, bank_done_11
bank_stack_11:
    ADD R7, R13, R0
bank_done_11:
; Store t6 to [t0]
; Getting register for temp t6
; t6 already in register
;   t6 is now in R5
    STORE R5, R7, R6
    BEQ R0, R0, puts_L4
puts_L6:
; get_reg for 'const_10_12'
;   Allocated free register for const_10_12
    LI R5, 10
    ADD R3, R5, R0
    CALL putchar
; get_reg for 'const_0_13'
;   Allocated free register for const_0_13
    LI R5, 0
    ADD R3, R5, R0
    ADD R14, R15, R0
    ADDI R14, R14, -1
    LOAD R15, R13, R14
    ADDI R14, R14, -1
    LOAD RA, R13, R14
    RET
