; Generated by Ripple C99 Compiler (rcc)

; Global 'putchar' at address 0
puts:
; === Function Prologue ===
; Initialize SB as stack bank (1)
    LI SB, 1
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 10 slots for locals
    ADDI SP, SP, 10
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
    ADD S2, FP, R0
    STORE S3, SB, S2
    BEQ R0, R0, L_puts_1
; Unconditional branch to L_puts_1
L_puts_1:
    LOAD S1, SB, S2
    ADDI S0, S2, 1
    LOAD T7, SB, S0
    LOAD T6, T7, S1
    BEQ T6, R0, L_puts_3
; Branch to L_puts_3 if condition is false
    BEQ R0, R0, L_puts_2
; Unconditional branch to L_puts_2 (condition was true)
L_puts_2:
    LOAD T5, SB, S2
    ADDI T4, S2, 1
    LOAD T3, SB, T4
    LOAD T2, T3, T5
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T2, R0
; Call function putchar
    CALL putchar
; Scalar return value for t6
    LOAD T1, SB, S2
    ADDI T0, S2, 1
    LOAD S0, SB, T0
    ADDI T6, T1, 1
    LI T4, 1
    STORE T6, SB, S2
    ADDI T0, S2, 1
    STORE T4, SB, T0
    BEQ R0, R0, L_puts_1
; Unconditional branch to L_puts_1
L_puts_3:
    LI T1, 10
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T1, R0
; Call function putchar
    CALL putchar
; Scalar return value for t9
    LI RV0, 0
; Jump to epilogue
    BEQ R0, R0, L_puts_99999
L_puts_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
