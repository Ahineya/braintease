; Generated by Ripple C99 Compiler (rcc)

puts:
; === Function Prologue ===
; Initialize SB as stack bank (1)
    LI SB, 1
; Save RA at SP
    STORE RA, SB, SP
    ADDI SP, SP, 1
; Save old FP
    STORE FP, SB, SP
    ADDI SP, SP, 1
; Save callee-saved registers S0-S3
    STORE S0, SB, SP
    ADDI SP, SP, 1
    STORE S1, SB, SP
    ADDI SP, SP, 1
    STORE S2, SB, SP
    ADDI SP, SP, 1
    STORE S3, SB, SP
    ADDI SP, SP, 1
; Set FP = SP
    ADD FP, SP, R0
; Allocate 10 slots for locals
    ADDI SP, SP, 10
; Reserve 20 spill slots above locals
    ADDI SP, SP, 20
; Load param 0 from A0
    ADD S3, A0, R0
; Load param 1 from A1
    ADD S2, A1, R0
    ADD S1, FP, R0
    LI S0, 1
    STORE S3, SB, S1
    ADDI T7, S1, 1
    STORE S0, SB, T7
    LI T6, 0
    XOR T5, S1, T6
    LI T4, 1
    SLTU S1, T5, T4
    BEQ S1, R0, L_puts_3
; Branch to L_puts_3 if condition is false
    BEQ R0, R0, L_puts_1
; Unconditional branch to L_puts_1 (condition was true)
L_puts_1:
    LI T3, 0
    LI T2, 1
    SUB T3, T3, T2
    MOVE RV0, T3
; Jump to epilogue
    BEQ R0, R0, L_puts_99999
L_puts_4:
    BEQ R0, R0, L_puts_3
; Unconditional branch to L_puts_3
L_puts_3:
    BEQ R0, R0, L_puts_5
; Unconditional branch to L_puts_5
L_puts_5:
    LOAD T0, SB, T1
    BEQ T0, R0, L_puts_7
; Branch to L_puts_7 if condition is false
    BEQ R0, R0, L_puts_6
; Unconditional branch to L_puts_6 (condition was true)
L_puts_6:
    LOAD T7, SB, T1
; Setting up 1 register arguments
; Arg 0 (fat ptr) to A0,A1
    ADD A0, T7, R0
    ADD A1, SB, R0
; Call function putchar
    CALL putchar
    ADDI S0, T1, 1
    LI S3, 1
    STORE S0, SB, T5
    ADDI T4, T5, 1
    STORE S3, SB, T4
    BEQ R0, R0, L_puts_5
; Unconditional branch to L_puts_5
L_puts_7:
    LI T6, 10
; Setting up 1 register arguments
; Arg 0 (scalar) to A0
    ADD A0, T6, R0
; Call function putchar
    CALL putchar
    LI RV0, 0
; Jump to epilogue
    BEQ R0, R0, L_puts_99999
L_puts_8:
; Jump to epilogue
    BEQ R0, R0, L_puts_99999
L_puts_99999:
; Return scalar value
; === Function Epilogue ===
; Restore SP = FP
    ADD SP, FP, R0
; Restore callee-saved registers S3-S0
    ADDI SC, FP, -1
    LOAD S3, SB, SC
    ADDI SC, FP, -2
    LOAD S2, SB, SC
    ADDI SC, FP, -3
    LOAD S1, SB, SC
    ADDI SC, FP, -4
    LOAD S0, SB, SC
; Restore old FP
    ADDI SP, SP, -5
    LOAD FP, SB, SP
; Restore RA
    ADDI SP, SP, -1
    LOAD RA, SB, SP
; Return to caller
    ADD PCB, RAB, R0
    JALR R0, R0, RA
